(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

'use strict';

var application = require('./application');

// Register Entities
application.module('Entities.Buckets', require('./entities/buckets'));
application.module('Entities.Tasks', require('./entities/tasks'));
application.module('Entities.WorkflowStates', require('./entities/workflowstate'));
application.module('Entities.Subtask', require('./entities/subtask'));
application.module('Entities.Extensions', require('./entities/extension'));
application.module('Entities.Signoff', require('./entities/signoff'));
application.module('Entities.Engagement', require('./entities/engagement'));
application.module('Entities.Points', require('./entities/points'));
application.module('Entities.Checklists', require('./entities/checklists'));
application.module('Entities.User', require('./entities/user'));
application.module('Entities.FirmSettings', require('./entities/firmsettings'));
application.module('Entities.CustomField', require('./entities/customfield'));
application.module('Entities.TaskAttachment', require('./entities/taskattachments'));
application.module('Entities.TaskAttachment', require('./entities/taskattachments'));
application.module('Entities.TaskSpecificJurisdiction', require('./entities/taskspecificjurisdiction'));
application.module('Entities.StaffBudgets', require('./entities/staffbudgets'));

// Register Sub-Application Modules
application.module('Workflow', require('./apps/workflow/index'));
application.module('Workflow.Jurisdiction', require('./modules/jurisdiction/index'));
application.module('Workflow.Assembly', require('./modules/assembly/index'));
application.module('Workflow.Shipping', require('./modules/shipping/index'));
application.module('Workflow.eFile', require('./modules/efile/index'));
application.module('Workflow.Signoff', require('./modules/signoff/index'));
application.module('Workflow.Engagement', require('./modules/engagement/index'));
application.module('Workflow.Extension', require('./modules/extension/index'));
application.module('Workflow.Points', require('./modules/points/index'));
application.module('Workflow.Checklists', require('./modules/checklists/index'));
application.module('Workflow.CustomField', require('./modules/customfield/index'));
//require('./modules/watcher/index');

application.on('start', function () {
    Backbone.history.start({
        pushState: false,
        root: '/'
    });

    require('./lib/plugins/watchman');
});

application.start();
},{"./application":3,"./apps/workflow/index":4,"./entities/buckets":5,"./entities/checklists":6,"./entities/customfield":7,"./entities/engagement":8,"./entities/extension":9,"./entities/firmsettings":10,"./entities/points":11,"./entities/signoff":12,"./entities/staffbudgets":13,"./entities/subtask":14,"./entities/taskattachments":15,"./entities/tasks":16,"./entities/taskspecificjurisdiction":17,"./entities/user":18,"./entities/workflowstate":19,"./lib/plugins/watchman":76,"./modules/assembly/index":91,"./modules/checklists/index":102,"./modules/customfield/index":105,"./modules/efile/index":110,"./modules/engagement/index":113,"./modules/extension/index":124,"./modules/jurisdiction/index":133,"./modules/points/index":142,"./modules/shipping/index":148,"./modules/signoff/index":153}],2:[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],3:[function(require,module,exports){
var Reqres = require('./lib/config/reqres'),
    Events = require('./lib/config/events'),
    Commands = require('./lib/config/commands'),
    LoadingViewController = require('./lib/components/loading/controller'),
    HeaderView = require('./lib/components/header/View'),
    Application;

require('./lib/views/base');
require('./lib/plugins/backbone.picky');
require('./lib/config/sync');

// require('./lib/plugins/sort');
window.addEventListener('storage', function (e) {
    if (_.isUndefined(localStorage['longlive']))
    {
        var logoutForm = $('form#logoutform');
        if (logoutForm.length !== 0) {
            logoutForm.submit();
        } else {
            window.close();
        }
    }
});

/*
 * Spinner Configuration
 */
$.fn.spin = function (opts, color) {
    var Spinner = require('./lib/plugins/spin.js');
    return this.each(function () {
        var $this = $(this),
          data = $this.data();

        if (data.spinner) {
            data.spinner.stop();
            delete data.spinner;
        }
        if (opts !== false) {
            opts = $.extend(
              { color: color || $this.css('color') },
              $.fn.spin.presets[opts] || opts
            )
            data.spinner = new Spinner(opts).spin(this)
        }
    })
};

$.fn.spin.presets = {
    tiny: { lines: 8, length: 2, width: 2, radius: 3 },
    small: { lines: 8, length: 4, width: 3, radius: 5 },
    large: { lines: 10, length: 8, width: 4, radius: 8 }
};

/* Spinner Configuration */

/* Expirtaion */

//function fetchExpirationSettings() {
//    $.ajax({
//        method: 'post',
//        url: window.routemap + 'account/status?' + Date.now(),
//        success: function (data) {
//            window.localStorage['longlive'] = JSON.stringify(data);
//            return Events.trigger('initialize:session:timer', false);
//        },
//        error: function (resp) {
//            return window.localStorage['longlive'] = resp;
//        }
//    });
//}
/* End - Expiration */


Application = new Marionette.Application({
    initialize: function () {
        var layoutRegion = require('./lib/shared/workflow.layout');
        this.rootView = new layoutRegion();
    }
});

//Application.on('before:start', function beforeStart() {
//    fetchExpirationSettings.call();
//});

Reqres.setHandler('default:region', function () {
    return Application.rootView.main;
});

Commands.setHandler('when:fetched', function (entities, callback) {
    var xhrs = _.chain([entities]).flatten().pluck('_fetch').value();
    return $.when.apply($, xhrs)
        .done(function () {
            return callback();
        })
        .progress(function () {

        });
});

Commands.setHandler('show:loading', function (view, options) {
    return new LoadingViewController({
        view: view,
        region: options.region,
        config: options.loading
    });
});

module.exports = Application;
},{"./lib/components/header/View":64,"./lib/components/loading/controller":65,"./lib/config/commands":67,"./lib/config/events":68,"./lib/config/reqres":69,"./lib/config/sync":70,"./lib/plugins/backbone.picky":74,"./lib/plugins/spin.js":75,"./lib/shared/workflow.layout":79,"./lib/views/base":80}],4:[function(require,module,exports){
var Reqres = require('../../lib/config/reqres'),
    Commands = require('../../lib/config/commands'),
    Events = require('../../lib/config/events');

module.exports = function (ctx, application) {
    var Router, API;
    ctx.startWithParent = true;
    application.module('Workflow.TaskView', require('../../modules/taskView/index'));

    Events.on('changeroute:quicksearch', function (data){

    });

    Router = Marionette.AppRouter.extend({
        appRoutes: {
            // Routes
            '*type': 'showByView',
        }
    });

    API = {
        showByView: function (type) {
            type = type || defaultUserBucket;
            Events.trigger('task:show:bucket', type);
        },
    };

    ctx.on('start', function () {
        application.module('Workflow.TaskView').start({
            region: application.rootView.main
        });

        return new Router({
            controller: API
        });
    });
};
},{"../../lib/config/commands":67,"../../lib/config/events":68,"../../lib/config/reqres":69,"../../modules/taskView/index":162}],5:[function(require,module,exports){

var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (ctx, application) {
    var API;

    ctx.Bucket = BaseModel.extend({
        idAttribute: 'id',
        initialize: function () {
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        }
    });

    ctx.BucketSet = BaseCollection.extend({
        model: ctx.Bucket,
        url: function () {
            return window.routemap + 'api/firmsettings/bucketlist';
        },
        initialize: function () {
            var singleSelect = new Backbone.Picky.SingleSelect(this);
            _.extend(this, singleSelect);
        }
    });

    API = {
        GetBucketList: function () {
            var buckets = new ctx.BucketSet();
            buckets.fetch({ reset: true });
            return buckets;
        },
        SetupBucketLinks: function () {
            return new ctx.BucketSet(window.bucketlist);
        }
    };

    Reqres.setHandler('bucket:entities', function () {
        return API.GetBucketList();
    });

    Reqres.setHandler('fetch:bucket:entities', function () {
        return API.SetupBucketLinks();
    });

};
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],6:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function(context, application) {
    var API;

    context.ChecklistsModel = BaseModel.extend({
        idAttribute: 'chktaskid',
        url: function() {
            return window.routemap + 'api/checklists';
        },
        initialize: function() {
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        }        
    });

    context.ChecklistsCollection = BaseCollection.extend({
        model: context.ChecklistsModel,
        url: function() {
            return window.routemap + 'api/checklists';
        },
        initialize: function() {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);

            this.listenTo(this, 'update', this.precheck);
        },

        precheck: function() {
            this.originalModels = this.models.slice();
            this.sortableCollection = new SortedCollection(this);
        },

        sortData: function(keyname) {
            if (this.sortableCollection._comparator === keyname) {
                return this.reset(this.sortableCollection.reverseSort().models);
            }

            return this.reset(this.sortableCollection.setSort(keyname).models);
        },

        parse: function(response) {
            if (this.options && !_.isObject(this.options)) {
                response = _.filter(response, function(obj) {
                    if (moment(obj.completedOn).year() === 1900 && obj.checklistStatus !== 'D') {                        
                        return obj;
                    }
                });
            }
            return response;
        },
        saveAll: function(options) {
            return $.when.apply($, _.map(this.models, function(m) {
                return m.hasChanged() ? m.save(null, options).then(_.identity) : m;
            }));
        },
        saveModels: function(selectedmodels, options) {
            return $.when.apply($, _.map(selectedmodels, function(m) {
                return m.hasChanged() ? m.save(null, options).then(_.identity) : m;
                //return m.save(null, options).then(_.identity);
            }));
        }
    });

    API = {
        GetChecklists: function(taskIds, isMovetask) {
            var checklists = new context.ChecklistsCollection(isMovetask);
            checklists.fetch({
                data: {
                    query: taskIds.toString()
                }
            });
            return checklists;
        }
    };

    Reqres.setHandler('Checklists:entities', function(tasks, isMovetask) {
        return API.GetChecklists(tasks, isMovetask);
    });
    Reqres.setHandler('Checklists:empty:entities', function() {
        var checklists = new context.ChecklistsCollection();
        return checklists;
    });
}

},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],7:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
    var API;

    context.CustomFieldModel = BaseModel.extend({
        idAttribute: 'id',
        initialize: function () {
        }
    });

    context.CustomFieldCollection = BaseCollection.extend({
        model: context.CustomFieldModel,

        url: function () {
            return window.routemap + 'api/customfields';
        },

        initialize: function () {
        },

        saveAll: function (options) {
            return $.when.apply($, _.map(this.models, function (m) {
                return m.hasChanged() ? m.save(null, options).then(_.identity) : m;
            }));
        }
    });

    API = {
        GetCustomFields: function (taskID) {
            var customfields = new context.CustomFieldCollection();
            customfields.fetch({ reset: true, data: { query: taskID } });
            return customfields;
        },
        GetEmptyCollection: function (data) {
            var _emptyCollection = new context.CustomFieldCollection();
            _emptyCollection.set(data);
            return _emptyCollection;
        }
    };

    Reqres.setHandler('Entities.CustomFields', function (taskID) {
        return API.GetCustomFields(taskID);
    });

    Reqres.setHandler('CustomFields:Empty:Collection', function (data) {
        return API.GetEmptyCollection(data);
    });
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],8:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
	var API;

	context.EngagementModel = BaseModel.extend({
		idAttribute: 'id',
		initialize: function () {
		},
		url: function () {
			return window.routemap + 'api/Engagements';
		}
	});

	context.EngagemenCollection = BaseCollection.extend({
		model: context.EngagementModel,
		url: function () {
			return window.routemap +  'api/Engagements';
		},
		initialize: function () {
			var multiSelect = new Backbone.Picky.MultiSelect(this);
			_.extend(this, multiSelect);
		}
	});

	API = {
		GetEngagement: function (taskIds) {
			var engagements = new context.EngagementModel();
			engagements.fetch({ reset: true, data: { query: taskIds.toString() } });
			return engagements;
		},

		GetEmptyCollection: function (data) {
		    var engagements = new context.EngagementModel();
		    engagements.set(data);
		    return engagements;
		}
	};

	Reqres.setHandler('Engagements:entities', function (tasks) {
		return API.GetEngagement(tasks);
	});
	Reqres.setHandler('Engagement:Empty:Collection', function (data) {
	    return API.GetEmptyCollection(data);
	});
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],9:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
	var API;

	context.ExtensionModel = BaseModel.extend({
	    idAttribute: 'id',
	    defaults: {
            selected: false           
        },
	    url: function () {
	        return window.routemap + 'api/extensions';
	    },
	    //defaults: {
	    //    'selected': false
	    //},
		initialize: function () {
			var selectable = new Backbone.Picky.Selectable(this);
			_.extend(this, selectable);
		}		
	});

	context.ExtensionCollection = BaseCollection.extend({
		model: context.ExtensionModel,
		url: function () {
			return  window.routemap + 'api/extensions';
		},
		initialize: function () {
			var multiSelect = new Backbone.Picky.MultiSelect(this);
			_.extend(this, multiSelect);

			this.listenTo(this, 'update', this.precheck);
		},

		precheck: function () {
            this.originalModels = this.models.slice();
            this.sortableCollection = new SortedCollection(this);
        },

        sortData: function(keyname) {
            if (this.sortableCollection._comparator === keyname) {
                return this.reset(this.sortableCollection.reverseSort().models);
            }

            return this.reset(this.sortableCollection.setSort(keyname).models);
        },

		saveAll: function (options) {
		    return $.when.apply($, _.map(this.models, function (m) {
		        return m.hasChanged() ? m.save(null, options).then(_.identity) : m;
		    }));
		}
	});

	API = {
		GetExtensions: function (taskIds) {
			var extensions = new context.ExtensionCollection();
			extensions.fetch({ reset: false, data: { query: taskIds.toString() } });
			return extensions;
		},

		GetExtensionDetails: function (taskId) {
		    return $.ajax({
		        url: window.routemap + 'api/extensions/details/' + taskId,
		        type: 'GET',
		        async: false,
		        contentType: 'application/json'
		    }).responseJSON;
		},

		GetEmptyExtensions: function (data) {
		    var extensions = new context.ExtensionCollection();
		    extensions.add(data);
		    return extensions;
		},
	};

	Reqres.setHandler('Entities.Extensions', function (tasks) {
		return API.GetExtensions(tasks);
	});

	Reqres.setHandler('Entities.Extensions.Details', function (taskId) {
	    return API.GetExtensionDetails(taskId);
	});

	Reqres.setHandler('Entities.Empty:Extensions', function (data) {
	    return API.GetEmptyExtensions(data);
	});
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],10:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
    var API;

    context.FirmContextModel = BaseModel.extend({
        idAttribute: 'results'
    });

    context.FirmContextCollection = BaseCollection.extend({
        model: context.FirmContextModel,
        url: function () {
            return window.routemap + 'api/FirmSettings';
        },

        initialize: function () {
        },
    });

    API = {
        GetStatusLists: function (category) {
            return $.ajax({
                url: window.routemap + 'api/FirmSettings/statusbycategory/' + category,
                type: 'GET',
                async: false,
                contentType: 'application/json'
            }).responseJSON;
        },
        GetTasksTypesLists: function (category) {
            return $.ajax({
                url: window.routemap + 'api/FirmSettings/tasktypebycategory/' + category,
                type: 'GET',
                async: false,
                contentType: 'application/json'
            }).responseJSON;
        },
        GetExtensionStatusLists: function () {
            return $.ajax({
                url: window.routemap + 'api/FirmSettings/moveextensionstatus/',
                type: 'GET',
                async: false,
                contentType: 'application/json'
            }).responseJSON;
        },
        GetExtensionWorkFlow: function (taskId) {
            return $.ajax({
                url: window.routemap + 'api/FirmSettings/extensionworkflow/' + taskId,
                type: 'GET',
                async: false,
                contentType: 'application/json'
            }).responseJSON;
        },        
        GetFirmSettings: function () {
            return $.ajax({
                url: window.routemap + 'api/FirmSettings',
                type: 'GET',
                async: false,
                contentType: 'application/json'
            }).responseJSON;
        },
        GetManageStatusInfo: function (categoryId, taskTypeId, statusId, isMapped) {
            var promises = []; var deferred = $.Deferred();
            $.ajax({
                url: window.routemap + 'api/FirmSettings/getmanagestatusinfo/' + categoryId + '/' + taskTypeId + '/' + statusId + '/' + isMapped,
                type: 'GET',
                async: false,
                contentType: 'application/json',
                success: function (data) {
                    return deferred.resolve(data);
                },
                error: function (data) {
                    return deferred.reject(data);
                }
            }).responseJSON;
            promises.push(deferred.promise());
            return promises;
        },
    };

    Reqres.setHandler('firmsettings:GetContext:entities', function () {
        //var firmContextCollection = new context.FirmContextCollection();     
        //firmContextCollection.fetch();
        //return firmContextCollection;
        return API.GetFirmSettings();
    });

    Reqres.setHandler('firmsettings:status:entities', function (category) {
        return API.GetStatusLists(category);
    });
    Reqres.setHandler('firmsettings:tasktypes:entities', function (category) {
        return API.GetTasksTypesLists(category);
    });
    Reqres.setHandler('firmsettings:moveextensionstatus:entities', function () {
        return API.GetExtensionStatusLists();
    });
    Reqres.setHandler('firmsettings:extensionworkflow:entities', function (taskId) {
        return API.GetExtensionWorkFlow(taskId);
    });
    Reqres.setHandler('firmsettings:GetManageStatusInfo:entities', function (categoryId, taskTypeId, statusId, isMapped) {
        return API.GetManageStatusInfo(categoryId, taskTypeId, statusId, isMapped);
    });
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],11:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function(context, application) {
    var API;

    context.PointsModel = BaseModel.extend({
        idAttribute: 'id',
        url: function() {
            return window.routemap + 'api/points/' + this.get('id');
        },
        defaults: {
            'selected': false
        },
        initialize: function() {
            var selectable = new Backbone.Picky.Selectable(this); // for checkout
            _.extend(this, selectable);
        }
    });

    context.PointsCollection = BaseCollection.extend({
        model: context.PointsModel,
        url: function() {
            return window.routemap + 'api/points';
        },
        parse: function(response) {
            if (this.options && !_.isObject(this.options)) {
                response = _.where(response, { status: "Open" });
            }

            return response;
        },
        initialize: function() {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);

            this.listenTo(this, 'update', this.precheck);
        },

        precheck: function(e) {
            this.originalModels = this.models.slice();
            this.sortableCollection = new SortedCollection(this);
        },

        sortData: function(keyname) {
            if (this.sortableCollection._comparator === keyname) {
                return this.reset(this.sortableCollection.reverseSort().models);
            }

            return this.reset(this.sortableCollection.setSort(keyname).models);
        },

        saveAll: function(options) {
            return $.when.apply($, _.map(this.models, function(m) {
                return m.hasChanged() ? m.save(null, options).then(_.identity) : m;
            }));
        }
    });

    API = {
        GetPoints: function(taskIds, isMovetask) {
            var points = new context.PointsCollection(isMovetask);
            points.fetch({
                data: {
                    query: taskIds.toString()
                }
            });
            return points;
        }
    };

    Reqres.setHandler('Points:entities', function(tasks, isMovetask) {
        return API.GetPoints(tasks, isMovetask);
    });
    Reqres.setHandler('Points:empty:entities', function (data) {
        var points = new context.PointsCollection(data);
        points.add(data);
        return points;
    });
}

},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],12:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
    var API;

    context.SignoffModel = BaseModel.extend({
        idAttribute: 'id',
        initialize: function () {
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        },
        url: function () {
            return window.routemap + 'api/signoffs';
        },
        saveTaskSignOffDetail: function (pagetype) {
            var deferred = $.Deferred();

            this.save(null, {
                success: function (model) {
                    return deferred.resolve(model);
                },
                error: function (model, response, options) {
                    return deferred.reject('Error');
                }
            });

            return deferred.promise();
        }
    });

    context.SignoffCollection = BaseCollection.extend({
        model: context.SignoffModel,
        // comparator: 'id',
        url: function () {
            return window.routemap + 'api/signoffs';
        },
        initialize: function () {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);
        },

        saveTaskSignOffDetails: function (options) {
            var promises = [];
            _.each(this.collection.models, function (signOffModel) {
                signOffModel.hasChanged() === true ? promises.push(signOffModel.saveTaskSignOffDetail(options.pageType)) : '';
            });
            return promises;
        },

        saveAll: function (options) {
            //return $.when.apply($, _.map(this.models, function (m) {
            //    return m.hasChanged() ? m.save(null, options).then(_.identity) : m;
            //}));
            var jsonValues = JSON.stringify(this.models);
            return $.ajax({
                url: window.routemap + 'api/signoffs',
                type: 'POST',
                data: jsonValues,
                contentType: "application/json"
            });
        }
    });

    context.SignoffMoveModel = BaseModel.extend({
        idAttribute: '_id',
        initialize: function () {
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        },
        url: function () {
            return window.routemap + 'api/signoffs';
        },
        saveTaskSignOffDetail: function (pagetype) {
            var deferred = $.Deferred();

            this.save(null, {
                success: function (model) {
                    return deferred.resolve(model);
                },
                error: function (model, response, options) {
                    return deferred.reject('Error');
                }
            });

            return deferred.promise();
        }
    });

    context.SignoffMoveCollection = BaseCollection.extend({
        model: context.SignoffMoveModel,
        url: function () {
            return window.routemap + 'api/signoffs';
        },
        initialize: function () {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);
        },

        saveTaskSignOffDetails: function (options) {
            var promises = [];
            _.each(this.collection.models, function (signOffModel) {
                signOffModel.hasChanged() === true ? promises.push(signOffModel.saveTaskSignOffDetail(options.pageType)) : '';
            });
            return promises;
        },

        saveAll: function (options) {
            return $.when.apply($, _.map(this.models, function (m) {
                //return m.hasChanged() ? m.save(null, options).then(_.identity) : m;
                if (m.hasChanged()) {                   
                    var signoffs = new context.SignoffMoveCollection();
                    signoffs.add(m);
                    var jsonValues = JSON.stringify(signoffs);
                    return $.ajax({
                        url: window.routemap + 'api/signoffs',
                        type: 'POST',
                        data: jsonValues,
                        contentType: "application/json"
                    });
                }                
            }));
            
        }
    });

    API = {
        GetSignoffs: function (taskIds, categoryID, taskTypeId) {
            var signoffs = new context.SignoffCollection();
            var deferred = $.Deferred();
            var queryParms = 'taskIds=' + taskIds.toString() + '?categoryID =' + categoryID + '?taskTypeId=' + taskTypeId;
            signoffs.fetch({ reset: true, data: { query: queryParms }, success: deferred.resolve });
            return deferred.promise();
        },

        GetSignoffsByCategory: function (taskIds, categoryID, taskTypeId) {
            var signoffs = new context.SignoffCollection();
            var deferred = $.Deferred();
            var queryParms = 'taskIds=' + taskIds.toString() + '?categoryID =' + categoryID + '?taskTypeId=' + taskTypeId;
            signoffs.fetch({ reset: true, data: { query: queryParms }, success: deferred.resolve });
            return deferred.promise();
        },

        GetOpenSignoffs: function (taskIds, categoryID) {
            var signoffs = new context.SignoffMoveCollection();
            var deferred = $.Deferred();
            var queryParms = 'tid=' + taskIds.toString() + '?cid=' + categoryID;
            signoffs.fetch({ url: window.routemap + 'api/signoffs/movetask', reset: true, data: { query: queryParms }, success: deferred.resolve });
            return deferred.promise();
        },

        GetEmptyCollection: function (data) {
            var signoffs = new context.SignoffCollection();
            signoffs.add(data);
            return signoffs;
        }

    };

    Reqres.setHandler('Signoff:entities', function (tasks, categoryID, taskTypeId) {
        return API.GetSignoffs(tasks, categoryID, taskTypeId);
    });
    Reqres.setHandler('Signoff:entities:Category', function (tasks, categoryID, taskTypeId) {
        return API.GetSignoffsByCategory(tasks, categoryID, taskTypeId);
    });
    Reqres.setHandler('Signoff:remaining:entities', function (tasks, categoryID) {
        return API.GetOpenSignoffs(tasks, categoryID);
    });
    Reqres.setHandler('Signoff:Empty:Collection', function (data) {
        return API.GetEmptyCollection(data);
    });
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],13:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
    var API;

    context.StaffBudgetsModel = BaseModel.extend({
        idAttribute: '_id',
        defaults: {
            currbudget: 0,
            remhrs: 0,
            id: null
        },
        initialize: function () {
        },
        url: function () {
            return window.routemap + 'api/staffbudgets';
        }
    });

    context.StaffBudgetsCollection = BaseCollection.extend({
        model: context.StaffBudgetsModel,
        url: function () {
            return window.routemap + 'api/staffbudgets';
        },

        initialize: function () {
        },

        saveAll: function (options) {
            return $.when.apply($, _.map(this.models, function (m) {
                return m.hasChanged() ? m.save(null, options).then(_.identity) : m;
            }));
        }
    });

    API = {
        GetStaffBudgets: function (task_id) {
            var staffbudgets = new context.StaffBudgetsCollection();
            staffbudgets.fetch({ reset: true, data: { query: task_id.toString() } });
            return staffbudgets;
        },

        //GetStaffBudget: function (task_id, staffId) {
        //    var staffbudget = new context.StaffBudgetsModel({ id: staffId });
        //    console.log(staffbudget,task_id, staffId)
        //    staffbudget.fetch({ reset: true, data: { query: task_id.toString() } });
        //    return staffbudget;
        //},

        GetStaffBudget: function (task_id, staffId) {
            var promises = []; var deferred = $.Deferred();
            $.ajax({
                url: window.routemap + 'api/staffbudgets/getstaffbudget/' + task_id + '/' + staffId,
                type: 'GET',
                async: false,
                contentType: 'application/json',
                success: function (data) {
                    return deferred.resolve(data);
                },
                error: function (data) {
                    return deferred.reject(data);
                }
            }).responseJSON;
            promises.push(deferred.promise());
            return promises;
        },
        UpdateStaffInformation: function (_collection) {
            //var staffbudgetCollection = new context.StaffBudgetsCollection();
            //_.each(_collection.models, function (model) {
            //    if (model.hasChanged()) {
            //        staffbudgetCollection.add(model);
            //    }
            //});
            var jsonValues = JSON.stringify(_collection);
            return $.ajax({
                url: window.routemap + 'api/staffbudgets',
                type: 'POST',
                data: jsonValues,
                contentType: "application/json"
            });
        },

        GetEmptyCollection: function (data) {
            var _emptyCollection = new context.StaffBudgetsCollection();
            _emptyCollection.set(data);
            return _emptyCollection;
        }
    };

    Reqres.setHandler('StaffBudgets:entities', function (task_id) {
        return API.GetStaffBudgets(task_id);
    });

    Reqres.setHandler('StaffBudgets:Staff:entities', function (task_id, staffId) {
        return API.GetStaffBudget(task_id, staffId);
    });
    Reqres.setHandler('UpdateStaffInformation:StaffBudget:Entities', function (_collection) {
        return API.UpdateStaffInformation(_collection);
    });

    Reqres.setHandler('StaffBudget:Empty:Collection', function (data) {
        return API.GetEmptyCollection(data);
    });
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],14:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
    var API;

    context.SubtaskModel = BaseModel.extend({
        idAttribute: 'id',
        defaults: {
            pageType: ''
        },
        //url: function () {
        //	return window.routemap + 'api/subtasks';
        //},
        initialize: function () {
            this.urlRoot = window.routemap + 'api/subtasks';
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        },
        saveSubTaskDetails: function (pagetype) {
            var deferred = $.Deferred();
            this.set('finmailTo', pagetype);

            this.save({ finmailTo: pagetype }, {
                success: function (model) {
                    return deferred.resolve(model);
                },
                error: function (model, response, options) {
                    return deferred.reject(response);
                },
            });

            return deferred.promise();
        },
        CreateSubtask: function () {
            var deferred = $.Deferred();
            this.save({}, {
                success: function (model) {
                    return deferred.resolve(model);
                },
                error: function (model, response, options) {
                    return deferred.reject(response);
                },
            });

            return deferred.promise();
        }
    });
    context.SubtaskCollection = BaseCollection.extend({
        model: context.SubtaskModel,
        url: function () {
            return window.routemap + 'api/subtasks';
        },
        initialize: function () {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);

            this.listenTo(this, 'update', this.precheck);
        },

        precheck: function () {
            this.originalModels = this.models.slice();
            this.sortableCollection = new SortedCollection(this);
        },

        sortData: function(keyname) {
            if (this.sortableCollection._comparator === keyname) {
                return this.reset(this.sortableCollection.reverseSort().models);
            }

            return this.reset(this.sortableCollection.setSort(keyname).models);
        },

        CreateSubtasks: function (options, taskid) {
            var promises = [];
            _.each(options, function (stateModel) {
                var subtaskModel;
                if (stateModel.get('jurisdictionID') !== 0) {
                    subtaskModel = new context.SubtaskModel({ taskId: parseInt(taskid), name: stateModel.get('stateName'), state_code: stateModel.get('jurisdictionID'), state_type: '' });
                } else {
                    subtaskModel = new context.SubtaskModel({ taskId: parseInt(taskid), name: stateModel.get('stateName'), state_code: stateModel.get('stateCode'), state_type: '' });
                }
                promises.push(subtaskModel.CreateSubtask());
            });
            return promises;
        },

    });

    context.StateModel = BaseModel.extend({
        initialize: function () {
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        }
    });
    context.StateCollection = BaseCollection.extend({
        model: context.StateModel,
        initialize: function () {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);
        },
        url: function () {
            return window.routemap + 'api/subtasks/statelists/' + this.options.tasktype_id + '/' + this.options.taskId;
        }
    });

    context.TSJModel = BaseModel.extend({
        idAttribute: 'id',
        defaults: {
            task_id: 0,
            client_name: '',
            period_end: '1900-01-01',
            task_type: '',
            task_typeid: 0,
            state_name: '',
            state_code: '',
            optionsDueDates: 'dynamic', //fixed or none or dynamic
            state_type: 'TSJ',
            FixedDueDate: '1900-01-01',
            FirstFixedExtension: '1900-01-01',
            SecondFixedExtension: '1900-01-01',
            ThirdFixedExtension: '1900-01-01',
            FourthFixedExtension: '1900-01-01',
            isDueDateEqualToPeriodEndDate: false, //true or false depends on value
            isSameMontPeriodenddate: false, //ony if we select day
            isBeforeOrAfter: 'APED', //APED or BPED
            OrignalDueDateOfMonth: '',
            OrignalDueDateOfDay: '',
            FirstExtensionDateOnMonth: '',
            FirstExtensionDateOnDay: '',
            SecondExtensionDateOfMonth: '',
            SecondExtensionDateOnDay: '',
            ThirdExtensionDateOfMonth: '',
            ThirdExtensionDateOnDay: '',
            FourthExtensionDateOfMonth: '',
            FourthExtensionDateOnDay: ''
        },
        initialize: function (options) {
            this.options = options;
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        },
        url: function (options) {
            return window.routemap + 'api/subtasks/addtsj';
        },
        CreateSubtaskTsj: function (tsjModel) {
            var deferred = $.Deferred();
            tsjModel.save({}, {
                success: function (model) {
                    return deferred.resolve(model);
                },
                error: function (model, response, options) {
                    return deferred.reject(response);
                },
            });

            return deferred.promise();
        }
    });
    context.TSJCollection = BaseCollection.extend({
        model: context.TSJModel,
        initialize: function (options) {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);
        },
        url: function () {
            return window.routemap + 'api/subtasks/addtsj';
        },

        createSubtaskTSJs: function () {
            var promises = [];
            this.each(function (tsjModel) {
                var _tsjModel = new context.TSJModel();
                promises.push(_tsjModel.CreateSubtaskTsj(tsjModel));
            });
            return promises;
        }
    });

    API = {
        GetSubtasks: function (taskIds) {
            var subtasks = new context.SubtaskCollection();
            subtasks.fetch({ reset: false, data: { query: taskIds.toString() } });
            return subtasks;
        },

        saveSubtasks: function (options) {
            //var promises = [];

            //_.each(options.subtasks.models, function (subTask) {
            //    subTask.hasChanged() === true ? promises.push(subTask.saveSubTaskDetails(options.pageType)) : '';
            //});
            //return promises;

            var subTaskCollection = new context.SubtaskCollection();
            _.each(options.subtasks.models, function (model) {
                if (model.hasChanged()) {                  
                    if (options.pageType === 'Shipping') {                     
                        var delivery_method = Reqres.request('Subtask:delivery_method:entities');
                        var defaultmethod = 2;
                        firmContext.Result.FirmSettingsContext[0].defaultshipping !== 0 ? defaultmethod = firmContext.Result.FirmSettingsContext[0].defaultshipping : '';
                        if (model.get('findelivery_methidid') === 0 || model.get('findelivery_methidid') === null) {
                            model.set('findelivery_methidid', defaultmethod);
                        }
                        if (model.get('delivery_methodId') === 0 || model.get('delivery_methodId') === 15 || model.get('delivery_methodId') === null) {
                            var result = _.where(delivery_method, {
                                'id': defaultmethod
                            });
                            model.set('delivery_methodId', defaultmethod);
                            result.length != 0 ? model.set('delivery_method', result[0].name) : model.set('delivery_method', '');
                        }
                    }                   
                    subTaskCollection.add(model);
                }
            });
            var jsonValues = JSON.stringify(subTaskCollection);
            return $.ajax({
                url: window.routemap + 'api/subtasks/UpdateSubTaskInformation/' + options.pageType,
                type: 'PUT',
                data: jsonValues,
                contentType: "application/json"
            });
        },

        GetStates: function (tasktype_id, taskId) {
            var states = new context.StateCollection({ tasktype_id: tasktype_id, taskId: taskId });
            states.fetch({ reset: true });
            return states;
        },

        GetTSJ: function (taskid, subtask_id, flag) {
            var tsj = new context.TSJModel({ taskid: taskid, subtask_id: subtask_id, flag: flag });
            tsj.fetch();
            return tsj;
        },
        GetEmtyTSJModel: function () {
            var tsj = new context.TSJModel();
            //tsj.fetch({ reset: true });
            return tsj;
        },
        GetAllTSJ: function () {
            var tsj = new context.TSJCollection();
            return tsj;
        },

        task_movetoCompleted: function (taskids, pageType) {
            var promises = []; var deferred = $.Deferred();
            var taskIdsObject = {
                taskIds: _.isArray(taskids) ? taskids.join(',') : taskids,
            };
            $.ajax({
                url: window.routemap + 'api/subtasks/movetocompleted/' + pageType,
                type: 'POST',
                data: JSON.stringify(taskIdsObject),
                contentType: "application/json",
                success: function (data) {
                    return deferred.resolve(data);
                },
                error: function (data) {
                    return deferred.reject(data);
                }
            });
            promises.push(deferred.promise());
            return promises;
        },

        task_movetoCompletedValidated: function (taskids, deleting, pageType) {
            var promises = []; var deferred = $.Deferred();
            var taskIdsObject = {
                taskIds: _.isArray(taskids) ? taskids.join(',') : taskids,
            };
            $.ajax({
                url: window.routemap + 'api/subtasks/movetocompletedvalidated/' + pageType + '/' + deleting,
                type: 'POST',
                data: JSON.stringify(taskIdsObject),
                contentType: "application/json",
                success: function (data) {
                    return deferred.resolve(data);
                },
                error: function (data) {
                    return deferred.reject(data);
                }
            });
            promises.push(deferred.promise());
            return promises;
        },

        AssemblyCopyFromPrior: function (taskids) {
            var deferred = $.Deferred();
            var taskIdsObject = {
                taskIds: _.isArray(taskids) ? taskids.join(',') : taskids,
            };
            $.ajax({
                url: window.routemap + 'api/subtasks/copyfromprioryearsubtasks',
                type: 'POST',
                data: JSON.stringify(taskIdsObject),
                contentType: "application/json",
                success: function (data) {
                    return deferred.resolve(data);
                },
                error: function (data) {
                    return deferred.reject(data);
                }
            });
            return deferred.promise();
        },

        clearShippingDetails: function (subtaskids) {
            var promises = []; var deferred = $.Deferred();
            var subtaskIdsObject = {
                subtaskIds: _.isArray(subtaskids) ? subtaskids.join(',') : subtaskids,
            };
            $.ajax({
                url: window.routemap + 'api/subtasks/clearshippingdetails',
                type: 'POST',
                data: JSON.stringify(subtaskIdsObject),
                contentType: "application/json",
                success: function (data) {
                    return deferred.resolve(data);
                },
                error: function (data) {
                    return deferred.reject(data);
                }
            });
            promises.push(deferred.promise());
            return promises;
        },

        copyfrompriorShippingDetails: function (taskids) {
            var promises = []; var deferred = $.Deferred();
            var taskIdsObject = {
                taskIds: _.isArray(taskids) ? taskids.join(',') : taskids,
            };
            $.ajax({
                url: window.routemap + 'api/subtasks/copyfrompriorshipping',
                type: 'POST',
                data: JSON.stringify(taskIdsObject),
                contentType: "application/json",
                success: function (data) {
                    return deferred.resolve(data);
                },
                error: function (data) {
                    return deferred.reject(data);
                }
            });
            promises.push(deferred.promise());
            return promises;
        },

        completeeFileShippingDetails: function (taskids) {
            var promises = []; var deferred = $.Deferred();
            var taskIdsObject = {
                taskIds: _.isArray(taskids) ? taskids.join(',') : taskids,
            };
            $.ajax({
                url: window.routemap + 'api/subtasks/completeefileshipping',
                type: 'POST',
                data: JSON.stringify(taskIdsObject),
                contentType: "application/json",
                success: function (data) {
                    return deferred.resolve(data);
                },
                error: function (data) {
                    return deferred.reject(data);
                }
            });
            promises.push(deferred.promise());
            return promises;
        },

        GetControlsheetSubtasks: function (data) {
            var subtasks = new context.SubtaskCollection();
            subtasks.add(data);
            return subtasks;
        },
    };

    Reqres.setHandler('Subtask:entities', function (tasks) {
        return API.GetSubtasks(tasks);
    });
    Reqres.setHandler('Subtask:States:entities', function (tasktypeID, taskId) {
        return API.GetStates(tasktypeID, taskId);
    });
    Reqres.setHandler('TaskSpecificAll:Jurisdiction:entities', function () {
        return API.GetAllTSJ();
    });
    Reqres.setHandler('TSJEmpty:Jurisdiction:entities', function () {
        return API.GetEmtyTSJModel({ flag: false });
    });

    Reqres.setHandler('Subtask:Save:entities', function (subtasks) {
        return API.saveSubtasks(subtasks);
    });

    Reqres.setHandler('Subtask:task_movetoCompletedValidated:entities', function (taskids, deleteing, pageType) {
        return API.task_movetoCompletedValidated(taskids, deleteing, pageType);
    });

    Reqres.setHandler('Subtask:MovetoCompleted:entities', function (taskids, pageType) {
        return API.task_movetoCompleted(taskids, pageType);
    });

    Reqres.setHandler('Subtask:shipping:clearHistory', function (subtaskids) {
        return API.clearShippingDetails(subtaskids);
    });

    Reqres.setHandler('Subtask:shipping:copyfromprior', function (taskids) {
        return API.copyfrompriorShippingDetails(taskids);
    });

    Reqres.setHandler('Subtask:completeeFile:entities', function (taskids) {
        return API.completeeFileShippingDetails(taskids);
    });

    Reqres.setHandler('Subtask:Assembly:CopyFromPrior', function (taskids, pageType) {
        return API.AssemblyCopyFromPrior(taskids);
    });

    Reqres.setHandler('Subtask:Controlsheet:entities', function (data) {
        return API.GetControlsheetSubtasks(data);
    });

    Reqres.setHandler('Subtask:type_ofCopies:entities', function () {
        var data = [
             { name: '', id: 0 },
            { name: 'CD', id: 3 },
             { name: 'Draft', id: 5 },
            { name: 'Final', id: 6 },
            { name: 'Other', id: 4 },
             { name: 'Paper', id: 1 },
             { name: 'Portal', id: 2 },
             { name: 'PDF', id: 7 },
             { name: 'Client to File', id: 8 },
              { name: 'USB', id: 9 }
        ];
        return data;
    });
    Reqres.setHandler('Subtask:delivery_method:entities', function () {
        var data = [
            { name: 'Airborne', id: 2 },
             { name: 'Call Client', id: 23 },
            { name: 'Client Pick Up', id: 5 },
            { name: 'Client Portal', id: 14 },
             { name: 'Courier', id: 7 },
             { name: 'Eastern Connection', id: 9 },
             { name: 'Email', id: 18 },
             { name: 'Express Mail', id: 22 },
              { name: 'FAX', id: 10 },
             { name: 'Federal Express', id: 3 },
             { name: 'Hand Delivered', id: 6 },
              { name: 'In House', id: 20 },
            { name: 'None', id: 19 },
            { name: 'Other', id: 8 },
             { name: 'Postal Service', id: 24 },
             { name: 'UPS', id: 4 },
             { name: 'UPS Next Day', id: 21 },
             { name: 'US Postal Service', id: 1 }
        ];
        return data;
    });
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],15:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
    var API;

    context.TaskAttachmentsModel = BaseModel.extend({
        idAttribute: 'id',
        defaults: {
            attachmentDesc: '',
            attachmentID: 0,
            attachmentType: '',
            clientName: '',
            taskId: 0,
            TaskIds: '',
            SubtaskIDs: '',
            IsDeleted: false,
            IsSubDeleted: false
        },
        initialize: function () {
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        },
        url: function () {
            return window.routemap + 'api/TaskAttachment';
        }
    });
    context.TaskAttachmentsCollection = BaseCollection.extend({
        model: context.TaskAttachmentsModel,
        url: function () {
            return window.routemap + 'api/TaskAttachment';
        },
        initialize: function () {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);
        },

        saveAll: function (options) {
            return $.when.apply($, _.map(this.models, function (m) {
                return m.save(null, options).then(_.identity);
            }));
        }
    });

    context.TaskInstructionModel = BaseModel.extend({
        idAttribute: 'id',
        defaults: {
            assemblyInstructionField: '',
            shippingInstructionField: '',
            specialInstructionsField: '',
            mailToField: '',
            extensionInstructionField: '',
            deliveryMethodinstructionField: '',
            taskIdField: 0,
            shippingFinanceCommentsField: '',
            shippingDeliveryText: ''
        },
        initialize: function (options) {
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        },
        url: function () {
            return window.routemap + 'api/taskattachment/taskinstructions/' + this.get('taskId');
        }
    });
    context.TaskInstructionCollection = BaseCollection.extend({
        model: context.TaskInstructionModel,
        url: function () {
            return window.routemap + 'api/TaskAttachment';
        },
        initialize: function () {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);
        },

        saveAll: function (options) {
            return $.when.apply($, _.map(this.models, function (m) {
                return m.save(null, options).then(_.identity);
            }));
        }
    });

    API = {
        GetAssemblyAttachmentModel: function () {
            var _assemblyAttachmentModel = new context.TaskAttachmentsModel();
            return _assemblyAttachmentModel;
        },
        GetAssemblyAttachmentCollection: function () {
            var _assemblyAttachmentCollection = new context.TaskAttachmentsCollection();
            return _assemblyAttachmentCollection;
        },
        UpdateTasksInstructions: function (taskids, pageType, taskInstrModel) {
            var deferred = $.Deferred();
            //return $.post(window.routemap + 'api/taskattachment/taskinstructions/' + taskids + '/' + pageType, taskInstrModel);
            //var jsonValues = JSON.stringify(taskInstrModel);
            //$.ajax({
            //    url: window.routemap + 'api/taskattachment/taskinstructions/' + taskids + '/' + pageType,
            //    type: 'POST',
            //    data: jsonValues,
            //    contentType: "application/json",
            //    success: function (data) {
            //        $('#loading').hide();
            //        deferred.resolve();
            //    },
            //    error: function (data) {
            //        $('#loading').hide();
            //        console.log(data.responseText);
            //        deferred.reject();
            //    }
            //});
            
            var taskAttachmentObject = {
                taskIds: _.isArray(taskids) ? taskids.join(',') : taskids,
                instructionsModel: taskInstrModel
            };

            $.ajax({
                url: window.routemap + 'api/taskattachment/taskinstructions/' + pageType,
                type: 'POST',
                data: JSON.stringify(taskAttachmentObject),
                contentType: "application/json",
                success: function (data) {
                    $('#loading').hide();
                    deferred.resolve();
                },
                error: function (data) {
                    $('#loading').hide();
                    deferred.reject();
                }
            });

            return deferred.promise();
        },

        GetTaskInstructions: function (taskId) {
            var _assemblyInstructionModel = new context.TaskInstructionModel({ taskId: taskId });
            _assemblyInstructionModel.fetch({ reset: true });
            return _assemblyInstructionModel;

        },

        GetTaskAttachments: function (taskId) {
            return $.ajax({
                url: window.routemap + 'api/taskattachment/taskAttachments/' + taskId,
                type: 'GET',
                async: false,
                contentType: 'application/json'
            }).responseJSON;
        },
        GetTaskSubtaskAttachments: function (taskId, subtaskid) {
            return $.ajax({
                url: window.routemap + 'api/taskattachment/taskAttachments/' + taskId + '/' + subtaskid,
                type: 'GET',
                async: false,
                contentType: 'application/json'
            }).responseJSON;
        },

        GetEmptyInstructionModel: function () {
            var _assemblyInstructionModel = new context.TaskInstructionModel();
            return _assemblyInstructionModel;
        }
    };

    Reqres.setHandler('Assembly:Entities:AttachmentModel', function () {
        return API.GetAssemblyAttachmentModel();
    });
    Reqres.setHandler('Assembly:Entities:AttachmentCollection', function () {
        return API.GetAssemblyAttachmentCollection();
    });

    Reqres.setHandler('tasks:instructions:Update:entities', function (taskids, pageType, taskInstrModel) {
        return API.UpdateTasksInstructions(taskids, pageType, taskInstrModel);
    });

    Reqres.setHandler('tasks:instructions:Get:entities', function (taskid) {
        return API.GetTaskInstructions(taskid);
    });

    Reqres.setHandler('tasks:Attachments:Get:entities', function (taskid) {
        return API.GetTaskAttachments(taskid);
    });

    Reqres.setHandler('Task:GetSubtaskAttachment:entities', function (taskid, subtaskid) {
        return API.GetTaskSubtaskAttachments(taskid, subtaskid);
    });

    Reqres.setHandler('Task:Instruction:EmptyModel:Enities', function (taskid, subtaskid) {
        return API.GetEmptyInstructionModel();
    });

    Reqres.setHandler('Task:Instruction:EmptyModel', function (data) {
        var _taskInstructionModel = new context.TaskInstructionModel();
        _taskInstructionModel.set(data)
        return _taskInstructionModel;
    });
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],16:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');
// var sort= require('../lib/plugins/sort');

module.exports = function (ctx, application) {
    var API;

    ctx.TaskModel = BaseModel.extend({
        idAttribute: 'id',
        urlRoot: function () {
            return window.routemap + 'api/task';
        },
        defaults: {
            dummyId: 'N',
            tasktypeId: 0,
            periodEndDate: '',
            clientId: 0,
            description: '',
            originatingLocationId: 0,
            currentLocationId: 0,
            anticipateddue_on: '1/1/1900',
            clientLetter_on: '1/1/1900',
            due_on: '1/1/1900',
            infoReceived_on: '1/1/1900',
            lastChanged_on: '1/1/1900',
            start_on: '1/1/1900'
        },
        validate: function (attrs, options) {
            if (attrs.clientId === '' || attrs.tasktypeId === '' || attrs.periodEndDate === '') {
                return 'Fields can not be blank';
            }
        },
        initialize: function () {
            //this.urlRoot = window.routemap + 'api/task';
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        },

        addNewTask: function () {
            var deferred = $.Deferred();
            this.save({}, {
                success: function (model) {
                    return deferred.resolve(model);
                },
                error: function (model, response, options) {
                    return deferred.reject(response);
                },
            });
            return deferred.promise();
        }

    });

    ctx.ControlSheetModel = BaseModel.extend({
        idAttribute: 'id',
        url: function () {
            window.routemap + 'api/tasks/' + this.options.controlTaskid;
        },
        initialize: function () {

        }
    });

    ctx.TaskSet = BaseCollection.extend({
        model: ctx.TaskModel,
        url: function () {
            //return window.routemap + 'api/task/' + this.options.bucketId;
            return window.routemap + 'api/task';
        },
        // comparator:'clientName',
        initialize: function () {
            //this.url = window.routemap +  'api/task/' + this.options.bucketId;
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);

            this.listenTo(this, 'update', this.precheck);
        },

        precheck: function () {
            this.selectNone();
            this.originalModels = this.models;
            this.sortable = new SortedCollection(this);
        },

        resettoOriginal: function () {
            this.reset(this.originalModels);
        },

        filterSelected: function () {
            var arr = this.partition(function (model) {
                return model.selected
            })
            // this.reset(this.filter(function (model) { return model.selected }));
            this.reset(_.union(arr[0], arr[1]));
        },

        filtergridData: function (filters) {
            this.models = this.originalModels;
            if (filters.length) {
                _.each(filters, function (filter, key) {
                    if (_.isArray(filter.filterCriteria) && filter.filterCriteria.length) {
                        this.models = _.filter(this.models, function (model, index) {
                            return _.indexOf(filter.filterCriteria, model.get(filter.keyName)) !== -1;
                        });
                    }
                }, this);
                this.reset(this.models);
            } else {
                this.resettoOriginal();
            }
        },

        // filtergridData: function(filters) {
        //     console.log(filters);
        //     if (filters.length) {
        //         var filter = _.flatten(_.pluck(filters, 'filterCriteria'));
        //         var data = _.filter(this.originalModels, function (model) {
        //            var values = _.values(model.toJSON());
        //             if(!_.isEmpty(_.intersection(filter, values))){
        //                 return model;
        //             }
        //         });
        //         this.reset(data);
        //     } else {
        //         this.resettoOriginal();
        //     }
        // },

        // filtergridData: function(filters) {
        //     if (filters.length) {
        //         var data;
        //         _.filter(filters, function(filter) {
        //             data = _.filter(this.models, function(model) {
        //                 return _.indexOf(filter.filterCriteria, model.get(filter.keyName)) >= 0;
        //             }, this);
        //         }, this);
        //         this.reset(data);
        //     } else {
        //         this.resettoOriginal();
        //     }
        // },

        singlesort: function (key, order) {
            //date types are to be addressed.

            this.models = _.sortBy(this.models, function (obj) {
                // var date = new Date(obj.get(key));
                // var a = new Date(obj.get(key));
                // if(a !== 'Invalid Date'){
                //     if(order === 'desc'){
                //         return obj.get(key);
                //     }
                //     return obj.get(key);
                // } else 
                // if(date instanceof Date && !isNaN(new Date(obj.get(key)).valueOf())){
                //     console.log('came in');
                //     if (order === 'desc') {
                //         return -(new Date(obj.get(key)));
                //     }
                //         return new Date(obj.get(key));
                // } else 
                if (_.isString(obj.get(key))) {
                    if (order === 'desc') {
                        return obj.get(key).toLowerCase().charCodeAt() * -1;
                    }
                    return obj.get(key).toLowerCase();
                } else if (_.isNumber(obj.get(key))) {
                    if (order === 'desc') {
                        return obj.get(key) * -1;
                    }
                    return obj.get(key);
                }
            });

            this.reset(this.models);
        },

        singlesortdata: function (by, order) {
            var data = this.sortable.setSort(by, order);
            this.reset(data.models);
        },

        multisort: function (sortcolumns, order) {
            this.models = _.sortBy(this.models, function (taskmodel) {
                return [sortcolumns.map(function (columnname) {
                    if (_.isString(taskmodel.get(columnname))) {
                        return taskmodel.get(columnname).toLowerCase();
                    } else {
                        return taskmodel.get(columnname);
                    }
                })];
            });

            this.reset(this.models);
        },

        filteronStatus: function (statusid) {
            if (statusid === "0") {
                this.models = this.originalModels;
            } else {
                this.models = _.filter(this.originalModels, function (model) {
                    return model.get('currentStatus') === statusid;
                });
            }

            this.reset(this.models);
        }
    });

    ctx.searchSet = ctx.TaskSet.extend({
        model: ctx.TaskModel,
        url: function () {
            return window.routemap + 'api/search/results'
        },
        initialize: function () {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);
            this.listenTo(this, 'update', this.precheck);

            Events.on('reset:searchdatawith:linkedtask', this.resetwithLinkedTaskData, this);
        },

        resetwithLinkedTaskData: function (data) {
            this.selectNone();
        }
    });

    ctx.columnSettingItem = BaseModel.extend({
        url: window.routemap + 'api/task/taskcolumn',
        defaults: {
            //selected: false,
            //sortOrder: 0
            filterCriteria: []
        }
    });

    ctx.columnSettingList = BaseCollection.extend({
        model: ctx.columnSettingItem,

        url: function () {
            return window.routemap + 'api/task/taskcolumn/' + this.options.pagetype;
        },

        initialize: function (options) {
            this.listenTo(this, 'update', this.precheck);
        },

        precheck: function () {
            this.originalModels = this.models;
        },

        resettoOrginal: function () {
            this.reset(this.originalModels);
        },

        ColumnAttributes: function (attr, celltype, readonly, align, renderer) {
            var columnSettings;
            var tollTipColumns = ['Full_assigned_name', 'Full_ext_assigned_to_name', 'description', 'taskTypeName', 'RoleName_1', 'RoleName_2', 'RoleName_3', 'RoleName_4', 'RoleName_5', 'RoleName_6', 'RoleName_7', 'RoleName_8', 'RoleName_9', 'RoleName_10', 'RoleName_11', 'RoleName_12', 'RoleName_13', 'RoleName_14', 'RoleName_15', 'RoleName_16', 'RoleName_17', 'RoleName_18', 'RoleName_19', 'RoleName_20', 'RoleName_21', 'RoleName_22', 'RoleName_23', 'RoleName_24', 'RoleName_25', 'RoleName_26', 'RoleName_27', 'RoleName_28', 'RoleName_29', 'RoleName_30', 'RoleName_31', 'RoleName_32', 'RoleName_33', 'RoleName_34', 'RoleName_35', 'RoleName_36', 'RoleName_37', 'RoleName_38', 'RoleName_39', 'RoleName_40', 'RoleName_41', 'RoleName_42', 'RoleName_43', 'RoleName_44', 'RoleName_45', 'RoleName_46', 'RoleName_47', 'RoleName_48', 'RoleName_49', 'RoleName_50'];

            function colString(item, value) {
                if (_.isUndefined(value)) {                 
                    if (_.contains(tollTipColumns, attr)) {
                       
                        //console.log(/\b\w{8}[_]\d{1,2}\b/ig.test(attr));
                        if (attr === "Full_assigned_name") {
                            return '<div title="' + item.get(attr) + '">' + item.get("assignedTo") + '</div>';
                        } else if (attr === "Full_ext_assigned_to_name") {
                            return '<div title="' + item.get(attr) + '">' + item.get("whohasExtension") + '</div>';
                        } else if (attr === "description") {
                            return '<div title="' + item.get(attr) + '">' + item.get("description") + '</div>';
                        }
                        else if (attr === "taskTypeName") {
                            return '<div title="' + item.get(attr) + '">' + item.get("taskType") + '</div>';
                        } else {
                            var acronym = item.get(attr).split(' ').map(function (txt) { return txt.charAt(0).toUpperCase(); }).join('');
                            return '<div title="' + item.get(attr) + '">' + acronym + '</div>';
                        }
                        return '<div title="' + item.get(attr) + '">' + item.get(attr) + '</div>';
                    } else {
                        return item.get(attr);
                    }
                }
            };

            function colDate(item, value) {
                if (_.isUndefined(value)) {
                    var year = moment(item.get(attr)).year();
                    if (attr === 'updated_on') {
                        return (year != 1900 && year != 1901 && year != 1 ? moment(item.get(attr)).format('MM/DD/YY hh:mm:ss') : '');
                    } else {
                        return (year != 1900 && year != 1901 && year != 1 ? moment(item.get(attr)).format('MM/DD/YY') : '');
                    }
                }
            };

            function colBool(item, value) {
                if (_.isUndefined(value)) return _.isUndefined(item.selected) ? false : item.selected;
                return (value ? item.select() : item.deselect());
            }

            function colLink(item, value) {
                if (_.isUndefined(value)) {
                    var link = window.routemap+'routing/?tid=' + window.btoa(item.get('id'));
                    return '<a title="' + item.get(attr) + '"  class="controlsheetlink"  href="'+link+'">' + item.get(attr) + '</a>';
                } else {
                    return;
                }
            }

            function coleLink(item, value) {
                if (_.isUndefined(value)) {
                    if (attr === 'details') {
                        return '<a href="javascript:void(0)">D</a>';
                    } else {
                        return '<a href="javascript:void(0)">' + item.get(attr) + '</a>';
                    }
                } else {
                    return;
                }
            }

            switch (celltype) {
                case 'html':
                    columnSettings = {
                        data: colLink,
                        type: 'text',
                        readOnly: readonly,
                        disableVisualSelection: true,
                        className: 'htLeft',
                        renderer: 'html'
                    }
                    break;
                case 'checkbox':
                    columnSettings = {
                        data: colBool,
                        type: 'checkbox',
                        readonly: readonly,
                        // disableVisualSelection: true,
                        // className: 'htCenter',
                        className: 'htLeft',
                        colWidths: 20
                    }
                    break;
                case 'numeric':
                    columnSettings = {
                        data: colString,
                        disableVisualSelection: true,
                        readOnly: readonly,
                        className: 'htLeft'
                        // className: 'htCenter'
                    }
                    break;
                case 'date':
                    columnSettings = {
                        data: colDate,
                        type: 'text',
                        disableVisualSelection: true,
                        readOnly: readonly,
                        className: 'htLeft'
                        // className: 'htRight'
                    }
                    break;
                case 'ehtml':
                    columnSettings = {
                        data: coleLink,
                        type: 'text',
                        readOnly: readonly,
                        disableVisualSelection: true,
                        className: 'htLeft ' + attr,
                        // className: 'htCenter ' + attr,
                        renderer: 'html'
                    }
                    break;
                default:
                    columnSettings = {
                        data: colString,
                        type: 'text',
                        // className: align,
                        className: 'htLeft',
                        disableVisualSelection: true,
                        readOnly: readonly,
                        renderer: 'html'
                    };
                    break;
            }

            return columnSettings;
        },

        getColumnList: function () {
            var cols = this.getColumnHeaders('keyName'),
                res = [];

            _.each(cols, function (val, index) {
                if (val === '') {
                    res.push(this.ColumnAttributes('selected', 'checkbox', false));
                } else if (val === 'clientName') {
                    res.push(this.ColumnAttributes(val, 'html', true, 'htLeft', 'html'))
                } else if (val === 'clientAccountNumber' || val === 'description') {
                    res.push(this.ColumnAttributes(val, 'text', true, 'htLeft'));
                } else if (val === 'points' || val === 'checklists' || val === 'extensionTask' || val === 'details') {
                    res.push(this.ColumnAttributes(val, 'ehtml', true, 'htCenter'));
                } else if (val === 'categoryId') {
                    res.push(this.ColumnAttributes(val, 'text', true, 'htCenter'));
                } else if (val === "taskType" || val === 'currentStatus') {
                    res.push(this.ColumnAttributes(val, 'text', true));
                } else if (val === 'priority' || val === 'difficulty') {
                    res.push(this.ColumnAttributes(val, 'numeric', true))
                } else if (val === 'start_on' || val === 'periodEndDate' || val === 'due_on' || val === 'updated_on' || val === 'anticipation_date' || val === 'projectedStartDate') {
                    res.push(this.ColumnAttributes(val, 'date', true))
                } else if (val === 'assignedTo' || val === 'whohasExtension' || val === 'originatingLocation' || val === 'currentLocation' || val === 'start_on') {
                    res.push(this.ColumnAttributes(val, 'text', true, 'htLeft'));
                } else if (val === 'isPortal') {
                    res.push({
                        data: function (item, value) {
                            if (_.isUndefined(value)) {
                                if (!item.get(val)) {
                                    return "";
                                } else {
                                    return '<a href="javascript:void(0)">PR</a>';
                                }
                            } else {
                                return "";
                            }
                        },
                        className: 'htCenter isPortal',
                        disableVisualSelection: true,
                        readOnly: true,
                        type: 'text',
                        renderer: 'html'
                    });
                } else {
                    res.push(this.ColumnAttributes(val, 'text', true, 'htLeft'));
                }
            }, this);

            return res;

        },

        getColumnHeaders: function (key) {
            // var list = this.pluck('displayName');
            this.resettoOrginal();
            var visiblecols = _.where(this.toJSON(), {
                isVisible: true
            }),
                list = _.pluck(visiblecols, key ? key : 'displayName');
            if (Backbone.history.fragment !== 'CATM') {
                list.splice(0, 0, "");
            }
            return list;
        },

        /* methods required for sorting functionality */

        getSortableList: function () {
            this.models = this.where({
                isSortable: true
            });

            // this.reset(this.models);
        },

        getSortResult: function () {
            var data = this.toJSON();
            data = _.sortBy(_.where(data, {
                'isSorted': true
            }), 'sortOrder');

            return _.pluck(data, 'keyName');
            //return _.pluck(data, 'keyName').join(',');
        },

        resetSortList: function () {
            this.each(function (model) {
                if (model.get('displayName') === 'Client') {
                    model.set({
                        isSorted: true,
                        sortOrder: 0
                    });
                } else {
                    model.set({
                        isSorted: false,
                        sortOrder: 0
                    });
                }
            });
        },

        clearFilters: function () {
            this.each(function (model) {
                model.set('filterCriteria', []);
            });
        },

        /* end of sort methods */

        /* columnDisplay method */
        getColumnDisplayList: function () {
            this.models = this.where({
                isFrozen: false
            });
            // this.reset(this.where({ isFrozen: false }));
        },
        /* end of columnDisplay methods */

        getFilterableFields: function () {
            this.reset(this.where({
                isFilterable: true
            }));
        }
    });

    ctx.savedSearchModel = BaseModel.extend({
        idAttribute: 'Filter_id',
        url: window.routemap + 'api/search/savedsearch',
        validate: function (attrs) {
            if (attrs.name === "") {
                return "Please provide a name to the search...";
            } else if (attrs.description === "") {
                return "Please provide a description to the search...";
            }
        },

        sync: function (method, model, options) {
            options || (options = {});
            options.url = (function () {
                switch (method.toLowerCase()) {
                    case 'read':
                        return window.routemap + 'api/search/savedsearch';
                        break;
                    case 'create':
                        return window.routemap + 'api/search/savedsearch';
                        break;
                    case 'update':
                        return window.routemap + 'api/search/savedsearch/' + model.id;
                        break;
                    case 'delete':
                        return window.routemap + 'api/search/savedsearch/' + model.id;
                        break;
                }
            })();

            return Backbone.sync.apply(this, arguments);
        }
    });

    ctx.savedSearchList = BaseCollection.extend({
        model: ctx.savedSearchModel,
        comparator: function () {
            return Math.ceil(this.get('Rating'));
        },
        url: window.routemap + 'api/search/savedsearch',
        initialize: function () {
            this.listenTo(this, 'update', this.sortData);
        },
        sortData: function () {
            this.reset(_.sortBy(this.toJSON(), 'rating'));
        }
    });

    ctx.linkedTasksList = ctx.TaskSet.extend({
        model: ctx.TaskModel,
        url: function () {
            return window.routemap + 'api/linkedtasks';
        },
        initialize: function () {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);

            this.listenTo(this, 'update', this.precheck);
        },
          
        sortData: function(keyname) {
            if (this.sortable._comparator === keyname) {
                return this.reset(this.sortable.reverseSort().models);
            }

            return this.reset(this.sortable.setSort(keyname).models);
        },
    });

    API = {
        GetTaskByBucket: function ( /*bucket*/ options) {
            var tasks = new ctx.TaskSet({
                bucketId: options.bucketId
            });

            tasks.fetch({
                data: {
                    query: JSON.stringify(options)
                }
            });
            return tasks;
        },

        GetTaskSummary: function (options) {
            return $.ajax({
                url: window.routemap + 'api/task/taskSummary',
                type: 'GET',
                data: {
                    query: JSON.stringify(options)
                },
            });
        },

        GetSearchData: function () {
            return new ctx.searchSet();
        },

        GetEmptyCollection: function () {
            return new ctx.TaskSet({
                bucketId: 1
            });
        },

        GetcolumnSettingList: function (pagetype) {
            var columnlist = new ctx.columnSettingList({
                pagetype: pagetype
            });
            return columnlist;
        },

        GetsavedSearchList: function () {
            var savedsearches = new ctx.savedSearchList();
            savedsearches.fetch();
            return savedsearches;
        },

        AddNewTask: function (task) {
            var promises = [];
            promises.push(task.addNewTask());

            return promises;
        },

        GetEmtyTaskModel: function () {
            var task = new ctx.TaskModel();
            return task;
        },

        GetPriorTaskList: function (taskId) {
            return $.ajax({
                url: window.routemap + 'api/task/prior/' + taskId,
                type: 'GET',
                async: false,
                contentType: 'application/json'
            }).responseJSON;
        },

        GetlinkedTasksList: function (taskId) {
            var linkedtasks = new ctx.linkedTasksList(taskId);
            linkedtasks.fetch({data: { query: taskId }});
            return linkedtasks;
        },

        AddupdatelinkedTasksList: function (taskids, parentid, type) {
            var promises = []; var deferred = $.Deferred();
            var jsonValues = JSON.stringify(taskids);
            $.ajax({
                url: window.routemap + 'api/linkedtasks/addlinked/' + parentid + '/' + type,
                type: 'POST',
                data: jsonValues,
                contentType: "application/json",
                success: function (data) {
                    return deferred.resolve(data);
                },
                error: function (data) {
                    return deferred.reject(data);
                }
            });
            promises.push(deferred.promise());
            return promises;
        },

        GetEmptylinkedTasksList: function (data) {
            var linkedtasks = new ctx.linkedTasksList();
            linkedtasks.add(data);
            return linkedtasks;
        }
        //GetSingleTaskById: function (taskId) {
        //  return new ctx.ControlSheetModel({ controlTaskid: 4457106 });
        //}
    };

    Reqres.setHandler('task:entities', function ( /*bucket*/ options) {
        //return API.GetTaskByBucket(bucket)
        return API.GetTaskByBucket(options)
    });

    Reqres.setHandler('task:entities:summary', function (options) {
        return API.GetTaskSummary(options)
    });

    Reqres.setHandler('task:empty:entities', function () {
        return API.GetEmptyCollection();
    });

    Reqres.setHandler('task:search:entities', function () {
        return API.GetSearchData();
    });

    Reqres.setHandler('columnsettings:entities', function (pagetype) {
        var data = API.GetcolumnSettingList(pagetype);
        //data.fetch();
        //data.add([{
        //    displayName: 'Client',
        //    keyName: 'clientName',
        //    colSort: 'desc',
        //    isFilterable: true,
        //    filterCriteria: [],
        //    isFrozen: true,
        //    isVisible: true,
        //    isSortable: true,
        //    isSorted: true
        //}, {
        //    displayName: 'Account',
        //    keyName: 'clientAccountNumber',
        //    colSort: 'desc',
        //    isFilterable: true,
        //    filterCriteria: [],
        //    isFrozen: true,
        //    isVisible: true,
        //    isSortable: true,
        //    isSorted: false
        //}, {
        //    displayName: 'Type',
        //    keyName: 'taskType',
        //    colSort: 'desc',
        //    isFilterable: true,
        //    filterCriteria: [],
        //    isFrozen: true,
        //    isVisible: true,
        //    isSortable: true,
        //    isSorted: false
        //}, {
        //    displayName: 'Period End',
        //    keyName: 'periodEndDate',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: true,
        //    isVisible: true,
        //    isSortable: true,
        //    isSorted: false
        //}, {
        //    displayName: 'Cat.',
        //    keyName: 'categoryId',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: true,
        //    isSorted: false
        //}, {
        //    displayName: 'Description',
        //    keyName: 'description',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: true,
        //    isSorted: false,
        //}, {
        //    displayName: 'Status',
        //    keyName: 'currentStatus',
        //    colSort: 'desc',
        //    isFilterable: true,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: true,
        //    isSorted: false,
        //}, {
        //    displayName: 'Start Date',
        //    keyName: 'start_on',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: true,
        //    isSorted: false
        //}, {
        //    displayName: 'Due Date',
        //    keyName: 'due_on',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: true,
        //    isSorted: false
        //}, {
        //    displayName: 'Last Chg',
        //    keyName: 'updated_on',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: true,
        //    isSorted: false
        //}, {
        //    displayName: 'ADD',
        //    keyName: 'anticipation_date',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: false,
        //    isSorted: false,
        //}, {
        //    displayName: 'Who Has',
        //    keyName: 'assignedTo',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: false,
        //    isSorted: false,
        //}, {
        //    displayName: 'Ext',
        //    keyName: 'extensionTask',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: false,
        //    isSorted: false,
        //}, {
        //    displayName: 'Who Has Ext',
        //    keyName: 'whohasExtension',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: false,
        //    isSorted: false,
        //}, {
        //    displayName: 'Ori',
        //    keyName: 'originatingLocation',
        //    colSort: 'desc',
        //    isFilterable: true,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: false,
        //    isSorted: false,
        //}, {
        //    displayName: 'Curr',
        //    keyName: 'currentLocation',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: false,
        //    isSorted: false,
        //}, {
        //    displayName: 'Pts',
        //    keyName: 'points',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: false,
        //    isSorted: false,
        //}, {
        //    displayName: 'Ckl',
        //    keyName: 'checklists',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: false,
        //    isSorted: false,
        //}, {
        //    displayName: 'DTL',
        //    keyName: 'details',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: false,
        //    isSorted: false,
        //}, {
        //    displayName: 'P',
        //    keyName: 'priority',
        //    colSort: 'desc',
        //    isFilterable: false,
        //    filterCriteria: [],
        //    isFrozen: false,
        //    isVisible: true,
        //    isSortable: false,
        //    isSorted: false,
        //}]);
        //console.log('data...', data);
        return data;
    });

    Reqres.setHandler('search:savedsearch:entities', function () {
        return API.GetsavedSearchList();
    });

    Reqres.setHandler('task:add:entities', function (task) {
        return API.AddNewTask(task);
    });

    Reqres.setHandler('taskmodel:empty:entities', function () {
        return API.GetEmtyTaskModel();
    });

    Reqres.setHandler('task:prioryears', function (tasks) {
        return API.GetPriorTaskList(tasks);
    });

    //Reqres.setHandler('task:entity', function (taskId) {
    //  return API.GetSingleTaskById(taskId)
    //});

    Reqres.setHandler('task:linkedtasks:entities', function (taskId) {
        return API.GetlinkedTasksList(taskId);
    });

    Reqres.setHandler('save:linkedtasks:search', function (taskids, parentId, type) {
        return API.AddupdatelinkedTasksList(taskids, parentId, type);
    });

    Reqres.setHandler('linkedtasks:empty:entities', function (data) {
        return API.GetEmptylinkedTasksList(data);
    });
};

},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],17:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
    var API;
    context.TaskSpecificJurisdictionModel = BaseModel.extend({
        idAttribute: 'id',
        defaults: {
            task_id: 0,
            client_name: '',
            period_end: '1900-01-01',
            task_type: '',
            task_typeid: 0,
            state_name: '',
            state_code: '',
            optionsDueDates: 'dynamic', //fixed or none or dynamic
            state_type: 'TSJ',
            FixedDueDate: '1900-01-01',
            FirstFixedExtension: '1900-01-01',
            SecondFixedExtension: '1900-01-01',
            ThirdFixedExtension: '1900-01-01',
            FourthFixedExtension: '1900-01-01',
            isDueDateEqualToPeriodEndDate: false, //true or false depends on value
            isBeforeOrAfter: 'APED', //APED or BPED
            isSameMontPeriodenddate: false,
            OrignalDueDateOfMonth: '',
            OrignalDueDateOfDay: '',
            FirstExtensionDateOnMonth: '',
            FirstExtensionDateOnDay: '',
            SecondExtensionDateOfMonth: '',
            SecondExtensionDateOnDay: '',
            ThirdExtensionDateOfMonth: '',
            ThirdExtensionDateOnDay: '',
            FourthExtensionDateOfMonth: '',
            FourthExtensionDateOnDay: '',
            task_ids: '',
            dummyStateName: '',
            dummyStateCode:''
        },
        initialize: function (options) {
            this.options = options;
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        },
        url: function (options) {
            return window.routemap + 'api/subtasks/gettsj/' + this.options.task_id + '/' + this.options.subTaskID;
        }
    });
    context.TaskSpecificJurisdictionCollection = BaseCollection.extend({
        model: context.TaskSpecificJurisdictionModel,
        initialize: function (options) {
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);
        },
        url: function () {
            return window.routemap + 'api/subtasks/addtsj';
        }
    });

    API = {
        GetTSJ: function (taskid, subtask_id) {
            var tsj = new context.TaskSpecificJurisdictionModel({ task_id: taskid, subTaskID: subtask_id });
            var deferred = $.Deferred();
            tsj.fetch({ reset: true, success: deferred.resolve });
            return deferred.promise();
        },
        UpdateTSJ: function (modelTSJ) {
            var jsonValues = JSON.stringify(modelTSJ);
            return $.ajax({
                url: window.routemap + 'api/subtasks/UpdateTSJ',
                type: 'POST',
                data: jsonValues,
                contentType: "application/json"
            });
        },
    };

    Reqres.setHandler('GetTSJ:TaskSpecificJurisdiction:Entities', function (taskid, subtask_id, flag) {
        return API.GetTSJ(taskid, subtask_id);
    });
    Reqres.setHandler('UpdateTSJ:TaskSpecificJurisdiction:Entities', function (modelTSJ) {
        return API.UpdateTSJ(modelTSJ);
    });
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],18:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
	var API;

	context.UserModel = BaseModel.extend({
		idAttribute: 'id',
		initialize: function () {
			var selectable = new Backbone.Picky.Selectable(this);
			_.extend(this, selectable);
		}
	});

	context.WorkflowstateCollection = BaseCollection.extend({
		model: context.UserModel,
		url: function () {
			return window.routemap + 'api/user/';
		},
		initialize: function () {
			var multiSelect = new Backbone.Picky.MultiSelect(this);
			_.extend(this, multiSelect);
		}
	});
	
	API = {
		GetAllUsers: function (options) {
			return $.ajax({
				url: window.routemap + 'api/user/userautosuggest',
				type: 'GET',
				async: false,
				contentType: 'application/json'
			 }).responseJSON;
		}
	};

	Reqres.setHandler('User:entities:AutoSuggest', function () {
		return API.GetAllUsers()
	});
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],19:[function(require,module,exports){
var BaseModel = require('../lib/entities/model'),
    BaseCollection = require('../lib/entities/collection'),
    Reqres = require('../lib/config/reqres');

module.exports = function (context, application) {
    var API;

    context.WorkflowStateModel = BaseModel.extend({
        idAttribute: 'id',
        initialize: function () {
            var selectable = new Backbone.Picky.Selectable(this);
            _.extend(this, selectable);
        },
        defaults: {
            allowMove: false,
            blankUser: false,
            isrepeat: false,
            lockstatus: false,
            ismapped: false,
            isbulkedited: false,
            isbulkuser: false
        },
        SaveMoveTaskDetail: function () {
            var deferred = $.Deferred();
            this.save({}, {
                success: function (model, response, options) { // 200
                    return deferred.resolve(model)
                },
                error: function (model, response, options) { // 400, 500
                    return deferred.reject(response);
                }
            });

            return deferred.promise();
        },

    });

    context.WorkflowStateSet = BaseCollection.extend({
        model: context.WorkflowStateModel,
        url: function () {
            return window.routemap + 'api/workflowstate/';
        },
        initialize: function () {
            //this.url = window.routemap +  'api/workflowstate/';
            var multiSelect = new Backbone.Picky.MultiSelect(this);
            _.extend(this, multiSelect);

            this.listenTo(this, 'update', this.precheck);
        },
        precheck: function () {
            this.originalModels = this.models.slice();
            this.sortableCollection = new SortedCollection(this);
        },

        sortData: function(keyname) {
            if (this.sortableCollection._comparator === keyname) {
                return this.reset(this.sortableCollection.reverseSort().models);
            }

            return this.reset(this.sortableCollection.setSort(keyname).models);
        },
    });

    API = {
        GetWorkflowStatesByTasks: function (taskIds) {
            var workflowStates = new context.WorkflowStateSet();
            workflowStates.fetch({ reset: false, data: { query: taskIds.toString() } });
            return workflowStates;
        },

        //MoveWorkflowStatesByTasks: function (collection) {
        //    var promises = [];
        //    var selectedModels = collection.where({ selected: true });
        //    _.each(collection.models, function (workflowstate) {              
        //        workflowstate.get('tostatusId') != 0 && (workflowstate.get('assignedtoId') != 0 || workflowstate.get('allowMove') === true) ? promises.push(workflowstate.SaveMoveTaskDetail()) : '';
        //    });
        //    return promises;
        //},

        MoveWorkflowStatesByTasks: function (collection) {
            var promises = []; var deferred = $.Deferred();
            var workflowCollection = new context.WorkflowStateSet();
            var selectedModels = collection.where({ selected: true });
            _.each(collection.selected, function (workflowstate) {
                if (workflowstate.get('tostatusId') != 0 && (workflowstate.get('assignedtoId') != 0 || workflowstate.get('allowMove') === true)) {
                    workflowCollection.add(workflowstate);
                }
            });
            var jsonValues = JSON.stringify(workflowCollection);
            $.ajax({
                url: window.routemap + 'api/workflowstate/movetasks',
                type: 'POST',
                data: jsonValues,
                contentType: "application/json",
                success: function (data) {
                    return deferred.resolve(data);
                },
                error: function (data) {
                    return deferred.reject(data);
                }
            });
            promises.push(deferred.promise());
            return promises;
        },

    };

    Reqres.setHandler('workflowstate:entities', function (tasks) {
        return API.GetWorkflowStatesByTasks(tasks);
    });

    Reqres.setHandler('workflowstate:moveTask:entities', function (tasks) {
        return API.MoveWorkflowStatesByTasks(tasks);
    });
}
},{"../lib/config/reqres":69,"../lib/entities/collection":72,"../lib/entities/model":73}],20:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header">Edit &nbsp;'+
((__t=( name ))==null?'':__t)+
'<div class="ui divided horizontal list" style="float:right"><a class="item" data-content="coming soon">Tips</a> <a class="item" data-content="coming soon">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content"><div class="ui form"><div class="ui padded grid"><div class="sixteen wide column pointseditor"><textarea id="ipmarkdowneditor" hidden></textarea></div></div></div></div><div class="actions"><div class="ui blue big label" id="savepoint">Apply</div></div>';
}
return __p;
};

},{"underscore":2}],21:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header">Edit Response<div class="ui divided horizontal list" style="float:right"><a class="item" data-content="coming soon">Tips</a> <a class="item" data-content="coming soon">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content" style="padding-top:0"><div class="ui form"><div class="ui padded grid"><div class="sixteen wide column" style="padding-bottom:0px"><h3 style="text-decoration:underline">Points</h3></div><div id="pointsarea" class="sixteen wide column">'+
((__t=( showPoints ))==null?'':__t)+
'</div><div class="sixteen wide column" style="padding-top:0px;padding-bottom:0px"><h3 style="text-decoration:underline">Response</h3></div><div class="sixteen wide column pointseditor"><textarea id="ipmarkdowneditor" hidden></textarea></div></div></div></div><div class="actions"><div class="ui blue big label" id="saveandclose">Apply & Close</div><div class="ui blue big label" id="saveandopen">Apply & Open</div></div>';
}
return __p;
};

},{"underscore":2}],22:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="sixteen wide column" style="padding:0;box-shadow: 5px 2px 10px darkgrey"><div class="ui floating message grid" style="padding:0;background:white"><div class="ten wide column"><h4 id="clientinfo" class="ui header" style="margin:0;font-family:museo-300" style="width: 100%;white-space: nowrap;overflow: hidden;text-overflow: ellipsis"></h4></div><div class="right aligned six wide column"><label id="clientcontact" class="item"></label></div></div></div><div class="sixteen wide column" style="bottom: auto!important"><div class="ui top attached tabular menu" id="tabs"><a id="points" class="active item" data-tab="first">Points</a> <a id="checklist" class="item" data-tab="second">Checklist</a></div><div class="ui bottom attached active tab segment" data-tab="first" id="tabpoints"><div class="ui grid"></div></div><div class="ui bottom attached tab segment" data-tab="second" id="tabChecklists"></div></div>';
}
return __p;
};

},{"underscore":2}],23:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color:rgb(240,240,240);padding: 10px"><label style="font-family: museo-300">Attachments for&nbsp;'+
((__t=( name ))==null?'':__t)+
'</label><div class="ui divided horizontal list" style="float:right;font-family: museo-300"><a class="item" data-content="coming soon">Tips</a> <a class="item" data-content="coming soon">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content" style="padding:3px"><div class="sixteen wide column" style="padding:10px" id="showsubtaskAttachment"><ul id="selectedlistAssemblyAttachment" style="list-style-type:none; margin:0;padding:0"></ul></div></div><div class="actions"><button class="ui primary button">Close</button></div>';
}
return __p;
};

},{"underscore":2}],24:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color:rgb(240,240,240);padding: 10px"><label style="font-family: museo-300">SignOff - Category</label><div class="ui divided horizontal list" style="float:right;font-family: museo-300"><a class="item" data-content="coming soon">Tips</a> <a class="item" data-content="coming soon">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content" style="padding:3px"><div class="ui two column left aligned grid form"><div class="three wide column">SignOff</div><div class="thirteen wide column" style="padding:10px"><div class="ui search"><input type="text" class="prompt" style="height:35px;width:300px" placeholder="Search SignOff Name..."><div class="results" style="height:300px;width:300px; overflow-y: scroll"></div></div></div><div class="sixteen wide column" style="padding:10px"><div class="ui comments"><textarea id="textareaComments" placeholder="Enter SignOff Comments here..." style="height:250px"></textarea></div></div></div></div><div class="actions"><button class="ui button">Cancel</button> <button class="ui primary button" id="buttonSaveSignoffByCategory">Save</button></div>';
}
return __p;
};

},{"underscore":2}],25:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header">Add Checklists<div class="ui divided horizontal list" style="float:right"><a class="item" data-content="coming soon">Tips</a> <a class="item" onclick="window.open(window.routemap + \'/xcmhelp/videos/AddChecklist.html\', \'Video\', \'top=30,left=250,height=800,width=1500,status=yes,scrollbars=yes,resizable=yes\', \'_blank\')">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content"><form class="ui grid form"><div class="four wide column"><label>Associated Status</label></div><div class="four wide column"><div id="statuslist" class="ui search"><div class="ui icon input"><input class="prompt" type="text" placeholder="Search status..."> <i class="search icon"></i></div><div class="results" style="width: 100%; max-height: 200px; overflow-y: auto"></div></div></div><div class="four wide column"><label>Completion Due Date</label></div><div class="four wide column"><div class="column"><input id="datepicker" type="text"></div></div><div class="four wide column"><label for="reference">Assign To</label></div><div class="four wide column"><div class="ui radio checkbox"><input type="radio" name="optionAssignTo" value="A"><label for="radioAssignToAdmin">Admin &nbsp;&nbsp;</label></div><div class="ui radio checkbox"><input type="radio" checked="checked" name="optionAssignTo" value="P"><label for="radioAssignToPerson">Person</label></div></div><div class="eight wide column"><div id="userlist" class="ui search"><div class="ui icon input"><input class="prompt" type="text" placeholder="Search Users..."> <i class="search icon"></i></div><div class="results" style="width: 100%; max-height: 200px; overflow-y: auto"></div></div></div><div class="four wide column"><label>Add checklist</label></div><div class="twelve wide column pointseditor"><textarea id="ipmarkdowneditor" hidden></textarea></div></form></div><div class="actions"><div class="ui button">Cancel</div><div id="savechecklist" class="ui big blue label" style="cursor: pointer">Save</div><div id="saveclosechecklist" class="ui big blue label" style="cursor: pointer">Save & Close</div></div>';
}
return __p;
};

},{"underscore":2}],26:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color: rgb(68,89,120);padding: 7px;padding-bottom:0px" id="tsjEditGridContent"><div class="ui right aligned grid"><div class="left floated left aligned six wide column" style="padding:0px"><h3 style="color:white;font-family: museo-300">Add Jurisdiction</h3></div><div class="right floated right aligned six wide column" style="padding:0px"><div class="ui divided horizontal list"><a class="item" style="color:white;font-family: museo-500" data-content="coming soon">Tips</a> <a class="item" style="color:white;font-family: museo-500" data-content="coming soon">Video</a> <a class="item" style="color:white;font-family: museo-500" data-content="coming soon">Help</a> <a class="item"><i class="close icon" style="color:white"></i></a></div></div></div></div><div class="content" id="tsjEditGridContent" style="background-color: rgb(68,89,120);padding-top:0px"><div class="ui grid" style="margin:0px"><div class="eleven wide column" style="border-right:3px solid #fff;padding-top:0px"><div class="row"><div class="ui grid" style="margin:0px"><div class="two wide column"><label style="color:white"><strong>Search :</strong></label></div><div id="AutoSuggestJur" class="eight wide column"></div><div class="two wide column"><div id="buttonAddSuggest" class="ui tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:80px">ADD</div></div></div></div><br><div class="row" style="margin-top:-10px"><div class="ui top attached tabular menu" style="border:none;border-bottom:2px solid #fff" id="tabAddJurisdiction"><a id="generalJursCount" class="active item orange" data-tab="first" style="color:#c6c6c6;font-weight:bold">General</a> <a id="tabAddTSJ" class="item orange" data-tab="second" style="color:#c6c6c6;font-weight:bold">Task Specific Jurisdiction</a></div><div id="first-tab" class="ui bottom attached active tab segment" data-tab="first" style="background-color: rgb(68,89,120); color:white;border:none"></div><div id="injectTSJForm" class="ui bottom attached tab segment" data-tab="second" style="background-color: rgb(68,89,120); color:white;border:none"></div></div></div><div class="five wide column" style="padding-top:0px"><div id="selected"><p style="color:white;font-size: 1.2em;font-weight:bold">Selected</p><ul id="selectedlist" style="list-style-type:none; margin:0;padding:0"></ul><div id="buttonSaveJurisdictions" class="ui tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px; float:right; background-color:orange" data-content="Please Select Jurisdiction">SAVE</div></div></div></div></div>';
}
return __p;
};

},{"underscore":2}],27:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header">Add Issues and Points<div class="ui divided horizontal list" style="float:right"><a class="item" data-content="coming soon">Tips</a> <a class="item" onclick="window.open(window.routemap + \'/xcmhelp/videos/AddIssue.html\', \'Video\', \'top=30,left=250,height=800,width=1500,status=yes,scrollbars=yes,resizable=yes\', \'_blank\')">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content"><form class="ui form pointseditor"><div class="ui padded grid"><div class="eight wide column"><div class="grouped fields"><label for="fruit">Select Type:</label><div class="field"><div class="ui radio checkbox"><input id="KI" value="1" type="radio" name="pointtype" tabindex="0" class="hidden"><label>Knowledge</label></div></div><div class="field"><div class="ui radio checkbox"><input value="2" type="radio" name="pointtype" tabindex="0" class="hidden"><label>Instruction</label></div></div><div class="field"><div class="ui radio checkbox"><input id="questions" value="3" type="radio" name="pointtype" tabindex="0" class="hidden"><label>Questions</label></div></div><div class="field"><div class="ui radio checkbox"><input id="reviewpts" value="4" type="radio" name="pointtype" tabindex="0" class="hidden"><label>Review Points</label></div></div></div></div><div class="eight wide column"><div class="grouped fields"><label for="fruit" style="margin-right: 2em">Apply To:</label><div class="field"><div class="ui radio checkbox"><input value="C" type="radio" name="applyto" checked="checked" tabindex="0" class="hidden"><label>Current Period End (C)</label></div></div><div class="field"><div class="ui radio checkbox"><input value="N" type="radio" name="applyto" tabindex="0" class="hidden"><label>Next Period End (N)</label></div></div><div class="field"><div class="ui radio checkbox"><input value="CN" type="radio" name="applyto" tabindex="0" class="hidden"><label>Current & Next Period End (CN)</label></div></div><div class="field"><div class="ui radio checkbox"><input value="P" type="radio" name="applyto" tabindex="0" class="hidden"><label>Permanent (P)</label></div></div></div></div><div class="sixteen wide column"><div class="inline fields"><div class="field"><label for="amount" style="margin-right: 2em">Prior Year Amount</label><div class="field"><input type="text" placeholder="Amount" name="amount" maxlength="50"></div></div><div class="field"><label for="reference" style="margin-right: 2em">Reference</label><div class="field"><input type="text" placeholder="Reference" name="reference" maxlength="10"></div></div><div class="field"><div class="ui checkbox"><input type="checkbox" tabindex="0" class="hidden" name="extensions"><label>Extension</label></div></div></div></div><div class="sixteen wide column pointseditor"><textarea id="ipmarkdowneditor" name="texteditor" hidden></textarea></div><div class="ui error message"></div></div><div class="ui error message"></div></form></div><div class="actions"><div id="savepoints" class="ui big blue label" style="cursor: pointer">Save & Add New</div><div id="saveclosepoints" class="ui big blue label" style="cursor: pointer">Save & Close</div></div>';
}
return __p;
};

},{"underscore":2}],28:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header">Add Issues and Points<div class="ui divided horizontal list" style="float:right"><a class="item" data-content="coming soon">Tips</a> <a class="item" onclick="window.open(window.routemap + \'/xcmhelp/videos/AddIssue.html\', \'Video\', \'top=30,left=250,height=800,width=1500,status=yes,scrollbars=yes,resizable=yes\', \'_blank\')">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content"><form class="ui form pointseditor"><div class="ui padded grid"><div class="eight wide column"><div class="grouped fields"><label for="fruit">Select Type:</label><div class="field"><div class="ui radio checkbox"><input value="1" type="radio" name="pointtype" checked="checked" tabindex="0" class="hidden"><label>Knowledge</label></div></div><div class="field"><div class="ui radio checkbox"><input value="2" type="radio" name="pointtype" tabindex="0" class="hidden"><label>Instruction</label></div></div><div class="field"><div class="ui radio checkbox"><input value="3" type="radio" name="pointtype" tabindex="0" class="hidden"><label>Questions</label></div></div><div class="field"><div class="ui radio checkbox"><input value="4" type="radio" name="pointtype" tabindex="0" class="hidden"><label>Review Points</label></div></div></div></div><div class="eight wide column"><div class="grouped fields"><label for="fruit">Apply To:</label><div class="field"><div class="ui radio checkbox"><input value="C" type="radio" name="applyto" checked="checked" tabindex="0" class="hidden"><label>Current Period End (C)</label></div></div><div class="field"><div class="ui radio checkbox"><input value="N" type="radio" name="applyto" tabindex="0" class="hidden"><label>Next Period End (N)</label></div></div><div class="field"><div class="ui radio checkbox"><input value="CN" type="radio" name="applyto" tabindex="0" class="hidden"><label>Current & Next Period End (CN)</label></div></div><div class="field"><div class="ui radio checkbox"><input value="P" type="radio" name="applyto" tabindex="0" class="hidden"><label>Permanent (P)</label></div></div></div></div><div class="sixteen wide column"><div class="inline fields"><label for="fruit" style="margin-right: 2em">Prior Year Amount</label><div class="field"><input type="text" placeholder="Amount" name="amount" maxlength="50"></div><label for="fruit" style="margin-right: 2em">Reference</label><div class="field"><input type="text" placeholder="Reference" name="reference" maxlength="10"></div><div class="ui checkbox"><input type="checkbox" tabindex="0" class="hidden" name="extensions"><label>Extension</label></div></div></div><div class="sixteen wide column"><textarea id="ipmarkdowneditor" hidden></textarea></div><div class="sixteen wide column"></div></div></form></div><div class="actions"><div class="ui button">Cancel</div><div id="savebulkpoints" class="ui big blue label" style="cursor: pointer">Save</div></div><div class="ui segment" id="addbulkpointsloading" style="display: none"><div class="ui active inverted dimmer" style="position: fixed"><div class="ui text loader"><p>Please wait..</p></div></div></div>';
}
return __p;
};

},{"underscore":2}],29:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header"><div class="ui right aligned grid"><div class="right floated right aligned six wide column"><div class="ui divided horizontal list"><a class="item" data-content="coming soon">Tips</a> <a class="item" onclick="window.open(window.routemap + \'/xcmhelp/videos/AddTask.html\', \'Video\', \'top=30,left=250,height=800,width=1500,status=yes,scrollbars=yes,resizable=yes\', \'_blank\')">Video</a> <a class="item" data-content="coming soon">Help</a> <a href="javascript:void(0)" class="close" style="float:right;margin-left:8px"><svg id="addclose" xmlns="http://www.w3.org/2000/svg" id="Layer_1" enable-background="new 0 0 20 20" viewbox="0 0 20 20" x="0px" y="0px" width="20px" height="20px" xmlns:xml="http://www.w3.org/XML/1998/namespace" xml:space="preserve" version="1.1"><path fill="#be0032" d="M 19.146 17.471 L 11.676 10 l 7.471 -7.471 c 0.463 -0.463 0.463 -1.215 0 -1.679 c -0.463 -0.463 -1.215 -0.463 -1.679 0 L 9.997 8.322 L 2.526 0.851 c -0.463 -0.463 -1.215 -0.463 -1.679 0 c -0.464 0.463 -0.464 1.215 0 1.679 L 8.318 10 l -7.471 7.47 c -0.464 0.465 -0.464 1.215 0 1.68 c 0.464 0.463 1.215 0.463 1.679 0 l 7.471 -7.471 l 7.471 7.471 c 0.464 0.463 1.216 0.463 1.679 0 C 19.609 18.686 19.609 17.936 19.146 17.471 Z"></svg></a></div></div></div></div><div class="content"><div class="ui grid"><div class="sixteen wide column" style="padding-top: 0px;padding-bottom:0px" id="main"><div class="ui top attached tabular menu" id="tabAddTaskPage" style="margin-bottom: 0px"><a class="active item ui button" data-tab="tabAddTask" id="tabAddTaskClick">Add Task</a> <a class="item ui button disabled" data-tab="tabJurisdiction" id="tabJurisdictionClick">Jurisdiction</a> <a class="item ui button disabled" data-tab="tabCustomFields" id="tabCustomFieldsClick">Custom Fields</a></div><div class="ui tab active" data-tab="tabAddTask" id="tabAddTask"><div class="ui four column form grid"><div class="column"></div><div class="two wide column"><b>Client Name</b></div><div class="five wide column" style="padding:10px"><div class="ui search addtaskClient"><div class="ui icon input" style="height:35px"><input class="prompt" type="text" id="clientField" style="height:35px" placeholder="Search Clients..."> <i class="search icon"></i></div><div class="results" style="width:100%"></div></div></div><div class="column"><span id="client_requiredField" style="color:red;font-size: 15px">*(Required)</span></div><div class="column"></div><div class="two wide column"><b>Task Type</b></div><div class="five wide column" style="padding:10px"><div class="ui search addtaskTasktype"><div class="ui icon input" style="height:35px"><input class="prompt" type="text" id="tasktypeField" style="height:35px" placeholder="Search Task Types..."> <i class="search icon"></i></div><div class="results" style="width:100%"></div></div></div><div class="column"><span id="type_requiredField" style="color:red;font-size: 15px">*(Required)</span></div><div class="column"></div><div class="two wide column"><b>Period End Date</b></div><div class="five wide column" style="padding:10px"><input type="text" placeholder="MM/DD/YYYY" class="date" id="periodenddate" style="height:35px"></div><div class="column"><span id="pe_requiredField" style="color:red;font-size: 15px;display:none">*(Required)</span></div><div class="column"></div><div class="two wide column"><b>Description</b></div><div class="five wide column" style="padding:10px"><textarea id="description" placeholder="Enter Description..."></textarea></div><div class="column"></div><div class="seven wide column" style="padding:0px"></div><div class="nine wide column" style="padding:0px"><div id="addtaskMsg" class="ui hidden warning message" style="padding:5px"><i id="addtaskClose" class="close icon" style="top:0.45rem"></i><div class="header" style="font-size:1.0rem"><label id="addtaskMsglbl"></label></div></div></div></div></div><div class="ui tab" data-tab="tabJurisdiction" id="tabJurisdiction"></div><div class="ui tab" data-tab="tabCustomFields" id="tabCustomFields"></div></div><div class="sixteen wide column" style="padding:5px"><div id="submitclose" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em;float:right">Save &amp; Done</div><div id="submitreview" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em;float:right">Save &amp; Open</div><div id="addtasknext" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em;float:right">Save &amp; Next <i class="angle double right icon icon"></i></div><div id="review" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Open</div><div id="pageclose" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Done</div></div></div></div>';
}
return __p;
};

},{"underscore":2}],30:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color:rgb(240,240,240);padding: 10px"><label style="font-family: museo-300">Add Attachments</label><div class="ui divided horizontal list" style="float:right;font-family: museo-300"><a class="item" data-content="coming soon">Tips</a> <a class="item" data-content="coming soon">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content" style="padding:3px"><div class="ui grid" style="margin: 0px"><div class="eight wide column" style="border-right:3px solid #CEC6C6;padding-top:0px"><div class="ui two column grid form" id="taskinfoEditGrid"><div class="sixteen wide column"><div class="ui form"><div class="inline fields"><div class="field"><div class="ui radio checkbox"><input type="radio" data-type="existing" name="attachmentType" checked="checked" tabindex="0" class="hidden"><label>Existing</label></div></div><div class="field"><div class="ui radio checkbox"><input type="radio" data-type="new" name="attachmentType" tabindex="0" class="hidden"><label>New</label></div></div></div></div></div><div class="five wide column"><label>Attachment Type</label></div><div class="nine wide column"><select class="ui dropdown" id="selectAttachmentType" style="height:32px;padding:2px 0"><option value="0">--Select--</option><option value="1">W-2</option><option value="2">1099</option><option value="3">Brokerage Statement</option><option value="4">Capital Gains Calculation</option><option value="5">Financial Statements</option><option value="6">Form 8697</option><option value="7">IRS Notice</option><option value="8">Journal Entries</option><option value="9">Memo</option><option value="10">Projections</option><option value="11">Tax Returns</option><option value="12">Workpapers</option><option value="13">Extension</option><option value="16">Return Client Data</option><option value="17">Trial Balance</option><option value="18">K-1 to Client Binder</option><option value="19">Form 8453 Consolidated Federal</option><option value="20">Separate Company Federal</option><option value="21">Federal Extension</option><option value="22">State Extension</option><option value="23">Federal Estimates</option><option value="24">State Estimates</option><option value="25">8453</option><option value="26">K-1</option></select><input type="text" style="display:none;height:32px" id="txtattachmentType" placeholder="Enter here..."></div><div class="sixteen wide column"><div class="ui comments"><textarea id="assemblyAttachComments" placeholder="Enter Description here..." style="height:250px"></textarea></div></div><div class="sixteen wide column"><button class="ui primary button" id="buttonAddToList" style="float:right">Add</button></div></div></div><div class="eight wide column"><p style="font-size: 1.2em;font-weight:bold">Attachment List</p><ul id="selectedlistAssemblyAttachment" style="list-style-type:none; margin:0;padding:0"></ul></div></div></div><div class="actions"><button class="ui button">Cancel</button> <button class="ui primary button" id="buttonAddAttachments">Save</button></div>';
}
return __p;
};

},{"underscore":2}],31:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color:rgb(240,240,240);padding: 10px"><label style="font-family: museo-300">Add Instructions</label><i class="close icon" style="float:right"></i></div><div class="content" style="padding:3px"><div class="ui grid form"><div class="sixteen wide column"><div class="ui comments"><textarea id="assembly_instructions" placeholder="Enter General assembly Instruction here..." style="height:250px">'+
((__t=( assemblyInstructionField ))==null?'':__t)+
'</textarea></div></div></div></div><div class="actions"><button class="ui button">Cancel</button> <button class="ui primary button" id="buttonSaveInstruction">Save Instruction</button></div>';
}
return __p;
};

},{"underscore":2}],32:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="row" style="padding-top:1rem">';
 if(isControlSheet) { 
__p+='<div class="four wide column"><h1 class="ui header moduleheader modulecolor">Assembly</h1></div>';
 } 
__p+='<div class="right floated right aligned '+
((__t=( isControlSheet ? 'six' : 'four' ))==null?'':__t)+
' wide column"><div class="ui small buttons"><div id="priorassembly" class="ui basic button modulebutton" style="color: #425b79!important"><i class="angle left icon"></i> Prior</div><div id="currentassembly" class="ui basic active button modulebutton" style="color: #425b79!important">Current <i class="angle right icon"></i></div></div></div><div class="'+
((__t=( isControlSheet ? 'sixteen' : 'twelve' ))==null?'':__t)+
' wide column" id="sectionAttachmentandInstruction"><div class="ui label" style="background-color:aliceblue;color: rgb(72,72,72);font-size:0.9em;letter-spacing:0.8px;font-family: museo-100"><div id="sectionInstruction"><span>General Assembly Instructions: <b><label id="assembly_instruction"></label></b></span></div><div id="sectionAttachments" style="padding-top:10px"></div></div></div></div><div class="row" id="assembly_actions_row" style="background-image: repeating-linear-gradient(145deg, transparent, transparent 1px, rgba(238, 238, 238, 0.298039) 3px, rgba(238, 238, 238, 0.298039) 5px); background-color: rgb(255, 255, 255);margin: 0 12px 0 12px"><div class="sixteen wide column" style="padding-bottom:0px;  padding-top: 0px"><div id="bulkeditassembly" class="disableoption" style="float:left"><div class="sprite create_extensions" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Bulk Edit</p></div><div id="addInstruction" style="float:left"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Add Instructions</p></div><div id="addAttachment" style="float:left"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Add Attachment</p></div><div id="copyfrompriorAssembly" class="disableoption" style="float:left"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Copy From Prior</p></div></div></div><div class="row" style="padding-top:10px;padding-bottom:0px"><div id="assembly-grid" class="sixteen wide column"></div></div><div class="sixteen wide column"><div class="column"><div id="assemblysave" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right; display:none">Save</div></div></div><div id="confAssembly" class="ui modal"><i class="close icon" style="color:white"></i><div class="content" style="background-color: rgb(68,89,120)"><div><label style="color:white;font-size:0.9rem;font-weight:500" id="confMsglblAssembly"></label></div></div><div class="actions" style="background-color: rgb(68,89,120)"><div class="two fluid ui buttons"><div id="buttonproceed" class="ui approve tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px; float:right; background-color:orange">Yes</div><div id="buttoncancel" class="ui deny tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px;float:right;margin-right: 10px">NO</div></div></div></div>';
}
return __p;
};

},{"underscore":2}],33:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header">Bulk Edit Checklists<div class="ui divided horizontal list" style="float:right"><a class="item" data-content="coming soon">Tips</a> <a class="item" data-content="coming soon">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content"><div class="ui grid form"><div class="six wide column"><label>Associated Status</label></div><div class="ten wide column"><div id="statuslist" class="ui search"><div class="ui icon input"><input class="prompt" type="text" placeholder="Search status..."> <i class="search icon"></i></div><div class="results" style="width: 100%; max-height: 200px; overflow-y: auto"></div></div></div><div class="six wide column"><label>Completion Due Date</label></div><div class="ten wide column"><div class="column"><input id="datepicker" type="text"></div></div><div class="six wide column"><label for="reference">Assign To</label></div><div class="ten wide column"><div class="ui radio checkbox"><input type="radio" name="optionAssignTo" value="A"><label for="radioAssignToAdmin">Admin &nbsp;&nbsp;</label></div><div class="ui radio checkbox"><input type="radio" checked="checked" name="optionAssignTo" value="P"><label for="radioAssignToPerson">Person</label></div></div><div class="six wide column"><label for="reference"></label></div><div class="ten wide column"><div id="userlist" class="ui search"><div class="ui icon input"><input class="prompt" type="text" placeholder="Search Users..."> <i class="search icon"></i></div><div class="results" style="width: 100%; max-height: 200px; overflow-y: auto"></div></div></div></div></div><div class="actions"><div class="ui button">Cancel</div><div id="applychecklistchanges" class="ui big blue label" style="cursor: pointer">Apply</div></div>';
}
return __p;
};

},{"underscore":2}],34:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='';
 if(!isMoveTask) { 
__p+='<div class="row" style="padding-top: 1rem">';
 if(isControlSheet) { 
__p+='<div class="two wide column"><h1 class="ui header moduleheader modulecolor">Checklist</h1></div>';
 } 
__p+='<div class="right floated right aligned ten wide column"><div class="ui small buttons"><div id="priorchecklist" class="ui basic button modulebutton" style="display:'+
((__t=( prior ))==null?'':__t)+
';color: #425b79!important"><i class="angle left icon"></i> Prior</div><div id="currentchecklist" class="ui basic active button modulebutton" style="display:'+
((__t=( prior ))==null?'':__t)+
';color: #425b79!important">Current <i class="angle right icon"></i></div></div><div id="defaultchecklist" class="ui small basic button" style="color: white!important;background-color:#475a78!important">Apply Default</div><div id="addChecklistsButton" class="ui small basic button modulebutton modulecolor" style="color: white!important;background-color:#475a78!important"><i class="icon plus"></i> Add Checklist</div></div></div>';
 } 
__p+='<div class="row" style="padding:3px 0;margin: 0 12px;background-color: rgb(255,255,255);background-image: repeating-linear-gradient(145deg, transparent, transparent 1px, rgba(238,238,238,.3) 3px, rgba(238,238,238,.3) 5px);display: '+
((__t=( movetask ))==null?'':__t)+
'"><div id="checklistoptions" class="twelve wide column disableoption"><div id="bulkeditchecklist" style="float:left; cursor:pointer"><div class="sprite create_extensions" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Bulk Edit</p></div><a id="email-link" style="float:left; cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Create E-mail</p></a><div id="assignchecklist" style="cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Assign</p></div><div id="unassignchecklist" style="cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">UnAssign</p></div></div><div class="right aligned four wide column" style="position:relative;top:6px;padding-right:0px"><div><div id="exportChecklistItems" class="sprite export_excel" style="float:right;position:relative" title="Export to CSV"></div></div></div></div><div class="sixteen wide column"><div id="checklists-grid" class="column"></div></div><div class="sixteen wide column" style="padding-top:10px"><div class="column"><div id="checklistsave" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Save</div></div></div>';
}
return __p;
};

},{"underscore":2}],35:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="ui grid"><div class="sixteen wide column" id="columndisplay"></div></div>';
}
return __p;
};

},{"underscore":2}],36:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="sixteen wide column"><h1 class="ui header moduleheader modulecolor">Custom Fields</h1></div><div class="sixteen wide column" style="margin-left: 10px"><div class="ui two column grid form" id="customFieldGrid"></div></div>';
}
return __p;
};

},{"underscore":2}],37:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="ui two column grid"><div class="column" style="font-family: \'Roboto Condensed\', sans-seri"><b>'+
((__t=( name ))==null?'':__t)+
'</b></div><div class="column customgridEvenColumn">';
 if(dataType !== 'Date') { 
__p+='<input id="'+
((__t=(taskId ))==null?'':__t)+
'-'+
((__t=( id ))==null?'':__t)+
'" type="text" value="'+
((__t=( fielddata ))==null?'':__t)+
'" style="height:38px">';
 } else { 
__p+=' <input id="'+
((__t=(taskId ))==null?'':__t)+
'-'+
((__t=( id ))==null?'':__t)+
'" type="text" placeholder="MM/DD/YYYY" value="'+
((__t=( fielddata ))==null?'':__t)+
'" style="height:38px">';
 } 
__p+='</div></div>';
}
return __p;
};

},{"underscore":2}],38:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="ui grid fullview" style="margin:0;display: '+
((__t=( display ))==null?'':__t)+
'"><div class="row" style="display: '+
((__t=( helpbardisplay ))==null?'':__t)+
'"><div class="right floated right aligned six wide column"><div class="ui divided horizontal list"><a class="item" onclick="window.open(\'xcmhelp/tips/index.html#!Documents/myviews.htm\', \'Tips\', \'top=30,left=250,height=600,width=500,status=yes,scrollbars=yes,resizable=yes\', \'_blank\')" style="color:rgb(76,89,121)"><em>Tips</em></a> <a class="item" data-content="coming soon" style="color:rgb(76,89,121)"><em>Video</em></a> <a class="item" onclick="window.open(\'xcmhelp/help/index.html#!Documents/myviewpage.htm\', \'Help\', \'top=30,left=250,height=600,width=1000,status=yes,scrollbars=yes,resizable=yes\', \'_blank\')" style="color:rgb(76,89,121)"><em>Help</em></a></div></div></div><div id="action" class="row" style="top:18px;padding:0.3rem 0"><div class="left floated left aligned six wide column"><div class="ui mini horizontal statistic"><div class="value" style="font-family: museo-500; color:rgb(76,89,121)"><span id="bucketTitle">'+
((__t=( name ))==null?'':__t)+
'</span> - <span id="viewingcount"></span><em style="text-transform:lowercase">&nbsp;&nbsp;of&nbsp;&nbsp;</em><span id="totalCount"></span></div><div class="label"><div id="subbucketview" class="ui icon left pointing dropdown basic"><div id="infographic" class="sprite info_graphic" style="float:left;position:relative;top:8px"></div><div class="menu" style="z-index:999; max-height: 400px;overflow-y: auto; overflow-x: hidden;margin:0px"></div></div></div></div></div><div class="left floated left aligned five wide column"><div class="ui hidden warning message" style="padding: 5px;margin:0" id="divTaskWarningMessage"><i class="close icon" style="top: 0.45rem" id="FlashCategoryCheck"></i><div class="header" style="font-size:0.9rem;font-weight:500"><div class="sprite info_alternative" style="float: left;padding: 0;margin: 0px"></div><label style="font-family: roboto" id="taskWarningMessage"></label></div></div><div id="myviewsuccessMsg" class="ui hidden success message" style="padding:5px"><i id="myviewsuccessClose" class="close icon" style="top:0.45rem"></i><div class="header" style="font-size:0.9rem;font-weight:500"><label id="myviewsuccessMsglbl"></label></div></div></div><div class="right floated right aligned five wide column"><div class="ui icon buttons"><div id="refresh" class="sprite refresh" title="Refresh" style="float:left;position:relative;top:1px"></div><div id="filterby" class="sprite filter_off" title="Filter" style="float:left;position:relative;top:5px"></div><div id="sortby" class="sprite multisort_off" title="Sort" style="float:left;position:relative;top:5px"></div><div id="Columns" class="sprite column_list" title="Show Hide Columns" style="float:left;position:relative;top:5px"></div><div id="export" class="sprite export_excel" style="float:left;position:relative;top:5px" title="Export to CSV"></div></div><div id="addTask" class="ui primary button" style=""><i class="icon plus"></i> Add Task</div></div></div><div id="taskToolBar" class="row" style="pointer-events:none; margin: 0 15px;opacity:0;padding:0.3rem 0;background-color: rgb(255,255,255);background-image: repeating-linear-gradient(145deg, transparent, transparent 1px, rgba(238, 238, 238, 0.298039) 3px, rgba(238, 238, 238, 0.98039) 5px)"><div class="left floated left aligned twelve wide column"><div id="taskInfo" style="float:left"><div class="sprite task_info" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Task Info</p></div><div class="ui popup bottom left transition hidden"><div class="ui relaxed grid"><div class="column"><div class="ui link list" id="taskInfoIndivualLink"><a id="Jurisdiction" class="item"><h4>Jurisdiction/Deliverables</h4></a> <a id="Assembly" class="item"><h4>Assembly</h4></a> <a id="Shipping" class="item"><h4>Shipping</h4></a> <a id="eFile" class="item"><h4>eFile</h4></a> <a id="SignOff-Tasktype" class="item"><h4>SignOff - Tasktype</h4></a> <a id="SignOff-Category" class="item"><h4>SignOff - Category</h4></a> <a id="Engagement" class="item"><h4>Engagement Info</h4></a> <a id="Extension" class="item"><h4>Extension</h4></a></div></div></div></div><div id="taskMove" style="float:left"><div class="sprite move_task" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Move Task</p></div><div id="extensionMove" style="float:left;display:none"><div class="sprite move_task" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Move Extension</p></div><div id="points" style="float:left"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Add Points</p></div><div id="extensions" class="" style="float:left"><div class="sprite create_extensions" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Create Extensions</p></div><div id="delinktasks" class="" style="float:left; display: none"><div class="sprite create_extensions" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Delink</p></div><div id="updatelinktasks" class="" style="float:left; display: none"><div class="sprite create_extensions" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Update Link Tasks</p></div><div id="checkaddlinktasks" class="" style="float:left; display: none"><div id="isaddlinktasks" class="ui checkbox" style="position:relative;top:8px;margin-right:5px"><input type="checkbox"><label>Link tasks to each other</label></div><div class="sprite info" data-content="Link tasks to each other." data-variation="small" style="float: left;position:relative;top:8px"></div></div><div id="addlinktasks" class="" style="float:left; display: '+
((__t=( inputboxdisplay ))==null?'':__t)+
'"><div class="sprite create_extensions" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Link Tasks</p></div><div class="ui action input" style="float:left; display: '+
((__t=( inputboxdisplay ))==null?'':__t)+
'"><input id="projectedstartdate" type="text" placeholder="Projected Start Date" style="position: relative; padding: 0.4em 1em; top: 2px"> <button id="updateprojectedstartdate" class="ui button" style="position: relative; padding: 0.4em 1em; top: 2px">Update</button></div></div><div class="right floated right aligned four wide column"><div id="selected" style="float:right;cursor:pointer"><span id="selectedcount" style="float:left;position:relative;top:8px;font-style:italic;margin-right:3px">0</span><p style="float:left;position:relative;top:8px;margin-right:8px;font-style: italic">Selected</p><div class="sprite sort" style="float:left;position:relative;top:8px"></div></div></div></div><div class="row"><div id="taskdata" class="wide column" style="margin-bottom:10px"></div></div></div><div id="popoverDialog" class="ui flowing popup"></div>';
}
return __p;
};

},{"underscore":2}],39:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" id="tsjEditGridContent" style="background-color: rgb(68,89,120);padding: 7px;padding-bottom:0px"><div class="ui right aligned grid"><div class="left floated left aligned six wide column" style="padding:0px"><h3 style="color:white;font-family: museo-300">Edit Task Specific Jurisdiction</h3></div><div class="right floated right aligned six wide column" style="padding:0px"><div class="ui divided horizontal list"><a class="item" style="color:white;font-family: museo-500" data-content="coming soon">Tips</a> <a class="item" style="color:white;font-family: museo-500" data-content="coming soon">Video</a> <a class="item" style="color:white;font-family: museo-500" data-content="coming soon">Help</a> <a class="item"><i class="close icon" id="tsjClose" style="color:white"></i></a></div></div></div></div><div class="content" id="tsjEditGridContent" style="background-color: rgb(68,89,120);padding-top: 5px;padding-left: 10px;padding-right: 10px"><div class="ui grid form"><div class="sixteen wide column" style="padding-top: 0px;padding-bottom:0px"><div class="ui form grid"><div class="three wide column" style="padding:0px"><label style="color:white">Client\\Entity Name:</label></div><div class="thirteen wide column" style="padding:0px"><label style="color:white">'+
((__t=( client_name ))==null?'':__t)+
'</label></div><div class="three wide column" style="padding:0px;padding-top: 5px"><label style="color:white">Type Of Task:</label></div><div class="thirteen wide column" style="padding:0px;padding-top: 5px"><label style="color:white">'+
((__t=( task_type ))==null?'':__t)+
'</label></div><div class="three wide column" style="padding:0px;padding-top: 5px"><label style="color:white">Period End Date:</label></div><div class="thirteen wide column" style="padding:0px;padding-top: 5px"><label style="color:white">'+
((__t=( moment(model.period_end).year() != 1900 && moment(model.period_end).year() != 0001 ? moment(model.period_end).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'</label></div><div class="three wide column" style="padding-left:0px;padding-top:5px"><label style="color:white">Jurisdiction Name:</label></div><div class="thirteen wide column" style="padding-left:0px;padding-top:5px"><input data-tsj="state_name" style="width:250px" type="text" value="'+
((__t=( model.state_name ))==null?'':__t)+
'"></div><div class="three wide column" style="padding-left:0px;padding-top:0px"><label style="color:white">Form Number:</label></div><div class="thirteen wide column" style="padding-left:0px;padding-top:0px"><input type="text" data-tsj="state_code" style="width:250px" value="'+
((__t=( model.state_code ))==null?'':__t)+
'"></div><div class="sixteen wide column" style="padding-left:0px;padding-top:0px"><div class="ui hidden warning message" style="padding: 5px" id="divTSJWarningMessage"><div class="header" style="font-size: 1.0rem"><div class="sprite info_alternative" style="float: left;padding: 0;margin: 0px"></div><label style="font-family: museo-500;color:red" id="TSJWarningMessage"></label></div></div></div></div></div><div class="sixteen wide column" style="border:1px solid #fff;padding:0px"><div class="grouped fields" id="radioJurisdictionGroup"><div class="field"><div class="ui three column center aligned grid"><div class="column"><div class="ui radio checkbox"><input type="radio" data-tsj="optionsDueDates" name="optionsDueDates" id="radioConfigureJurisdiction" value="dynamic" tabindex="0" class="hidden"><label style="color:white">Configure Jurisdiction Due-Date<br>based on Period End-Date<i class="info orange medium circle icon" data-content="Choose this option to calculate Due-dates based on Period End-date." data-variation="inverted"></i></label></div></div><div class="column"><div class="ui radio checkbox"><input type="radio" data-tsj="optionsDueDates" name="optionsDueDates" id="radiofixedJurisdiction" value="fixed" tabindex="0" class="hidden"><label style="color:white">Fixed Jurisdiction Due-Date<i class="info orange medium circle icon" data-content="Choose this option to set arbitary due dates not dependent on the Period End-date of the task" data-variation="inverted"></i></label></div></div><div class="column"><div class="ui radio checkbox"><input type="radio" data-tsj="optionsDueDates" name="optionsDueDates" value="none" id="radioNoJurisdiction" tabindex="0" class="hidden"><label style="color:white">No Orignal Date is requried<i class="info orange medium circle icon" data-content="Choose this option for those tasks that you wish to add a deliverable that does not have a due date" data-variation="inverted"></i></label></div></div></div></div></div></div><div class="sixteen wide column" id="configureJurisdiction" style="border:1px solid #fff;margin-top: 5px"><div class="inline fields"><div class="sixteen wide field"><div class="ui checkbox">';
 if(isDueDateEqualToPeriodEndDate) { 
__p+='<input id="checkdueequaltopedate" type="checkbox" checked="checked">';
 } else { 
__p+=' <input id="checkdueequaltopedate" type="checkbox">';
 } 
__p+='<label style="color:white">Orignal Due-date should be equal to Period End-date</label></div></div></div><div class="inline fields" id="hideorunhide"><div class="sixteen wide field"><div class="one wide field"><label style="color:white">When:</label></div><div class="five wide field"><select id="selectBeforeOrAfter"><option value="BPED">Before Period End-date</option><option value="APED" selected="selected">After Period End-date</option></select></div></div></div><div class="inline fields" id="hideorunhideday"><div class="four wide field"><div class="ui checkbox"><input id="checkduebasedonDays" type="checkbox"><label style="color:white">due date based on days Before/After Period End Date</label></div></div><div class="one wide field"><label style="color:white">Day:</label></div><div class="two wide field"><input type="text" id="idOrignalDueDateOfDay" data-tsj="OrignalDueDateOfDay" value="'+
((__t=( model.OrignalDueDateOfDay === 0 ? '': model.OrignalDueDateOfDay  ))==null?'':__t)+
'" placeholder="1-31" maxlength="2" max="31" min="1" style="width:73px"></div><div class="two wide field" id="hideMonthlabel"><label style="color:white">of Month</label></div><div class="three wide field" id="hideMonthinput"><input type="text" data-tsj="OrignalDueDateOfMonth" value="'+
((__t=( model.OrignalDueDateOfMonth === 0 ? '': model.OrignalDueDateOfMonth ))==null?'':__t)+
'" placeholder="1-15" maxlength="2" max="15" min="1" style="width:73px"> <i class="info orange medium circle icon" data-content="Enter Day and Month to calculate due-date before/after Period end-date. For e.g. 15/3 is the 15th day of the 3rd month before/after Period end-date." data-variation="inverted"></i></div></div><hr><div class="inline fields"><div class="sixteen wide field"><h4 style="color:white">Extension Periods<i class="info orange medium circle icon" data-content="Enter Day and Month to calculate due-date after Orignal Due-date. For e.g. 15/3 is the 15th day of the 3rd month after Due-date." data-variation="inverted"></i></h4></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">First Extension</label></div><div class="one wide field"><label style="color:white">Day:</label></div><div class="two wide field"><input type="text" data-tsj="FirstExtensionDateOnDay" value="'+
((__t=( model.FirstExtensionDateOnDay === 0 ? '' : model.FirstExtensionDateOnDay ))==null?'':__t)+
'" placeholder="1-31" maxlength="2" max="31" min="1" style="width:73px"></div><div class="two wide field"><label style="color:white">of Month</label></div><div class="two wide field"><input type="text" data-tsj="FirstExtensionDateOnMonth" value="'+
((__t=( model.FirstExtensionDateOnMonth === 0 ? '' : model.FirstExtensionDateOnMonth ))==null?'':__t)+
'" placeholder="1-15" maxlength="2" max="15" min="1" style="width:73px"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Second Extension</label></div><div class="one wide field"><label style="color:white">Day:</label></div><div class="two wide field"><input type="text" data-tsj="SecondExtensionDateOnDay" value="'+
((__t=( model.SecondExtensionDateOnDay === 0 ? '' : model.SecondExtensionDateOnDay ))==null?'':__t)+
'" placeholder="1-31" maxlength="2" max="31" min="1" style="width:73px"></div><div class="two wide field"><label style="color:white">of Month</label></div><div class="two wide field"><input type="text" data-tsj="SecondExtensionDateOfMonth" value="'+
((__t=( model.SecondExtensionDateOfMonth === 0 ? '' : model.SecondExtensionDateOfMonth ))==null?'':__t)+
'" placeholder="1-15" maxlength="2" max="15" min="1" style="width:73px"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Third Extension</label></div><div class="one wide field"><label style="color:white">Day:</label></div><div class="two wide field"><input type="text" data-tsj="ThirdExtensionDateOnDay" value="'+
((__t=( model.ThirdExtensionDateOnDay === 0 ? '' : model.ThirdExtensionDateOnDay ))==null?'':__t)+
'" placeholder="1-31" maxlength="2" max="31" min="1" style="width:73px"></div><div class="two wide field"><label style="color:white">of Month</label></div><div class="two wide field"><input type="text" data-tsj="ThirdExtensionDateOfMonth" value="'+
((__t=( model.ThirdExtensionDateOfMonth === 0 ? '' : model.ThirdExtensionDateOfMonth ))==null?'':__t)+
'" placeholder="1-15" maxlength="2" max="15" min="1" style="width:73px"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Fourth Extension</label></div><div class="one wide field"><label style="color:white">Day:</label></div><div class="two wide field"><input type="text" data-tsj="FourthExtensionDateOnDay" value="'+
((__t=( model.FourthExtensionDateOnDay === 0 ? '' : model.FourthExtensionDateOnDay ))==null?'':__t)+
'" placeholder="1-31" maxlength="2" max="31" min="1" style="width:73px"></div><div class="two wide field"><label style="color:white">of Month</label></div><div class="two wide field"><input type="text" data-tsj="FourthExtensionDateOfMonth" value="'+
((__t=( model.FourthExtensionDateOfMonth === 0 ? '' : model.FourthExtensionDateOfMonth ))==null?'':__t)+
'" placeholder="1-15" maxlength="2" max="15" min="1" style="width:73px"></div></div></div><div class="sixteen wide column" id="fixedJurisdiction" style="border:1px solid #fff;margin-top: 5px;display:none"><div class="inline fields"><div class="sixteen wide field"><label style="color:wheat">This option will set arbitary due dates not dependent on the Period End-date of the task, such as; W-2 and 1099 which have a fixed Due-date or with tasks that you scheduled to be completed prior to the Period End-date of the Task.</label></div></div><div class="inline fields"><div class="two wide field"><label style="color:white">Due Date</label></div><div class="five wide field"><input type="text" data-tsj="FixedDueDate" class="date" value="'+
((__t=( moment(model.FixedDueDate).year() != 1900 && moment(model.FixedDueDate).year() != 0001 ? moment(model.FixedDueDate).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'" placeholder="MM/DD/YYYY"><i class="info orange medium circle icon" data-content="Choose a fixed date, which is not dependent on Period End-date." data-variation="inverted"></i></div></div><div class="inline fields"><div class="sixteen wide field"><h4 style="color:white">Extension Periods</h4></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">First Extension</label></div><div class="three wide field"><input type="text" data-tsj="FirstFixedExtension" class="date" value="'+
((__t=( moment(model.FirstFixedExtension).year() != 1900 && moment(model.FirstFixedExtension).year() != 0001 ? moment(model.FirstFixedExtension).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'" placeholder="MM/DD/YYYY"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Second Extension</label></div><div class="three wide field"><input type="text" data-tsj="SecondFixedExtension" class="date" value="'+
((__t=( moment(model.SecondFixedExtension).year() != 1900 && moment(model.SecondFixedExtension).year() != 0001 ? moment(model.SecondFixedExtension).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'" placeholder="MM/DD/YYYY"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Third Extension</label></div><div class="three wide field"><input type="text" data-tsj="ThirdFixedExtension" class="date" value="'+
((__t=( moment(model.ThirdFixedExtension).year() != 1900 && moment(model.ThirdFixedExtension).year() != 0001 ? moment(model.ThirdFixedExtension).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'" placeholder="MM/DD/YYYY"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Fourth Extension</label></div><div class="three wide field"><input type="text" data-tsj="FourthFixedExtension" class="date" value="'+
((__t=( moment(model.FourthFixedExtension).year() != 1900 && moment(model.FourthFixedExtension).year() != 0001 ? moment(model.FourthFixedExtension).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'" placeholder="MM/DD/YYYY"></div></div></div><div class="sixteen wide column"><div id="buttonEditAndSaveTSJ" class="ui tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px; float:right">Save</div></div></div></div>';
}
return __p;
};

},{"underscore":2}],40:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color:rgb(240,240,240);padding: 10px"><label style="font-family: museo-300">Bulk Edit Assembly Details</label><i class="close icon" style="float:right"></i></div><div class="content" style="padding:3px"><div class="ui two column left aligned grid form" id="assemblyEditGrid"><div class="column"><label>Filing Method</label></div><div class="column"><select class="ui dropdown" id="selectfilingType" style="height:30px;padding:2px 0"><option value="0">--Select--</option><option value="1">Paper</option><option value="2">eFile</option><option value="3">None</option></select></div><div class="column"><label>Person To Sign</label></div><div class="column"><div class="ui search"><input type="text" id="persontoSign_text" class="prompt" style="height:30px" placeholder="Search person..."> <input type="hidden" id="persontoSign_row"><div class="results"></div></div></div><div class="column"><label>Send To</label></div><div class="column"><input type="text" id="sendTo_row" style="height:30px" placeholder="Type here..."></div><div class="column"><label>Type of Copies</label></div><div class="column"><select class="ui dropdown" id="selectTypeofCopies" style="height:30px;padding:2px 0"><option value="0">--Select--</option><option value="3">CD</option><option value="5">Draft</option><option value="6">Final</option><option value="4">Other</option><option value="1">Paper</option><option value="2">Portal</option><option value="7">PDF</option><option value="8">Client to File</option><option value="9">USB</option></select></div><div class="column"><label>Number of Copies</label></div><div class="column"><input type="text" id="numberofCopies_row" style="height:30px" placeholder="Type numbers here..."></div><div class="sixteen wide column"><div class="ui comments"><textarea id="comments_row" placeholder="Enter Comments here..." style="height:0px"></textarea></div></div></div></div><div class="actions"><button class="ui button">Cancel</button> <button class="ui primary button" id="buttonApplyToGrid">Apply</button></div>';
}
return __p;
};

},{"underscore":2}],41:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color:rgb(240,240,240);padding: 10px"><label style="font-family: museo-300">Bulk Edit eFile Details</label><i class="close icon" style="float:right"></i></div><div class="content" style="padding:3px"><div class="ui two column left aligned grid form" id="efileEditGrid"><div class="column"><label>Consent Received On</label></div><div class="column"><input type="text" id="efileConsentFormReceivedOn" class="date" placeholder="MM/DD/YYYY"></div><div class="column"><label>eFiled By</label></div><div class="column"><div class="ui search"><input type="text" id="efileWhoReturn" class="prompt" style="height:30px" placeholder="Search person..."> <input type="hidden" id="whoeFiledId_row"><div class="results"></div></div></div><div class="column"><label>Document Control Number</label></div><div class="column"><input type="text" id="efileDocumentControlNumber" style="height:30px" placeholder="Type DCN here..."></div><div class="column"><label>eFiled On</label></div><div class="column"><input type="text" id="efileDateReturn" class="date" placeholder="MM/DD/YYYY"></div><div class="column"><label>eFile Accepted On</label></div><div class="column"><input type="text" id="efileDateAccepted" class="date" placeholder="MM/DD/YYYY"></div><div class="column"><label>eFile Rejected On</label></div><div class="column"><input type="text" id="efileDateRejected" class="date" placeholder="MM/DD/YYYY"></div></div></div><div class="actions"><button class="ui button">Cancel</button> <button class="ui primary button" id="ApplyToEfileGrid">Apply</button></div>';
}
return __p;
};

},{"underscore":2}],42:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color:rgb(240,240,240);padding: 10px"><label style="font-family: museo-300;font-size: medium">Bulk Edit Move Tasks</label><i class="close icon" style="float:right"></i></div><div class="content" style="padding:3px"><div class="ui two column left aligned grid form" id="moveEditGrid"><div class="six wide column"><label>To Status</label></div><div class="ten wide column"><div class="ui search status" id="editstatus"><div class="ui icon input" style="height:35px"><input class="prompt" id="editstatusname" type="text" style="height:30px" name="editstatus" placeholder="Search Status..."> <input type="hidden" id="editstatus_Id"> <i class="search icon"></i></div><div class="results" style="height: 231px;width:100%; overflow-y: scroll"></div></div></div><div class="six wide column" id="towhom_lbl"><label>To Whom</label></div><div class="ten wide column" id="towhom_user" style="padding:10px"><div class="ui search moveusers" id="editmoveusers"><div class="ui icon input field" style="height:35px"><input class="prompt" id="editusersname" type="text" style="height:30px" name="editmoveusers" placeholder="Search User..."> <i class="search icon"></i> <input type="hidden" id="edittowhom_userId" value="0"></div><div class="results" style="height: 231px;width:100%; overflow-y: scroll"></div></div></div><div class="six wide column"><label>Add Time</label></div><div class="ten wide column"><input type="text" id="editaddtime" style="height:30px" maxlength="6" placeholder="Enter time..."></div><div class="six wide column"><label>Routing Sheet Role</label></div><div class="ten wide column"><div class="ui checkbox"><input type="checkbox" id="iseditRoutingsheet" name="example"></div></div></div></div><div class="actions"><div id="canceleditmove" class="ui small blue label" style="cursor: pointer">Cancel</div><div id="editapplyMove" class="ui small blue label" style="cursor: pointer">Apply</div></div><div class="ui segment" id="bulkeditmovetasks" style="display: none"><div class="ui active inverted dimmer" style="position: fixed"><div class="ui text loader"><p>Please wait..</p></div></div></div>';
}
return __p;
};

},{"underscore":2}],43:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color:rgb(240,240,240);padding: 10px"><label style="font-family: museo-300">Bulk Edit Shipping Details</label><i class="close icon" style="float:right"></i></div><div class="content" style="padding:3px"><div class="ui two column left aligned grid form" id="shippingEditGrid"><div class="column"><label>Deliverable Delivery Method</label></div><div class="column"><select class="ui dropdown" id="selectDeliverable" style="height:30px;padding:2px 0"><option value="0">--Select--</option><option value="2">Airborne</option><option value="23">Call Client</option><option value="5">Client Pick Up</option><option value="14">Client Portal</option><option value="7">Courier</option><option value="9">Eastern Connection</option><option value="18">Email</option><option value="22">Express Mail</option><option value="10">FAX</option><option value="3">Federal Express</option><option value="6">Hand Delivered</option><option value="20">In House</option><option value="19">None</option><option value="8">Other</option><option value="24">Postal Service</option><option value="4">UPS</option><option value="21">UPS Next Day</option><option value="1">US Postal Service</option></select></div><div class="column"><label>Who Delivered</label></div><div class="column"><div class="ui search"><input type="text" id="who_delivered" class="prompt" style="height:30px" placeholder="Search person..."> <input type="hidden" id="who_delivered_row"><div class="results"></div></div></div><div class="column"><label>Method Delivered</label></div><div class="column"><select class="ui dropdown" id="selectDeliveryMethod" style="height:30px;padding:2px 0"><option value="0">--Select--</option><option value="2">Airborne</option><option value="23">Call Client</option><option value="5">Client Pick Up</option><option value="14">Client Portal</option><option value="7">Courier</option><option value="9">Eastern Connection</option><option value="18">Email</option><option value="22">Express Mail</option><option value="10">FAX</option><option value="3">Federal Express</option><option value="6">Hand Delivered</option><option value="20">In House</option><option value="19">None</option><option value="8">Other</option><option value="24">Postal Service</option><option value="4">UPS</option><option value="21">UPS Next Day</option><option value="1">US Postal Service</option></select></div><div class="column"><label>Tracking Number</label></div><div class="column"><input type="text" id="tracking_numbertext" style="height:30px" placeholder="Type numbers here..."></div><div class="column"><label>Date Delivered</label></div><div class="column"><input type="text" id="date_delivered" class="date" placeholder="MM/DD/YYYY"></div><div class="sixteen wide column"><div class="ui comments"><textarea id="shippingcomments_row" placeholder="Enter Comments here..." style="height:0px"></textarea></div></div></div></div><div class="actions"><button class="ui button">Cancel</button> <button class="ui primary button" id="ApplyToShippingGrid">Apply</button></div>';
}
return __p;
};

},{"underscore":2}],44:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='';
 if(isControlSheet) { 
__p+='<div class="two wide column"><h1 class="ui header moduleheader modulecolor">eFile</h1></div>';
 } 
__p+='<div class="'+
((__t=( isControlSheet ? 'twelve' : 'sixteen' ))==null?'':__t)+
' wide column" style="padding-bottom:0px"><div id="efilesuccessMsg" class="ui hidden success message" style="padding:5px"><i id="efilesuccessClose" class="close icon" style="top:0.45rem"></i><div class="header" style="font-size:0.9rem"><label id="efilesuccessMsglbl">Task is Moved to Completed</label></div></div><div id="efilewarningMsg" class="ui hidden warning message" style="padding:5px"><i id="efilewarningClose" class="close icon" style="top:0.45rem"></i><div class="header" style="font-size:0.9rem;font-weight:500"><label id="efilewarningMsglbl"></label></div></div></div><div class="row" style="background-image: repeating-linear-gradient(145deg, transparent, transparent 1px, rgba(238, 238, 238, 0.298039) 3px, rgba(238, 238, 238, 0.298039) 5px); background-color: rgb(255, 255, 255);margin: 0px 12px 0 12px"><div class="sixteen wide column" style="padding-bottom:0px;  padding-top: 0px"><div id="efilebulkedit" class="disableoption" style="float:left"><div class="sprite create_extensions" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px;cursor: pointer">Bulk Edit</p></div></div></div><div class="row" style="padding-top:10px"><div id="efile-grid" class="sixteen wide column"></div></div><div class="sixteen wide column"><div id="eFilemoveCompleted" class="ui primary button disableoption" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right">Move to Completed</div><div id="efilesave" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Save</div></div><div id="confefile" class="ui modal"><div class="header" style="background-color: rgb(68,89,120);padding: 7px;padding-bottom:0px"><div class="ui right aligned grid"><div class="left floated left aligned six wide column" style="padding:0px"></div><div class="right floated right aligned six wide column" style="padding:0px"><div class="ui divided horizontal list"><a class="item"><i class="close icon" style="color:white"></i></a></div></div></div></div><div class="content" style="background-color: rgb(68,89,120)"><div><label style="color:white;font-size:0.9rem;font-weight:500" id="confefileMsglbl"></label></div></div><div class="actions" style="background-color: rgb(68,89,120)"><div class="two fluid ui buttons"><div class="ui approve tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px; float:right; background-color:orange">Proceed</div><div class="ui deny tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px;float:right;margin-right: 10px">Cancel</div></div></div></div><div id="deleteefileModal" class="ui modal"><div class="header" style="background-color: rgb(68,89,120);padding: 7px;padding-bottom:0px"><div class="ui right aligned grid"><div class="left floated left aligned six wide column" style="padding:0px"></div><div class="right floated right aligned six wide column" style="padding:0px"><div class="ui divided horizontal list"><a class="item"><i class="close icon" style="color:white"></i></a></div></div></div></div><div class="content" style="background-color: rgb(68,89,120)"><div><label style="color:white;font-size:0.9rem;font-weight:500" id="deleteefileMsglbl"></label></div></div><div class="actions" style="background-color: rgb(68,89,120)"><div class="two fluid ui buttons"><div class="ui approve tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px; float:right; background-color:orange">Proceed</div><div class="ui deny tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px;float:right;margin-right: 10px">Cancel</div></div></div></div>';
}
return __p;
};

},{"underscore":2}],45:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<form class="ui grid form" id="engagementForm"><div class="sixteen wide column"><div class="ui secondary pointing menu" id="tabEngagement" style="border-bottom:0px"><div class="header item" id="EngagementHeaderItem" style="display:none;padding-left: 0px;margin-right: 20px"><h1 class="ui header moduleheader modulecolor" style="color:#425b79!important;font-family: museo-500!important">Engagement</h1></div><a class="active orange item" data-tab="tabEngagementInformation">Engagement Information <i class="unhide blue icon" id="iconEngagementInformation" style="display:none"></i></a> <a class="orange item" data-tab="tabSchedulingandFinancialsInformation">Key Dates <i class="unhide blue icon" id="iconKeyDates" style="display:none"></i></a> <a class="orange item" data-tab="tabClientAcceptance">Acceptance <i class="unhide blue icon" id="iconAcceptance" style="display:none"></i></a> <a class="orange item" data-tab="tabPartnerRotation">Rotation <i class="unhide blue icon" id="iconRotation" style="display:none"></i></a></div><div class="ui tab active" data-tab="tabEngagementInformation"><div class="ui two column grid"><div class="column" style="padding: 5px"><table class="ui table unstackable" id="tableEngagementInformation"><tbody><tr><td>PCAOB or Non-Public</td><td><select name="PCAOBorNonPublic" class="ui dropdown fluid"><option value="0">Select..</option><option value="PCAOB">PCAOB</option><option value="Non-Public">Non-Public</option></select></td></tr><tr><td>Level of Service</td><td><select name="LevelofService" class="ui dropdown fluid"><option value="25">Select..</option><option value="24">Agreed Upon Procedures</option><option value="1">Audit-A-133</option><option value="2">Audit-GAAS</option><option value="3">Audit-ERISA-Full Scope</option><option value="4">Audit-ERISA-Limited Scope</option><option value="5">Audit-FDICA</option><option value="6">Audit-International Auditing Standards</option><option value="7">Audit-PCAOB-11k</option><option value="8">Audit-PCAOB-Financial Statement Only</option><option value="9">Audit-PCAOB-Integrated Audit</option><option value="10">Audit-Specified Element</option><option value="11">Audit-UFR</option><option value="12">Audit-Yellow Book</option><option value="13">Compilation-Forecast</option><option value="14">Compilation-Mgmt Use Only</option><option value="15">Compilation-Personal Financial Statement</option><option value="16">Compilation-Projection</option><option value="17">Compilation-(full disclosure)</option><option value="18">Compilation-(no disclosure)</option><option value="19">Review-International Auditing Standards</option><option value="20">Review- SSARS</option><option value="21">Review- PCAOB</option><option value="22">SAS 70 Type I</option><option value="23">SAS 70 Type II</option><option value="26">Audit-PCAOB-10K</option><option value="0">Other</option></select></td></tr><tr><td>Description of Other Service</td><td><input name="DescriptionofOtherService" class="ui input" type="text" placeholder="Enter text here..."></td></tr><tr><td>Entity Structure</td><td><select name="EntityStructure" class="ui dropdown fluid"><option value="25">Select..</option><option value="0">C Corp</option><option value="1">EBP-Defined Benefit</option><option value="2">EBP-Defined Contribution</option><option value="3">EBP-Health &amp; Welfare</option><option value="4">EBP-Multi-employer-Defined Benefit</option><option value="5">EBP-Multi-employer- Defined Contribution</option><option value="6">EBP-Multi-employer-Health and Welfare</option><option value="7">Individual</option><option value="8">Limited Liability Company</option><option value="9">Limited Liability Partnership</option><option value="10">Massachusetts Business Trust</option><option value="11">Not-For-Profit</option><option value="12">General Partnership</option><option value="13">Public Company</option><option value="14">Trust</option><option value="15">S Corp</option><option value="16">Sole Practitioner</option><option value="24">Other</option></select></td></tr><tr><td>Description of Other Entity</td><td><input name="DescriptionofOtherEntity" class="ui input" type="text" placeholder="Enter text here..."></td></tr><tr><td>Financial Statement Date</td><td><input name="FinancialStatementDate" class="date" type="text" placeholder="MM/DD/YYYY" maxlength="10"></td></tr><tr><td>Financial Statement Format</td><td><select name="FinancialStatementFormat" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Firm</option><option value="2">Client</option></select></td></tr><tr><td>Central File room location-File location</td><td><input name="CentralFileroomlocationFilelocation" class="ui input" type="text" placeholder="Enter text here..."></td></tr><tr><td>Engagement Binder Name</td><td><input name="EngagementBinderName" class="ui input" type="text" placeholder="Enter text here..."></td></tr><tr><td>Basis of Accounting</td><td><select name="BasisofAccounting" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Cash</option><option value="2">GAAP</option><option value="3">Income Tax</option><option value="4">International Financial Reporting Standards(IFRS)</option><option value="5">Liquidation</option><option value="6">Other</option></select></td></tr></tbody></table></div><div class="column" style="padding: 5px"><table class="ui table unstackable" id="tableEngagementInformation"><tbody><tr><td>Line of Service</td><td><select name="LineofService" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Specialized Audit</option><option value="2">General Practice</option><option value="3">Accounting, Consulting, Tax</option></select></td></tr><tr><td>Industry</td><td><select name="Industry" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Agricultural, Livestock, Forestry &amp; Fishing (110)</option><option value="2">Airlines (115)</option><option value="3">Auto Dealerships (120)</option><option value="4">Banking (125)</option><option value="5">Brokers and Dealers in Commodities (140)</option><option value="6">Brokers and Dealers in Securities (135)</option><option value="7">Common Interest Realty Associations (155)</option><option value="8">Construction Contractors (165)</option><option value="9">Credit Unions (175)</option><option value="10">Defined Benefit Plans Full Scope(390)</option><option value="11">Defined Benefit Plans Ltd Scope(395)</option><option value="12">Defined Contribution Plans Full Scope(380)</option><option value="13">Defined Contribution Plans Ltd Scope (385)</option><option value="14">ERISA Health &amp; Welfare Plans (400)</option><option value="15">Extractive Industries—Mining (185)</option><option value="16">Extractive Industries—Oil and Gas (180)</option><option value="17">FDIC Banking (126)</option><option value="18">Federal Financial Assistance Programs (186)</option><option value="19">Finance Companies (190)</option><option value="20">Government Contractors (205)</option><option value="21">Health Maintenance Organizations (210)</option><option value="22">Hospitals (216)</option><option value="23">HUD (222)</option><option value="24">Industry - Single Audit Act A-133 (420)</option><option value="25">Insurance Agents and Brokers (225)</option><option value="26">Investment Companies and Mutual Funds(230)</option><option value="27">Leasing Companies (235)</option><option value="28">Life Insurance Companies (240)</option><option value="29">Manufacturing (245)</option><option value="30">Mortgage Banking (250)</option><option value="31">Not for Profit Organization (260)</option><option value="32">Nursing Homes (217)</option><option value="33">Other (Describe) (002)</option><option value="34">Other Employee Benefit Plans (410)</option><option value="35">Other ERISA Plans (405)</option><option value="36">Personal Financial Statements (268)</option><option value="37">Professional Services (270)</option><option value="38">Property &amp; Casualty Insurance Co&#39;s (200)</option><option value="39">Real Estate Investment Trusts (295)</option><option value="40">Reinsurance Companies (300)</option><option value="41">Retail Trade (305)</option><option value="42">Rural Utilities Service Borrowers (308)</option><option value="43">Savings and Loan Associations (310)</option><option value="44">School Districts (320)</option><option value="45">State and Local Government (325)</option><option value="46">Telephone Companies (330)</option><option value="47">Utilities (335)</option><option value="48">Broadcasting &amp; Entertainment (130)</option><option value="49">Casinos (145)</option><option value="50">Colleges &amp; Universities (150)</option><option value="51">Computer Software Development &amp; Sales (160)</option><option value="52">Continuing Care Retirement Communities (170)</option><option value="53">Franchisors (195)</option><option value="54">Motor Carriers (255)</option><option value="55">Publishing (275)</option><option value="56">Real Estate Brokerage (280)</option><option value="57">Real Estate Development (285)</option><option value="58">Small Loan Companies (315)</option><option value="59">Wholesale Distributors (340)</option><option value="60">Other (please explain) (999)</option></select></td></tr><tr><td>Engagement Status</td><td><select name="EngagementStatus" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">New</option><option value="2">Recurring</option></select></td></tr><tr><td>Independent Partner Review Required</td><td><select name="IndependentPartnerReviewRequired" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Yes</option><option value="2">No</option></select></td></tr><tr><td>PCAOB Concurring Partner Review Required</td><td><select name="PCAOBConcurringPartnerReviewRequired" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Yes</option><option value="2">No</option></select></td></tr><tr><td>Technical Partner Review Required</td><td><select name="TechnicalPartnerReviewRequired" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Yes</option><option value="2">No</option></select></td></tr><tr><td>PCAOB Review Required</td><td><select name="PCAOBReviewRequired" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Yes</option><option value="2">No</option></select></td></tr><tr><td>Foreign Operations</td><td><select name="ForeignOperations" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Yes</option><option value="2">No</option></select></td></tr><tr><td>Realization Rate</td><td><div class="ui two column grid"><div class="column engagementSecondaryGridFirst"><input name="RealizationRateCY" type="text" class="integer" maxlength="10"></div><div class="column engagementSecondaryGridSecond"><input name="RealizationRatePY" type="text" class="integer" maxlength="10"></div></div></td></tr><tr><td>Fees</td><td><div class="ui two column grid"><div class="column engagementSecondaryGridFirst"><input name="FeesCY" type="text" class="integer" maxlength="10"></div><div class="column engagementSecondaryGridSecond"><input name="FeesPY" type="text" class="integer" maxlength="10"></div></div></td></tr></tbody></table></div></div></div><div class="ui tab" data-tab="tabSchedulingandFinancialsInformation"><div class="ui two column grid"><div class="column" style="padding: 5px"><table class="ui table unstackable" id="tableSchedulingandFinancialsInformation"><tbody><tr><td></td><td>Current Year</td><td>Prior Year</td></tr><tr><td>Report Date</td><td><input name="ReportDateCY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td><td><input name="ReportDatePY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td></tr><tr><td>Planning Begin Date</td><td><input name="PlanningBeginDateCY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td><td><input name="PlanningBeginDatePY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td></tr><tr><td>Planning End Date</td><td><input name="PlanningEndDateCY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td><td><input name="PlanningEndDatePY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td></tr><tr><td>Field Work Begin Date</td><td><input name="FieldWorkBeginDateCY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td><td><input name="FieldWorkBeginDatePY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td></tr><tr><td>Field Work End Date</td><td><input name="FieldWorkEndDateCY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td><td><input name="FieldWorkEndDatePY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td></tr><tr><td>Initial Draft Ready</td><td><input name="InitialDraftReadyCY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td><td><input name="InitialDraftReadyPY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td></tr></tbody></table></div><div class="column" style="padding: 5px"><table class="ui table unstackable" id="tableSchedulingandFinancialsInformation"><tbody><tr><td></td><td>Current Year</td><td>Prior Year</td></tr><tr><td>Draft Financial Statement Due Date</td><td><input name="DraftFinancialStatementDueDateCY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td><td><input name="DraftFinancialStatementDueDatePY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td></tr><tr><td>Final Financial Statement Due Date</td><td><input name="FinalFinancialStatementDueDateCY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td><td><input name="FinalFinancialStatementDueDatePY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td></tr><tr><td>Management Letter Due Date</td><td><input name="ManagementLetterDueDateCY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td><td><input name="ManagementLetterDueDatePY" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td></tr><tr><td>Documentation Completion Date</td><td colspan="2"><select name="DocumentationCompletionDate" class="ui dropdown fluid"><option value="1">Select..</option><option value="2">PCAOB Engagement (45 Days)</option><option value="3">Non-Public Audit (60 Days)</option><option value="4">Other-firm designated</option></select></td></tr></tbody></table></div></div></div><div class="ui tab" data-tab="tabClientAcceptance"><div class="ui two column grid"><div class="column" style="padding: 5px"><table class="ui table unstackable" id="tableClientAcceptance"><tbody><tr><td>Client Risk Assessment Required</td><td></td><td><select name="ClientRiskAssessmentRequired" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Yes</option><option value="2">No</option></select></td></tr><tr id="clientRiskAssessmentHide"><td>Client Risk Assessment</td><td></td><td><select name="ClientRiskAssessment" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Low</option><option value="2">Moderate</option><option value="3">High</option></select></td></tr><tr><td>Independence Representation</td><td></td><td><select name="IndependenceRepresentation" class="ui dropdown fluid"><option value="0">Select..</option><option value="1">Entity Structure</option><option value="2">Level of Service</option></select></td></tr><tr><td>Restricted Entity</td><td></td><td><select name="RestrictedEntity" class="ui dropdown fluid"><option value="11">Select..</option><option value="0">SEC Registrants</option><option value="1">EBP of SEC Registrants</option><option value="2">Client Requested Stock Restrictions</option><option value="3">Foreign Stock Exchange Registrants</option><option value="4">SAS 70 for SEC Registrants</option><option value="5">Investment Companies</option><option value="6">Lending Institutions</option><option value="7">Mortgage Brokers</option><option value="8">GAO Independence Rules</option><option value="9">Confidentiality/ Non-disclosure Agreement</option><option value="10">Insider Trading</option></select></td></tr></tbody></table></div><div class="column" style="padding: 5px"></div></div></div><div class="ui tab" data-tab="tabPartnerRotation"><div class="ui two column grid"><div class="column" style="padding: 5px"><table class="ui table unstackable" id="tablePartnerRotation"><tbody><tr><td>Engagement Partner Name</td><td></td><td><div class="ui fluid selection dropdown"><input type="hidden" name="EngagementPartner"> <i class="dropdown icon"></i> <span class="default text">Select..</span><div class="menu"><div class="item" data-value="0"><span class="right floated description"></span> Select..</div>';
 _.each(_users, function (user) { if(user.Id !== 0) {
__p+='<div class="item" data-value="'+
((__t=( user.Id ))==null?'':__t)+
'" data-text="'+
((__t=( user.fullName ))==null?'':__t)+
'"><span class="right floated description">'+
((__t=( user.branchName ))==null?'':__t)+
'</span>'+
((__t=( user.fullName ))==null?'':__t)+
'</div>';
} }); 
__p+='</div></div></td></tr><tr><td>Date</td><td></td><td><input name="EngagementPartnerDate" class="date" placeholder="MM/DD/YYYY" type="text" maxlength="10"></td></tr><tr><td>Comments</td><td></td><td><input name="EngagementPartnerComments" type="text" placeholder="Enter comments.."></td></tr><tr><td>Concurring Partner Name</td><td></td><td><div class="ui fluid selection dropdown"><input type="hidden" name="ConcurringPartner"> <i class="dropdown icon"></i> <span class="default text">Select..</span><div class="menu"><div class="item" data-value="0"><span class="right floated description"></span> Select..</div>';
 _.each(_users, function (user) { if(user.Id !== 0) {
__p+='<div class="item" data-value="'+
((__t=( user.Id ))==null?'':__t)+
'" data-text="'+
((__t=( user.fullName ))==null?'':__t)+
'"><span class="right floated description">'+
((__t=( user.branchName ))==null?'':__t)+
'</span>'+
((__t=( user.fullName ))==null?'':__t)+
'</div>';
} }); 
__p+='</div></div></td></tr><tr><td>Date</td><td></td><td><input name="ConcurringPartnerDate" type="text" class="date" placeholder="MM/DD/YYYY" maxlength="10"></td></tr><tr><td>Comments</td><td></td><td><input name="ConcurringPartnerComments" class="ui input" type="text" placeholder="Enter comments.."></td></tr></tbody></table></div><div class="column" style="padding: 5px"></div></div></div></div><div class="eight wide column"></div><div class="lef floated left aligned six wide column" style="padding:0px"><div class="ui success message hidden" id="EngagementSuccMessage" style="padding: 10px"><i class="close icon"></i><div class="header">Engagement Data Saved Successfully.</div></div></div><div class="right floated right aligned two wide column"><div id="saveEngagementForm" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Save</div></div></form>';
}
return __p;
};

},{"underscore":2}],46:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color:rgb(240,240,240);padding: 10px"><label style="font-family: museo-300">Add Instructions</label><i class="close icon" style="float:right"></i></div><div class="content" style="padding:3px"><div class="ui grid form"><div class="sixteen wide column"><div class="ui comments"><textarea id="extension_instructions" placeholder="Enter General assembly Instruction here..." style="height:250px">'+
((__t=( extensionInstructionField ))==null?'':__t)+
'</textarea></div></div></div></div><div class="actions"><button class="ui button">Cancel</button><label class="ui big blue label" id="extSaveInstruction">Save Instruction</label></div>';
}
return __p;
};

},{"underscore":2}],47:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header">Details<div class="ui compact error hidden message" style="padding: 2px 5px; margin: 0 0 0 16em"><p>error message here</p></div><div class="ui divided horizontal list" style="float:right"><a class="item" data-content="coming soon">Tips</a> <a class="item" data-content="coming soon">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="ui floating message grid" style="padding:0;background:white;margin: 0 auto"><div class="ten wide column"><h4 id="clientinfo" class="ui header" style="margin:0;font-family:museo-300" style="width: 100%;white-space: nowrap;overflow: hidden;text-overflow: ellipsis">'+
((__t=( clientinfo ))==null?'':__t)+
'</h4></div><div class="right aligned six wide column"><label id="clientcontact" class="item">'+
((__t=( contactdetails ))==null?'':__t)+
'</label></div></div><div class="content" style="padding-top:0"><div class="ui form"><div class="ui padded grid"><div class="sixteen wide column"><table class="ui table"><thead><tr><th>Status From</th><th>Status To</th><th>Changed By</th><th>Changed On</th><th>Assigned To</th></tr></thead><tbody></tbody></table></div></div></div></div>';
}
return __p;
};

},{"underscore":2}],48:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header">Bulk Edit Extension<div class="ui divided horizontal list" style="float:right"><a class="item" data-content="coming soon">Tips</a> <a class="item" data-content="coming soon">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content"><div class="ui grid form">';
 if(canManageExtension) { 
__p+='<div class="six wide column" style="padding-top:0px"><label for="reference">Date EXT Filed</label></div><div class="ten wide column" style="padding-top:0px"><div class="column"><input name="extensionFiledOn" id="dateextfiled" type="text"></div></div><div class="six wide column" style="padding-top:0px"><label for="reference">Person Filing EXT</label></div><div class="ten wide column" style="padding-top:0px"><div id="userlist" class="ui search"><div class="ui icon input"><input name="whofiledextension" class="prompt" type="text" placeholder="Search Users..."> <i class="search icon"></i></div><div class="results" style="width: 100%; max-height: 200px; overflow-y: auto"></div></div></div>';
 } 
__p+='<div class="six wide column" style="padding-top:0px"><label>Ext Filing Method</label></div><div class="ten wide column" style="padding-top:0px"><div id="extfilingmtd" class="ui selection dropdown" style="width:100%"><input type="hidden" name="extensionfilingTypeId"> <i class="dropdown icon"></i><div class="default text">--Select--</div><div class="menu"><div class="item" data-value="7">--Select--</div><div class="item" data-value="0">Paper</div><div class="item" data-value="1">eFile</div><div class="item" data-value="2">PBC</div><div class="item" data-value="3">Piggyback Fed</div><div class="item" data-value="4">EFT Sent</div><div class="item" data-value="5">No Filing Required</div><div class="item" data-value="6">Filed by Client</div></div></div></div><div class="six wide column" style="padding-top:0px"><label>EXT Prep Method</label></div><div class="ten wide column" style="padding-top:0px"><div id="extperpmtd" class="ui selection dropdown" style="width:100%"><input type="hidden" name="extensionPrepMethodId"> <i class="dropdown icon"></i><div class="default text">--Select--</div><div class="menu"><div class="item" data-value="0">--Select--</div><div class="item" data-value="1">Use Withholding Amounts</div><div class="item" data-value="2">File With Zeros</div><div class="item" data-value="3">See Projections</div></div></div></div><div class="six wide column" style="padding-top:0px"><label for="reference">Pay Method</label></div><div class="ten wide column" style="padding-top:0px"><div id="paymethod" class="ui selection dropdown" style="width:100%"><input type="hidden" name="payMethodId"> <i class="dropdown icon"></i><div class="default text">--Select--</div><div class="menu"><div class="item" data-value="0">--Select--</div><div class="item" data-value="1">Auto Withdrawal From Client Acct</div><div class="item" data-value="2">Check Mailed by Client</div><div class="item" data-value="3">Check Mailed by Firm</div><div class="item" data-value="4">No Payment Due</div><div class="item" data-value="5">Payment via Tax Agency Website</div></div></div></div><div class="six wide column" style="padding-top:0px"><label for="reference">Ext DCN</label></div><div class="ten wide column" style="padding-top:0px"><input id="extdcn" type="text" name="extensionDCN" style="width:100%"></div><div class="six wide column" style="padding-top:0px"><label for="reference">Pay Amount</label></div><div class="ten wide column" style="padding-top:0px"><input id="payamount" type="text" name="payAmount" style="width:100%"></div><div class="sixteen wide column" style="padding-top:0px"><textarea name="comments" id="extcomments" rows="2" placeholder="Enter Comments here..." style="height:50px;width:100%"></textarea></div></div></div><div class="actions"><div class="ui button">Cancel</div><div id="applyextensionchanges" class="ui big blue label" style="cursor: pointer">Apply</div></div>';
}
return __p;
};

},{"underscore":2}],49:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header">History<div class="ui compact error hidden message" style="padding: 2px 5px; margin: 0 0 0 16em"><p>error message here</p></div><div class="ui divided horizontal list" style="float:right"><a class="item" data-content="coming soon">Tips</a> <a class="item" data-content="coming soon">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="ui floating message grid" style="padding:0;background:white;margin: 0 auto"><div class="ten wide column"><h4 id="clientinfo" class="ui header" style="margin:0;font-family:museo-300" style="width: 100%;white-space: nowrap;overflow: hidden;text-overflow: ellipsis">'+
((__t=( clientinfo ))==null?'':__t)+
'</h4></div><div class="right aligned six wide column"><label id="clientcontact" class="item">'+
((__t=( contactdetails ))==null?'':__t)+
'</label></div></div><div class="content" style="padding-top:0"><div class="ui form"><div class="ui padded grid"><div class="sixteen wide column"><table class="ui table"><thead><tr><th>Jurisdictions</th><th>EXT type</th><th>Comments</th><th>Extended By</th><th>Date EXT Filed</th><th>Pay Method</th><th>Pay Amount</th></tr></thead><tbody></tbody></table></div></div></div></div>';
}
return __p;
};

},{"underscore":2}],50:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='';
 if(isControlSheet) { 
__p+='<div class="six wide column"><h1 class="ui header moduleheader modulecolor">Extension</h1></div>';
 } 
__p+='<div id="createextension" class="sixteen wide column hideItem" style="padding-top: 10px"><button id="createext" class="fluid ui primary button">Click here to Create Extension for this task</button></div><div class="sixteen wide column"><div class="ui grid" id="ui_grid_margin"><div id="extinstructions" class="row" style="padding-bottom: 0">';
 if(!_.isEmpty(taskinstructions)) { 
__p+='<div class="sixteen wide column"><div class="ui large label">'+
((__t=( taskinstructions ))==null?'':__t)+
'</div></div>';
 } 
__p+='</div><div class="row" style="background-image: repeating-linear-gradient(145deg, transparent, transparent 1px, rgba(238, 238, 238, 0.298039) 3px, rgba(238, 238, 238, 0.298039) 5px); background-color: rgb(255, 255, 255);margin: 8px 12px 0 12px"><div class="sixteen wide column" style="padding-bottom:0px;  padding-top: 0px"><div id="piggyoption" style="float:left;cursor:pointer"><div style="float:left;position:relative;top:8px;margin-right:15px"><div id="piggyback" class="ui checkbox" style="position:relative"><input type="checkbox"><label>Piggyback</label></div><div class="sprite info" data-content="Click here to Extend the Federal and all the piggyback Jurisdictions." data-variation="very wide" style="float: left"></div></div></div><div id="showhideoptions" class="disableoption"><div id="bulkeditext" style="float:left;cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:15px">Bulk Edit</p></div>';
 if(canManageExtension) { 
__p+='<div id="extenddates" style="float:left;cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:15px">Extend Dates</p></div><div id="undolastext" style="float:left;cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:15px">Undo Dates</p></div>';
 } 
__p+='</div><div id="addextinstruction" style="float:left;cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:15px">Add Instruction</p></div><div id="taskMove" style="float:left;cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:15px">Move EXT</p></div>';
 if(canManageExtension) { 
__p+='<div id="closeext" style="float:left;cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:15px">Close EXT</p></div>';
 } 
__p+='';
 if(isSingleTask) { 
__p+='<div id="details" style="float:left;cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:15px">EXT Movement</p></div><div id="history" style="float:left;cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:15px">History</p></div>';
 } 
__p+='</div></div><div class="sixteen wide column"><div id="ext-grid"></div></div><div class="sixteen wide column"><div id="saveExtInfo" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Save</div></div></div></div>';
}
return __p;
};

},{"underscore":2}],51:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="ui grid" id="filterview"><div class="row filtersselected"><div class="sixteeen wide column" id="selectedfilters"></div></div><div class="ui divider"></div><div class="row" id="filtersview"></div><div class="ui divider"></div><div class="row"><div class="left floated right aligned sixteen wide column"><div class="ui primary button applyfilters">Apply</div><div class="ui button resetfilters">Reset</div></div></div></div>';
}
return __p;
};

},{"underscore":2}],52:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="row">';
 if(isControlSheet) { 
__p+='<div class="two wide column"><h1 class="ui header moduleheader modulecolor">Jurisdictions</h1></div>';
 } 
__p+='<div class="'+
((__t=( isControlSheet ? 'eight' : 'ten' ))==null?'':__t)+
' wide column"><div class="ui hidden warning message" style="padding: 5px;margin:0" id="divJurisdictionTaskWarningMessage"><i class="close icon" style="top: 0.45rem"></i><div class="header" style="font-size:0.9rem;font-weight:500"><div class="sprite info_alternative" style="float: left;padding: 0;margin: 0px"></div><label style="font-family: \'Roboto Condensed\', sans-serif" id="jurisdictionWarningMessage"></label></div></div></div><div class="right floated right aligned six wide column"><div class="ui label">Jurisdiction Count: <span id="spanjurisdictionCount"></span></div><div class="sprite info" style="display:inline-block;vertical-align: bottom" data-content="The filing dates for the federal and state tax 1040, 1041, 1065, 1120 and 1120s forms have been included in XCM for your convenience. There may be changes made by the IRS or the individual states prior to XCM updating our database. As a result, we strongly suggest that you review the federal and state filing dates and do not rely solely on the dates within XCM." data-variation="large"></div><div id="buttonAddJurisdiction" class="ui small basic button modulebutton modulecolor" style="color: white!important;background-color:#475a78!important" data-content="The task you choose are of multiple task types. Jurisdicitons can only be added in bulk for the same task types. Return to the previous page and choose those tasks with the same task types to bulk add jurisdictions." data-variation="large"><i class="icon plus"></i> Add Jurisdiction</div></div></div><div class="row" style="padding-top:0px"><div id="jurisdiction-grid" class="sixteen wide column"></div></div><div class="sixteen wide column"><div id="buttonJurisdictionSave" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Save</div></div>';
}
return __p;
};

},{"underscore":2}],53:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color: rgb(68,89,120);padding: 7px;padding-bottom:0px;display:'+
((__t=( display() ))==null?'':__t)+
'"><div class="ui right aligned grid"><div class="left floated left aligned six wide column" style="padding:0px"><h3 style="color:white;font-family: museo-300">Add Task Specific Jurisdiction</h3></div><div class="right floated right aligned six wide column" style="padding:0px"><div class="ui divided horizontal list"><a class="item" style="color:white;font-family: museo-500" data-content="coming soon">Tips</a> <a class="item" style="color:white;font-family: museo-500" data-content="coming soon">Video</a> <a class="item" style="color:white;font-family: museo-500" data-content="coming soon">Help</a> <a class="item"><i class="close icon" id="tsjClose" style="color:white"></i></a></div></div></div></div><div class="content" style="background-color: rgb(68,89,120);padding: 7px"><form class="ui form" id="parentFormViewTsjEdit"><div class="ui grid"><div class="sixteen wide column" style="padding-top: 0px;padding-bottom:0px"><div class="inline fields" id="hideforBulkPeDate"><div class="three wide field"><label style="color:white">Period End Date</label></div><div class="four wide field"><label style="color:white">'+
((__t=( moment(model.period_end).year() != 1900 ? moment(model.period_end).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'</label></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Jurisdiction Name</label></div><div class="four wide field"><input data-tsj="state_name" type="text" value="'+
((__t=( model.state_name ))==null?'':__t)+
'"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Form Number</label></div><div class="four wide field"><input type="text" data-tsj="state_code" value="'+
((__t=( model.state_code ))==null?'':__t)+
'"></div></div></div><div class="sixteen wide column" style="padding-left:0px;padding-top:0px"><div class="ui hidden warning message" style="padding: 5px" id="divTSJWarningMessage"><div class="header" style="font-size: 1.0rem"><div class="sprite info_alternative" style="float: left;padding: 0;margin: 0px"></div><label style="font-family: museo-500;color:red" id="TSJWarningMessage"></label></div></div></div><div class="sixteen wide column" style="border:1px solid #fff;padding:0px"><div class="grouped fields" id="radioJurisdictionGroup"><div class="field"><div class="ui three column center aligned grid"><div class="column"><div class="ui radio checkbox"><input type="radio" checked="checked" data-tsj="optionsDueDates" name="optionsDueDates" id="radioConfigureJurisdiction" value="dynamic" tabindex="0" class="hidden"><label style="color:white">Configure Jurisdiction Due-Date<br>based on Period End-Date<i class="info orange medium circle icon" data-content="Choose this option to calculate Due-dates based on Period End-date." data-variation="inverted"></i></label></div></div><div class="column"><div class="ui radio checkbox"><input type="radio" data-tsj="optionsDueDates" name="optionsDueDates" id="radiofixedJurisdiction" value="fixed" tabindex="0" class="hidden"><label style="color:white">Fixed Jurisdiction Due-Date<i class="info orange medium circle icon" data-content="Choose this option to set arbitary due dates not dependent on the Period End-date of the task" data-variation="inverted"></i></label></div></div><div class="column"><div class="ui radio checkbox"><input type="radio" data-tsj="optionsDueDates" name="optionsDueDates" value="none" id="radioNoJurisdiction" tabindex="0" class="hidden"><label style="color:white">No Original Date is required<i class="info orange medium circle icon" data-content="Choose this option for those tasks that you wish to add a deliverable that does not have a due date" data-variation="inverted"></i></label></div></div></div></div></div></div><div class="sixteen wide column" id="configureJurisdiction" style="border:1px solid #fff;margin-top: 5px"><div class="inline fields"><div class="sixteen wide field"><div class="ui checkbox">';
 if(isDueDateEqualToPeriodEndDate) { 
__p+='<input id="checkdueequaltopedate" type="checkbox" checked="checked">';
 } else { 
__p+=' <input id="checkdueequaltopedate" type="checkbox">';
 } 
__p+='<label style="color:white">Original Due-date should be equal to Period End-date</label></div></div></div><div class="inline fields" id="hideorunhide"><div class="sixteen wide field"><div class="one wide field"><label style="color:white">When:</label></div><div class="five wide field"><select id="selectBeforeOrAfter"><option value="BPED">Before Period End-date</option><option value="APED" selected="selected">After Period End-date</option></select></div></div></div><div class="inline fields" id="hideorunhideday"><div class="five wide field"><div class="ui checkbox">';
 if(isSameMontPeriodenddate) { 
__p+='<input id="checkduebasedonDays" type="checkbox" checked="checked">';
 } else { 
__p+=' <input id="checkduebasedonDays" type="checkbox">';
 } 
__p+='<label style="color:white">due date based on days Before/After Period End Date</label></div></div><div class="one wide field"><label style="color:white">Day:</label></div><div class="two wide field"><input type="text" id="idOrignalDueDateOfDay" data-tsj="OrignalDueDateOfDay" value="'+
((__t=( model.OrignalDueDateOfDay === 0 ? '': model.OrignalDueDateOfDay  ))==null?'':__t)+
'" placeholder="1-31" maxlength="2" max="31" min="1" style="width:73px"></div><div class="two wide field" id="hideMonthlabel"><label style="color:white">of Month</label></div><div class="three wide field" id="hideMonthinput"><input type="text" data-tsj="OrignalDueDateOfMonth" value="'+
((__t=( model.OrignalDueDateOfMonth === 0 ? '': model.OrignalDueDateOfMonth ))==null?'':__t)+
'" placeholder="1-15" maxlength="2" max="15" min="1" style="width:73px"> <i class="info orange medium circle icon" data-content="Enter Day and Month to calculate due-date before/after Period end-date. For e.g. 15/3 is the 15th day of the 3rd month before/after Period end-date." data-variation="inverted"></i></div></div><hr><div class="inline fields"><div class="sixteen wide field"><h4 style="color:white">Extension Periods<i class="info orange medium circle icon" data-content="Enter Day and Month to calculate due-date after Orignal Due-date. For e.g. 15/3 is the 15th day of the 3rd month after Due-date." data-variation="inverted"></i></h4></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">First Extension</label></div><div class="one wide field"><label style="color:white">Day:</label></div><div class="two wide field"><input type="text" data-tsj="FirstExtensionDateOnDay" value="'+
((__t=( model.FirstExtensionDateOnDay ))==null?'':__t)+
'" placeholder="1-31" maxlength="2" max="31" min="1" style="width:73px"></div><div class="two wide field"><label style="color:white">of Month</label></div><div class="two wide field"><input type="text" data-tsj="FirstExtensionDateOnMonth" value="'+
((__t=( model.FirstExtensionDateOnMonth ))==null?'':__t)+
'" placeholder="1-15" maxlength="2" max="15" min="1" style="width:73px"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Second Extension</label></div><div class="one wide field"><label style="color:white">Day:</label></div><div class="two wide field"><input type="text" data-tsj="SecondExtensionDateOnDay" value="'+
((__t=( model.SecondExtensionDateOnDay ))==null?'':__t)+
'" placeholder="1-31" maxlength="2" max="31" min="1" style="width:73px"></div><div class="two wide field"><label style="color:white">of Month</label></div><div class="two wide field"><input type="text" data-tsj="SecondExtensionDateOfMonth" value="'+
((__t=( model.SecondExtensionDateOfMonth ))==null?'':__t)+
'" placeholder="1-15" maxlength="2" max="15" min="1" style="width:73px"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Third Extension</label></div><div class="one wide field"><label style="color:white">Day:</label></div><div class="two wide field"><input type="text" data-tsj="ThirdExtensionDateOnDay" value="'+
((__t=( model.ThirdExtensionDateOnDay ))==null?'':__t)+
'" placeholder="1-31" maxlength="2" max="31" min="1" style="width:73px"></div><div class="two wide field"><label style="color:white">of Month</label></div><div class="two wide field"><input type="text" data-tsj="ThirdExtensionDateOfMonth" value="'+
((__t=( model.ThirdExtensionDateOfMonth ))==null?'':__t)+
'" placeholder="1-15" maxlength="2" max="15" min="1" style="width:73px"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Fourth Extension</label></div><div class="one wide field"><label style="color:white">Day:</label></div><div class="two wide field"><input type="text" data-tsj="FourthExtensionDateOnDay" value="'+
((__t=( model.FourthExtensionDateOnDay ))==null?'':__t)+
'" placeholder="1-31" maxlength="2" max="31" min="1" style="width:73px"></div><div class="two wide field"><label style="color:white">of Month</label></div><div class="two wide field"><input type="text" data-tsj="FourthExtensionDateOfMonth" value="'+
((__t=( model.FourthExtensionDateOfMonth ))==null?'':__t)+
'" placeholder="1-15" maxlength="2" max="15" min="1" style="width:73px"></div></div></div><div class="sixteen wide column" id="fixedJurisdiction" style="border:1px solid #fff;margin-top: 5px;display:none"><div class="inline fields"><div class="sixteen wide field"><label style="color:wheat">This option will set arbitary due dates not dependent on the Period End-date of the task, such as; W-2 and 1099 which have a fixed Due-date or with tasks that you scheduled to be completed prior to the Period End-date of the Task.</label></div></div><div class="inline fields"><div class="two wide field"><label style="color:white">Due Date</label></div><div class="five wide field"><input type="text" data-tsj="FixedDueDate" class="date" value="'+
((__t=( moment(model.FixedDueDate).year() != 1900 ? moment(model.FixedDueDate).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'" placeholder="MM/DD/YYYY"><i class="info orange medium circle icon" data-content="Choose a fixed date, which is not dependent on Period End-date." data-variation="inverted"></i></div></div><div class="inline fields"><div class="sixteen wide field"><h4 style="color:white">Extension Periods</h4></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">First Extension</label></div><div class="three wide field"><input type="text" data-tsj="FirstFixedExtension" class="date" value="'+
((__t=( moment(model.FirstFixedExtension).year() != 1900 ? moment(model.FirstFixedExtension).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'" placeholder="MM/DD/YYYY"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Second Extension</label></div><div class="three wide field"><input type="text" data-tsj="SecondFixedExtension" class="date" value="'+
((__t=( moment(model.SecondFixedExtension).year() != 1900 ? moment(model.SecondFixedExtension).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'" placeholder="MM/DD/YYYY"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Third Extension</label></div><div class="three wide field"><input type="text" data-tsj="ThirdFixedExtension" class="date" value="'+
((__t=( moment(model.ThirdFixedExtension).year() != 1900 ? moment(model.ThirdFixedExtension).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'" placeholder="MM/DD/YYYY"></div></div><div class="inline fields"><div class="three wide field"><label style="color:white">Fourth Extension</label></div><div class="three wide field"><input type="text" data-tsj="FourthFixedExtension" class="date" value="'+
((__t=( moment(model.FourthFixedExtension).year() != 1900 ? moment(model.FourthFixedExtension).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'" placeholder="MM/DD/YYYY"></div></div></div><div class="sixteen wide column"><div id="buttonSaveTaskSpecificJur" class="ui tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px; float:right">'+
((__t=( buttonText() ))==null?'':__t)+
'</div></div></div></form></div>';
}
return __p;
};

},{"underscore":2}],54:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header">Move Extension<div class="ui compact error hidden message" style="padding: 2px 5px; margin: 0 0 0 16em"><p>error message here</p></div><div class="ui divided horizontal list" style="float:right"><a class="item" data-content="coming soon">Tips</a> <a class="item" data-content="coming soon">Video</a> <a class="item" data-content="coming soon">Help</a> <a class="item"><i class="close icon"></i></a></div></div><div class="content"><div class="ui form"><div class="ui padded grid"><div class="six wide column"><label>Search Status</label></div><div class="ten wide column"><div class="ui search" id="status"><input placeholder="search..." type="text" class="prompt" name="status"><div class="results" style="height: 200px; overflow-y: scroll"></div></div></div><div class="row" id="usersblock"><div class="six wide column"><label>Search Users</label></div><div class="ten wide column"><div class="ui search" id="users"><input placeholder="search..." type="text" class="prompt" name="users"><div class="results"></div></div></div></div></div></div></div><div class="actions"><div class="ui blue button">Cancel</div><div id="savemove" class="ui big blue label" style="cursor: pointer">Save &nbsp;</div></div>';
}
return __p;
};

},{"underscore":2}],55:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="ui segment" style="padding:0"><div class="ui padded grid"><div class="row"><div class="right floated right aligned six wide column"><div class="ui divided horizontal list"><a class="item" data-content="coming soon">Tips</a> <a class="item" onclick="window.open(window.routemap + \'/xcmhelp/videos/MoveTask.html\', \'Video\', \'top=30,left=250,height=800,width=1500,status=yes,scrollbars=yes,resizable=yes\', \'_blank\')">Video</a> <a class="item" href="#" onclick="window.open(window.routemap + \'/xcmhelp/help/index.html#!Documents/moveatask.htm\', \'Help\', \'top=30,left=250,height=600,width=1000,status=yes,scrollbars=yes,resizable=yes\', \'_blank\')">Help</a> <a href="javascript:void(0)" class="close" style="float:right;margin-left:8px"><svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" enable-background="new 0 0 20 20" viewbox="0 0 20 20" x="0px" y="0px" width="20px" height="20px" xmlns:xml="http://www.w3.org/XML/1998/namespace" xml:space="preserve" version="1.1"><path fill="#be0032" d="M 19.146 17.471 L 11.676 10 l 7.471 -7.471 c 0.463 -0.463 0.463 -1.215 0 -1.679 c -0.463 -0.463 -1.215 -0.463 -1.679 0 L 9.997 8.322 L 2.526 0.851 c -0.463 -0.463 -1.215 -0.463 -1.679 0 c -0.464 0.463 -0.464 1.215 0 1.679 L 8.318 10 l -7.471 7.47 c -0.464 0.465 -0.464 1.215 0 1.68 c 0.464 0.463 1.215 0.463 1.679 0 l 7.471 -7.471 l 7.471 7.471 c 0.464 0.463 1.216 0.463 1.679 0 C 19.609 18.686 19.609 17.936 19.146 17.471 Z"></svg></a></div></div></div><div class="sixteen wide column" style="padding-top: 0px" id="main"><div class="ui top attached tabular menu" id="tabWorkflowState" style="margin-bottom: 0px"><a class="active orange item" data-tab="tabMoveTask" id="tabMoveTaskClick">Move Task</a> <a class="orange item" data-tab="tabopenPoints" id="tabopenPointsClick">Open Points</a> <a class="orange item" data-tab="tabopenChecklists" id="tabopenChecklistsClick">Open Checklists</a> <a class="orange item" data-tab="tabopenSignoffs" id="tabopenSignoffsClick">Signoffs</a></div><div class="ui tab active" data-tab="tabMoveTask" id="tabMoveTask"><div class="row" style="padding-bottom:39px"><div id="bulkEditMove" class="disableoption" style="float:left"><div class="sprite create_extensions" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px;cursor: pointer">Bulk Edit</p></div><div id="osmovetasklabelrow" style="display:none;float:left"><div class="sprite info" style="float:left;position:relative;top:8px" data-variation="small"></div><p style="color: Red;position:relative;top:8px;font-size:0.9rem">Reminder: Make sure you have uploaded the documents before outsourcing the task</p></div></div><div id="moveTaskData"></div><br><div class="sixteen wide column" style="padding-top:0px;padding-bottom:0px"><div class="two column ui grid"><div class="twelve wide column"><div id="movewarningMsg" class="ui hidden warning message" style="padding:5px;width: 650px;float: right"><div class="header" style="font-size:0.9rem;font-weight:500"><label id="movewarningMsglbl">Required Status and To Whom Fields - Complete required fields prior to moving the task.</label></div></div></div><div class="four wide column"><div id="movetask" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right">Save & Move</div></div></div></div></div><div class="ui tab" data-tab="tabopenPoints" id="tabopenPoints"></div><div class="ui tab" data-tab="tabopenChecklists" id="tabopenChecklists"></div><div class="ui tab" data-tab="tabopenSignoffs" id="tabopenSignoffs"><div class="sixteen wide column" id="signoff-grid"><div class="sixteen wide column" style="margin-top: 10px"></div><div id="movesignOffGrid"></div><div class="sixteen wide column" style="padding-top:0px;padding-bottom:0px"><div class="column"><div id="bulksignoffsave" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Save</div></div></div></div></div></div><div class="sixteen wide column" id="moveassembly-page" style="display:none"><div class="sixteen wide column"><div class="ui segment header" style="background-color: rgb(68,89,120);font-size:1em"><label style="color:white">Assembly</label></div></div><div id="moveassemblyGrid"></div><div class="sixteen wide column" style="padding-top:0px;padding-bottom:0px"><div class="column"><div id="assemblynext" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right">Next</div></div></div></div><div class="sixteen wide column" id="moveshipping-page" style="display:none"><div class="sixteen wide column"><div class="ui segment header" style="background-color: rgb(68,89,120);font-size:1em"><label style="color:white">Shipping</label></div></div><div id="moveshippingGrid"></div><div class="sixteen wide column" style="padding-top:0px;padding-bottom:0px"><div class="column"><div id="shippingnext" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right">Done</div></div></div></div><div id="confmovetask" class="ui modal"><div class="header" style="background-color: rgb(68,89,120);padding: 7px;padding-bottom:0px"><div class="ui right aligned grid"><div class="left floated left aligned six wide column" style="padding:0px"></div><div class="right floated right aligned six wide column" style="padding:0px"><div class="ui divided horizontal list"><a class="item"><i id="moveconfclose" class="close icon" style="color:white"></i></a></div></div></div></div><div class="content" style="background-color: rgb(68,89,120)"><div><label style="color:white;font-size:0.9rem;font-weight:500" id="confMsgMovelbl"></label></div></div><div class="actions" style="background-color: rgb(68,89,120)"><div class="two fluid ui buttons"><div id="proceedmove" class="ui approve tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px; float:right; background-color:orange">Proceed</div><div id="cancelmove" class="ui deny tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px;float:right;margin-right: 10px">Cancel</div></div></div></div></div></div><div class="ui segment" id="moveloading" style="display: none"><div class="ui active inverted dimmer" style="position: fixed"><div class="ui text loader"><p>Moving..</p></div></div></div>';
}
return __p;
};

},{"underscore":2}],56:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="ui one column equal divided grid"><div class="column"><h3 class="ui top attached header" style="background: #e6e6e6">Sortable Columns</h3><div class="ui attached segment connected dropzone" style="min-height: 40px"></div><h3 class="ui attached header" style="background: #e6e6e6">Available Columns</h3><div class="ui attached segment connected dragzone"></div></div><div class="right aligned column"><div class="ui primary button" id="applySort">Apply</div><div class="ui button" id="resetSort">Reset</div></div></div>';
}
return __p;
};

},{"underscore":2}],57:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="ui grid" style="padding-bottom: 10px;padding-top: 10px"><div class="twelve wide column"><div id="taskInfo" class="ui basic button" style="background-image:url(\'wwwroot/assets/images/issues.png\') !important;background-repeat: no-repeat !important;background-position: 10px 0px !important;font-size:0.8rem"><i class="icon"></i> Create E-mail</div><div class="ui basic button" style="background-image:url(\'wwwroot/assets/images/issues.png\') !important;background-repeat: no-repeat !important;background-position: 10px 0px !important;font-size:0.8rem"><i class="icon"></i> Questions via Portal</div><div class="ui basic button" style="background-image:url(\'wwwroot/assets/images/issues.png\') !important;background-repeat: no-repeat !important;background-position: 10px 0px !important;font-size:0.8rem"><i class="icon"></i> Remove Questions from Portal</div></div><div class="right aligned four wide column"><div id="taskInfo" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em;font-size:0.8rem"><i class="plus icon"></i> Add Points</div></div></div><div class="row" id="points-grid" style="width: 100%; height:440px; overflow: auto"></div><div class="ui row" style="padding-top:10px"><div class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Save</div></div>';
}
return __p;
};

},{"underscore":2}],58:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='';
 if(isControlSheet) { 
__p+='<div class="two wide column"><h1 class="ui header moduleheader modulecolor">Points</h1></div>';
 } 
__p+='<div class="'+
((__t=( isControlSheet ? 'nine' : 'ten' ))==null?'':__t)+
' wide column modulesubheader modulecolor"><div class="ui secondary pointing menu fourteen wide" id="tabIssuesPoints"><a class="active orange item" data-tab="tabAllPoints" data-typeid="0" id="tabAllPointsClick">All Points <span id="all_filter_count"></span></a> <a class="orange item" data-tab="tabKIPoints" data-typeid="1,2" id="tabKIClick">Knowledge/Instructions <span id="ki_filter_count"></span></a> <a class="orange item" data-tab="tabQuePoints" data-typeid="3" id="tabQueClick">Questions <span id="que_filter_count"></span></a> <a class="orange item" data-tab="tabRPPoints" data-typeid="4" id="tabRPClick">Review Points <span id="rp_filter_count"></span></a> <a class="orange item" data-tab="tabIPPoints" id="tabIPClick" style="display:none">Internal Points <span id="ip_filter_count"></span></a></div></div>';
 if(!isMoveTask) { 
__p+='<div class="right floated right aligned'+
((__t=( isControlSheet ? 'five' : 'six' ))==null?'':__t)+
' wide column">';
 if(hasPriorTasks) { 
__p+='<div class="ui small buttons"><div id="priorpoints" class="ui small basic button modulebutton" style="display:'+
((__t=( prior ))==null?'':__t)+
';color: #425b79!important"><i class="angle left icon"></i> Prior</div><div id="currentpoints" class="ui small basic active button modulebutton" style="display:'+
((__t=( prior ))==null?'':__t)+
';color: #425b79!important">Current <i class="angle right icon"></i></div></div>';
 } 
__p+='<div id="addPointsButton" class="ui small basic button modulebutton modulecolor" style="color: white!important;background-color:#475a78!important"><i class="icon plus"></i> Add Point</div></div>';
 } 
__p+='<div class="ui tab active" data-tab="tabAllPoints" id="tabAllPoints"><div class="ui grid" style="padding-bottom: 10px;padding-top: 10px"><div class="row" style="padding:3px 0;margin: 0 12px 8px 12px;background-image: repeating-linear-gradient(145deg, transparent, transparent 1px, rgba(238, 238, 238, 0.298039) 3px, rgba(238, 238, 238, 0.298039) 5px);background-color: rgb(255, 255, 255);display: '+
((__t=( movetask ))==null?'':__t)+
'"><div id="gridoptions" class="twelve wide column disableoption"><a id="email-link" style="float:left; cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Create E-mail</p></a><div id="questionsViaPortal" data-action="question" style="display:none; cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Questions via Portal</p></div><div id="removequestionsFromPortal" data-action="question" style="display:none; cursor:pointer"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px">Remove Questions from Portal</p></div></div><div class="right aligned four wide column" style="position:relative;top:6px;padding-right:0px"><div id="exportPointsItems" class="sprite export_excel" style="float:right;position:relative" title="Export to CSV"></div></div></div><div class="row"><div id="all-grid" class="sixteen wide column"></div></div><div class="row" style="padding-top:10px"><div class="fourteen wide column"></div><div class="right aligned two wide column"><div id="savepoints" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Save</div></div></div></div></div><div class="ui tab" data-tab="tabIPPoints" id="tabIPPoints"></div>';
}
return __p;
};

},{"underscore":2}],59:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="header" style="background-color:rgb(240,240,240);padding: 10px"><label style="font-family: museo-300">Add Shipping Instructions</label><i class="close icon" style="float:right"></i></div><div class="content" style="padding:3px"><div class="ui two column left aligned grid form" id="taskinfoEditGrid"><div class="six wide column"><label>Delivery Method</label></div><div class="ten wide column"><select class="ui dropdown" id="selectDeliveryMethod" style="height:30px;padding:2px 0"><option value="0">--Select--</option><option value="2">Airborne</option><option value="23">Call Client</option><option value="5">Client Pick Up</option><option value="14">Client Portal</option><option value="7">Courier</option><option value="9">Eastern Connection</option><option value="18">Email</option><option value="22">Express Mail</option><option value="10">FAX</option><option value="3">Federal Express</option><option value="6">Hand Delivered</option><option value="20">In House</option><option value="19">None</option><option value="8">Other</option><option value="24">Postal Service</option><option value="4">UPS</option><option value="21">UPS Next Day</option><option value="1">US Postal Service</option></select></div><div class="six wide column"><label>Mail To</label></div><div class="ten wide column"><div class="ui comments"><textarea id="textatraMailTo" placeholder="Enter here..." style="height:0px"></textarea></div></div><div class="six wide column"><label>Special Instructions</label></div><div class="ten wide column"><div class="ui comments"><textarea id="textareaSpecialInstruction" placeholder="Enter here..." style="height:0px"></textarea></div></div><div class="six wide column"><label>General Shipping Instructions</label></div><div class="ten wide column"><div class="ui comments"><textarea id="textareaGeneralShippingInstruction" placeholder="Enter here..." style="height:0px"></textarea></div></div></div></div><div class="actions"><button class="ui button">Cancel</button> <button class="ui primary button" id="buttonSaveShippingInstruction">Save</button></div>';
}
return __p;
};

},{"underscore":2}],60:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='';
 if(isControlSheet) { 
__p+='<div class="four wide column"><h1 class="ui header moduleheader modulecolor">Shipping</h1></div>';
 } 
__p+='<div class="right floated right aligned '+
((__t=( isControlSheet ? 'six' : 'four' ))==null?'':__t)+
' wide column"><div class="ui small buttons"><div id="priorshipping" class="ui basic button modulebutton" style="color: #425b79!important"><i class="angle left icon"></i> Prior</div><div id="currentshipping" class="ui basic active button modulebutton" style="color: #425b79!important">Current <i class="angle right icon"></i></div></div></div><div class="'+
((__t=( isControlSheet ? 'sixteen' : 'twelve' ))==null?'':__t)+
' wide column" id="shippingInstructionSection"><div class="ui two column grid label" style="background-color:aliceblue;color: rgb(72,72,72);font-size:0.8rem;letter-spacing:0.9px;font-family: museo-100;padding:0px"><div id="GeneralShipping_instruction" class="column" style="padding:5px;font-size:0.9rem"></div><div id="SpecialShipping_instruction" class="column" style="padding:5px;font-size:0.9rem"></div><div id="mailToShipping_instruction" class="column" style="padding:5px;font-size:0.9rem"></div><div id="deliveryMethodShipping_instruction" class="column" style="padding:5px;font-size:0.9rem"></div></div></div><div class="sixteen wide column" style="padding-bottom:0px;padding-top:6px"><div id="completestatusMsg" class="ui hidden warning message" style="padding:8px;margin-bottom:0"><div class="header" style="font-size:0.9rem;font-weight:500"><label id="completestatusMsglbl" style="display:none">Required: To move Tasks to Completed, the Status of all Jurisdictions/Deliverables must be Completed using the Date Delivered field below.</label><label id="changestatusMsglbl">Use the Date Delivered Field to change the status of the jurisdiction.</label></div></div><div id="successMsg" class="ui hidden success message" style="padding:5px"><i id="successClose" class="close icon" style="top:0.45rem"></i><div class="header" style="font-size:0.9rem;font-weight:500"><label id="successMsglbl">Task is Moved to Completed</label></div></div><div id="warningMsg" class="ui hidden warning message" style="padding:5px"><i id="warningClose" class="close icon" style="top:0.45rem"></i><div class="header" style="font-size:0.9rem;font-weight:500"><label id="warningMsglbl"></label></div></div></div><div class="row" id="shipping_actions_row" style="background-image: repeating-linear-gradient(145deg, transparent, transparent 1px, rgba(238, 238, 238, 0.298039) 3px, rgba(238, 238, 238, 0.298039) 5px); background-color: rgb(255, 255, 255);margin: 8px 12px 0 12px"><div class="sixteen wide column" style="padding-bottom:0px;  padding-top: 0px"><div id="buttonshippingbulkedit" class="disableoption" style="float:left"><div class="sprite create_extensions" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px;cursor: pointer">Bulk Edit</p></div><div id="buttonShippingInstruction" style="float:left"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px;cursor: pointer">Task Shipping Instructions</p></div><div id="copyfromPrior" class="disableoption" style="float:left"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px;cursor: pointer">Copy From Prior</p></div><div id="buttonClearHistory" class="disableoption" style="float:left"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px;cursor: pointer">Clear History</p></div><div id="completeeFile" class="disableoption" style="float:left"><div class="sprite task_issues" style="float:left;position:relative;top:8px"></div><p style="float:left;position:relative;top:8px;margin-right:25px;cursor: pointer">Eliminate eFile Steps <i class="info orange medium circle icon" data-content="If you wish to bypass the entire efile process, Click on the Eliminate eFile Steps, which will change the Deliverable status to Complete, and then click on the Move to Completed button."></i></p></div></div></div><div class="row" style="padding-top:10px;padding-bottom:0px"><div id="shipping-grid" class="sixteen wide column"></div></div><div class="sixteen wide column"><div class="column"><div id="movetoCompleted" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right">Move to Completed</div><div id="shippingsave" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Save</div></div></div><div id="confshipping" class="ui modal"><div class="header" style="background-color: rgb(68,89,120);padding: 7px;padding-bottom:0px"><div class="ui right aligned grid"><div class="left floated left aligned six wide column" style="padding:0px"></div><div class="right floated right aligned six wide column" style="padding:0px"><div class="ui divided horizontal list"><a class="item"><i class="close icon" style="color:white"></i></a></div></div></div></div><div class="content" style="background-color: rgb(68,89,120)"><div><label style="color:white;font-size:0.9rem;font-weight:500" id="confMsglbl"></label></div></div><div class="actions" style="background-color: rgb(68,89,120)"><div class="two fluid ui buttons"><div id="buttonproceed" class="ui approve tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px; float:right; background-color:orange">Proceed</div><div id="buttoncancel" class="ui deny tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px;float:right;margin-right: 10px">Cancel</div></div></div></div><div id="deleteshippingModal" class="ui modal"><div class="header" style="background-color: rgb(68,89,120);padding: 7px;padding-bottom:0px"><div class="ui right aligned grid"><div class="left floated left aligned six wide column" style="padding:0px"></div><div class="right floated right aligned six wide column" style="padding:0px"><div class="ui divided horizontal list"><a class="item"><i class="close icon" style="color:white"></i></a></div></div></div></div><div class="content" style="background-color: rgb(68,89,120)"><div><label style="color:white;font-size:0.9rem;font-weight:500" id="deleteMsglbl"></label></div></div><div class="actions" style="background-color: rgb(68,89,120)"><div class="two fluid ui buttons"><div class="ui approve tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px; float:right; background-color:orange">Proceed</div><div class="ui deny tiny primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; width:100px;float:right;margin-right: 10px">Cancel</div></div></div></div>';
}
return __p;
};

},{"underscore":2}],61:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='';
 if(isControlSheet) { 
__p+='<div class="sixteen wide column"><h1 class="ui header moduleheader modulecolor">SignOffs</h1></div>';
 } 
__p+='<div class="sixteen wide column"><form class="ui form"><table class="ui table" id="tableSignoff"><thead><tr><th class="one wide"></th><th class="two wide">Name</th><th class="two wide">By</th><th class="two wide">Date</th><th class="two wide">Comments</th><th id="thPrompt" class="one wide">Prompt</th><th class="two wide">Required Name</th><th class="two wide">Required Date</th><th class="two wide">Comments</th></tr></thead><tbody></tbody></table></form></div><div class="sixteen wide column"><button id="buttonSignoffSave" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none">Save</button></div>';
}
return __p;
};

},{"underscore":2}],62:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<td class="single line"><div class="ui checkbox checkboxSignoff">';
 if(model.signOffBy !== "" && (moment(model.signOffOn).year() !== 1900 && moment(model.signOffOn).year() !== 0001)) { 
__p+='<input class="checkSignoff" type="checkbox" style="height:30px" checked="checked">';
 } else { 
__p+=' <input class="checkSignoff" type="checkbox" style="height:30px">';
 } 
__p+='<label></label></div></td><td class="single line"><label>'+
((__t=( model.name ))==null?'':__t)+
'</label></td><td class="single line"><label id="labelSignoffBy">'+
((__t=( model.signOffBy ))==null?'':__t)+
'</label></td><td class="single line"><div class="ui input"><input id="dateSignoffOn" type="text" class="date" placeholder="MM/DD/YYYY" style="height:30px" value="'+
((__t=( moment(model.signOffOn).year() != 1900 && moment(model.signOffOn).year() !== 0001 ? moment(model.signOffOn).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'"></div></td><td class="single line"><div class="ui input"><input data-signnoff="signOffComments" type="text" style="height:30px" title="'+
((__t=( model.signOffComments ))==null?'':__t)+
'" value="'+
((__t=( model.signOffComments ))==null?'':__t)+
'"></div></td>';
 if(model.task_id !== 0) { 
__p+='<td class="single line" id="tdPrompt"><div class="ui checkbox checkboxRequiredSignoff">';
 if(model.prompt == '') { 
__p+='<input type="checkbox" style="height:30px" disabled="disabled">';
 } else if (model.promptChecked) { 
__p+=' <input type="checkbox" style="height:30px" checked="checked">';
 } else { 
__p+=' <input type="checkbox" style="height:30px">';
 } 
__p+='<label>'+
((__t=( model.prompt ))==null?'':__t)+
'</label></div></td>';
 } 
__p+='<td class="single line"><div class="ui search"><input class="prompt" type="text" value="'+
((__t=( model.requiredSignOffBy ))==null?'':__t)+
'" placeholder="Search..." style="height:30px"><div class="results"></div></div></td><td class="single line"><div class="ui input"><input type="text" class="date" placeholder="MM/DD/YYYY" style="height:30px" value="'+
((__t=( moment(model.requiredSignOffOn).year() != 1900 &&  moment(model.requiredSignOffOn).year() != 0001 ? moment(model.requiredSignOffOn).format('MM/DD/YYYY') : '' ))==null?'':__t)+
'"></div></td><td class="single line"><div class="ui input"><input data-signnoff="requiredSignOffComments" type="text" style="height:30px" title="'+
((__t=( model.requiredSignOffComments ))==null?'':__t)+
'" value="'+
((__t=( model.requiredSignOffComments ))==null?'':__t)+
'"></div></td>';
}
return __p;
};

},{"underscore":2}],63:[function(require,module,exports){
var _ = require('underscore');
module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='<div class="ui grid"><div class="row"><div class="right floated right aligned six wide column"><div class="ui divided horizontal list"><a class="item" data-content="coming soon">Tips</a> <a class="item" href="#" onclick="window.open(window.routemap + \'/xcmhelp/videos/taskinfo.html\', \'Video\', \'top=30,left=250,height=600,width=1500,status=yes,scrollbars=yes,resizable=yes\', \'_blank\')">Video</a> <a class="item" data-content="coming soon">Help</a> <a href="javascript:void(0)" class="close" style="float:right;margin-left:8px"><svg id="taskinfoClose" xmlns="http://www.w3.org/2000/svg" id="Layer_1" enable-background="new 0 0 20 20" viewbox="0 0 20 20" x="0px" y="0px" width="20px" height="20px" xmlns:xml="http://www.w3.org/XML/1998/namespace" xml:space="preserve" version="1.1"><path fill="#be0032" d="M 19.146 17.471 L 11.676 10 l 7.471 -7.471 c 0.463 -0.463 0.463 -1.215 0 -1.679 c -0.463 -0.463 -1.215 -0.463 -1.679 0 L 9.997 8.322 L 2.526 0.851 c -0.463 -0.463 -1.215 -0.463 -1.679 0 c -0.464 0.463 -0.464 1.215 0 1.679 L 8.318 10 l -7.471 7.47 c -0.464 0.465 -0.464 1.215 0 1.68 c 0.464 0.463 1.215 0.463 1.679 0 l 7.471 -7.471 l 7.471 7.471 c 0.464 0.463 1.216 0.463 1.679 0 C 19.609 18.686 19.609 17.936 19.146 17.471 Z"></svg></a></div></div></div><div class="sixteen wide column" style="padding-top: 0px"><div class="ui large secondary pointing menu" id="tabTaskInfo" style="margin-bottom: 0px"><div class="header item">Task Information</div><a class="orange item" data-tab="tabJurisdiction" id="tabJurisdictionClick" style="color:rgb(90,111,138)">Jurisdictions</a> <a class="orange item" data-tab="tabAssembly" id="tabAssemblyClick" style="color:rgb(90,111,138)">Assembly</a> <a class="orange item" data-tab="tabShipping" id="tabShippingClick" style="color:rgb(90,111,138)">Shipping</a> <a class="orange item" data-tab="tabeFile" id="tabeFileClick" style="color:rgb(90,111,138)">eFile</a> <a class="orange item" data-tab="tabSignOff" id="tabSignoffClick" style="color:rgb(90,111,138)">SignOff</a> <a class="orange item" data-tab="tabEngagement" id="tabEngagementClick" style="color:rgb(90,111,138)">Engagement</a> <a class="orange item" data-tab="tabExtension" id="tabExtensionClick" style="color:rgb(90,111,138)">Extension</a><div id="taskstatus" class="item" style="float: right;font-size: small;font-style: italic;color: #AD8181"></div></div><div class="ui tab" data-tab="tabJurisdiction" id="tabJurisdiction"></div><div class="ui tab" data-tab="tabAssembly" id="tabAssembly"></div><div class="ui tab" data-tab="tabShipping" id="tabShipping"></div><div class="ui tab" data-tab="tabeFile" id="tabeFile"></div><div class="ui tab" data-tab="tabSignOff" id="tabSignOff"><div id="taskinfowarningMsg" class="ui hidden warning message" style="padding:5px;width: 431px;float: left"><div class="header" style="font-size:0.9rem;font-weight:500"><label id="taskinfowarningMsglbl">SignOffs cannot be open for multiple task types at the same time.</label></div></div></div><div class="ui tab" data-tab="tabEngagement" id="tabEngagement"></div><div class="ui tab" data-tab="tabExtension" id="tabExtension"></div></div></div>';
}
return __p;
};

},{"underscore":2}],64:[function(require,module,exports){
var LayoutView = require('../../views/layout'),
    ItemView = require('../../views/item'),
    Reqre = require('../../config/reqres'),
    Events = require('../../config/events'),
    Commands = require('../../config/commands'),
    Views = {};

Views.ProfileOption = ItemView.extend({
    el: 'div#profilelnk',
    template: false,
    initialize: function () {
        //console.log(this);
        this.listenTo('dom:refresh', function () {
            $('somedd').dropdown();
        }, this);
    },
    onRender: function () {
        //console.log('render');
        //this.$('.ui.dropdown').dropdown();
    },
    onDomRefresh: function () {
        //console.log('dom refresh');
        //this.$el.dropdown();
    }
});

module.exports = Views;

},{"../../config/commands":67,"../../config/events":68,"../../config/reqres":69,"../../views/item":83,"../../views/layout":84}],65:[function(require,module,exports){

var _ = require('underscore'),
    BaseController = require('../../controllers/application'),
    Commands = require('../../config/commands'),
    LoadingView = require('./view');

module.exports = BaseController.extend({
    initialize: function (options) {
        var config, loadingView, view;
        view = options.view;
        config = options.config;

        config = _.isBoolean(config) ? {} : config;
        _.defaults(config, {
            loadingType: 'spinner',
            entities: this.getEntities(view),
            debug: false
        });

        switch (config.loadingType) {
            case 'spinner':
                loadingView = this.getLoadingView();
                this.show(loadingView);
        }
        return this.showActualView(view, loadingView, config);
    },
    showActualView: function (actualView, loadingView, config) {
        return Commands.execute('when:fetched', config.entities, (function (context) {
            return function () {
                switch (config.loadingType) {
                    case 'spinner':
                        if (context.region.currentView !== loadingView) {
                            return actualView.close();
                        }
                }
                if (!config.debug) {
                    //return setTimeout(function () {
                    //    context.show(actualView)
                    //}, 1000);
                    return context.show(actualView);
                }
            }
        }(this)));
    },
    getLoadingView: function () {
        return new LoadingView();
    },
    getEntities: function (view) {
        return _.chain(view).pick('model', 'collection').toArray().compact().value();
    }
});
},{"../../config/commands":67,"../../controllers/application":71,"./view":66,"underscore":2}],66:[function(require,module,exports){

var _ = require('underscore'),
    BaseItemView = require('../../views/item');

module.exports = BaseItemView.extend({
    template: false,
    className: 'ui',
    getOptions: function () {
        return {
            lines: 10,
            length: 5,
            width: 2.0,
            radius: 6,
            corners: 1,
            rotate: 9,
            direction: 1,
            color: '#000',
            speed: 1,
            trail: 60,
            shadow: false,
            hwaccel: true,
            className: 'spinner',
            zIndex: 2e9,
            top: 'auto',
            left: 'auto'
        };
    },
    onShow: function () {
        var options = this.getOptions();
        this.$el.css({
            'width': '100px',
            // 'height': '100px',
            'margin': '0 auto'
        });
        return this.$el.spin(options);
    },
    onClose: function () {
        return this.$el.spin(false);
    }
});
},{"../../views/item":83,"underscore":2}],67:[function(require,module,exports){
module.exports = new Backbone.Wreqr.Commands();
},{}],68:[function(require,module,exports){
module.exports = new Backbone.Wreqr.EventAggregator();
},{}],69:[function(require,module,exports){
module.exports = new Backbone.Wreqr.RequestResponse();
},{}],70:[function(require,module,exports){
(function (Backbone) {
    var _sync = Backbone.sync;
    return Backbone.sync = function (method, entity, options) {
        var sync;
        if (options == null) {
            options = {};
        }
        sync = _sync(method, entity, options);
        if (!entity._fetch && method === "read") {
            entity._fetch = sync;
        }
        return sync;
    };
})(Backbone);
},{}],71:[function(require,module,exports){
var Reqres = require('../config/reqres'),
    Commands = require('../config/commands');

module.exports = Marionette.Object.extend({
    constructor: function (options) {
        var options = options || {};
        this.region = options.region || Reqres.request('default:region');
        return Marionette.Controller.prototype.constructor.call(this, options);
    },
    getMainView: function () {
        return this._mainView;
    },
    setMainView: function (view) {
        if (this._mainView) {
            return;
        }
        this._mainView = view;
        return this.listenTo(view, 'close', this.close);
    },
    _manageView: function (view, options) {
        if (options.loading) {
            return Commands.execute('show:loading', view, options);
        } else {
            return options.region.show(view);
        }
    },
    show: function (view, options) {
        var options = options || {};
        _.defaults(options, {
            loading: false,
            region: this.region
        });
        view = view.getMainView ? view.getMainView : view;
        if (!view) {
            throw new Error('No View instance or not a view instance');
        }
        this.setMainView(view);
        return this._manageView(view, options)
    },
    close: function () {
        return Marionette.Object.prototype.close.apply(this, arguments);
    }
});
},{"../config/commands":67,"../config/reqres":69}],72:[function(require,module,exports){
//var _ = require('underscore'),
//    Backbone = require('backbone');

module.exports = Backbone.Collection.extend({
    constructor: function (options) {
        var args = Array.prototype.slice.apply(this, arguments);
        this.options = options || {};
        return Backbone.Collection.apply(this, args);
    },
    splice: function (index, howMany) {
        var args = _.toArray(arguments).slice(2).concat({ at: index }),
            removed = this.models.slice(index, index + howMany);
        this.remove(removed).add.apply(this, args);
        return removed;
    },
});
},{}],73:[function(require,module,exports){

module.exports = Backbone.Model.extend({
    destroy: function (options) {
        return Backbone.Model.prototype.destroy.call(this, options)
    },
    save: function (data, options) {
        return Backbone.Model.prototype.save.call(this, data, options);
    },
    onSuccess: function () {
        return;
    }
});
},{}],74:[function(require,module,exports){
// Backbone.Picky, v0.2.0
// Copyright (c)2013 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
// http://github.com/derickbailey/backbone.picky

Backbone.Picky = (function (Backbone, _) {
    var Picky = {};

    // Picky.SingleSelect
    // ------------------
    // A single-select mixin for Backbone.Collection, allowing a single
    // model to be selected within a collection. Selection of another
    // model within the collection causes the previous model to be
    // deselected.

    Picky.SingleSelect = function (collection) {
        this.collection = collection;
    };

    _.extend(Picky.SingleSelect.prototype, {

        // Select a model, deselecting any previously
        // selected model
        select: function (model) {
            if (model && this.selected === model) { return; }

            this.deselect();

            this.selected = model;
            this.selected.select();
            this.trigger("select:one", model);
        },

        // Deselect a model, resulting in no model
        // being selected
        deselect: function (model) {
            if (!this.selected) { return; }

            model = model || this.selected;
            if (this.selected !== model) { return; }

            this.selected.deselect();
            this.trigger("deselect:one", this.selected);
            delete this.selected;
        }

    });

    // Picky.MultiSelect
    // -----------------
    // A mult-select mixin for Backbone.Collection, allowing a collection to
    // have multiple items selected, including `selectAll` and `selectNone`
    // capabilities.

    Picky.MultiSelect = function (collection) {
        this.collection = collection;
        this.selected = {};
    };

    _.extend(Picky.MultiSelect.prototype, {

        // Select a specified model, make sure the
        // model knows it's selected, and hold on to
        // the selected model.
        select: function (model) {
            if (this.selected[model.cid]) { return; }

            this.selected[model.cid] = model;
            model.select();
            calculateSelectedLength(this);
        },

        // Deselect a specified model, make sure the
        // model knows it has been deselected, and remove
        // the model from the selected list.
        deselect: function (model) {
            if (!this.selected[model.cid]) { return; }

            delete this.selected[model.cid];
            model.deselect();
            calculateSelectedLength(this);
        },

        // Select all models in this collection
        selectAll: function () {
            this.each(function (model) { model.select(); });
            calculateSelectedLength(this);
        },

        // Deselect all models in this collection
        selectNone: function () {
            if (this.selectedLength === 0) { return; }
            this.each(function (model) { model.deselect(); });
            calculateSelectedLength(this);
        },

        // Toggle select all / none. If some are selected, it
        // will select all. If all are selected, it will select 
        // none. If none are selected, it will select all.
        toggleSelectAll: function () {
            if (this.selectedLength === this.length) {
                this.selectNone();
            } else {
                this.selectAll();
            }
        }
    });

    // Picky.Selectable
    // ----------------
    // A selectable mixin for Backbone.Model, allowing a model to be selected,
    // enabling it to work with Picky.MultiSelect or on it's own

    Picky.Selectable = function (model) {
        this.model = model;
    };

    _.extend(Picky.Selectable.prototype, {

        // Select this model, and tell our
        // collection that we're selected
        select: function () {
            if (this.selected) { return; }

            this.selected = true;
            this.trigger("selected", this);

            if (this.collection) {
                this.collection.select(this);
            }
        },

        // Deselect this model, and tell our
        // collection that we're deselected
        deselect: function () {
            if (!this.selected) { return; }

            this.selected = false;
            this.trigger("deselected", this);

            if (this.collection) {
                this.collection.deselect(this);
            }
        },

        // Change selected to the opposite of what
        // it currently is
        toggleSelected: function () {
            if (this.selected) {
                this.deselect();
            } else {
                this.select();
            }
        }
    });

    // Helper Methods
    // --------------

    // Calculate the number of selected items in a collection
    // and update the collection with that length. Trigger events
    // from the collection based on the number of selected items.
    var calculateSelectedLength = function (collection) {
        collection.selectedLength = _.size(collection.selected);

        var selectedLength = collection.selectedLength;
        var length = collection.length;

        if (selectedLength === length) {
            collection.trigger("select:all", collection);
            return;
        }

        if (selectedLength === 0) {
            collection.trigger("select:none", collection);
            return;
        }

        if (selectedLength > 0 && selectedLength < length) {
            collection.trigger("select:some", collection);
            return;
        }
    };

    return Picky;
})(Backbone, _);
},{}],75:[function(require,module,exports){
/**
 * Copyright (c) 2011-2014 Felix Gnass
 * Licensed under the MIT license
 */
(function (root, factory) {

    /* CommonJS */
    if (typeof exports == 'object') module.exports = factory()

        /* AMD module */
    else if (typeof define == 'function' && define.amd) define(factory)

        /* Browser global */
    else root.Spinner = factory()
}
(this, function () {
    "use strict";

    var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */
      , animations = {} /* Animation rules keyed by their name */
      , useCssAnimations /* Whether to use CSS animations or setTimeout */
      , sheet /* A stylesheet to hold the @keyframe or VML rules. */

    /**
     * Utility function to create elements. If no tag name is given,
     * a DIV is created. Optionally properties can be passed.
     */
    function createEl(tag, prop) {
        var el = document.createElement(tag || 'div')
          , n

        for (n in prop) el[n] = prop[n]
        return el
    }

    /**
     * Appends children and returns the parent.
     */
    function ins(parent /* child1, child2, ...*/) {
        for (var i = 1, n = arguments.length; i < n; i++)
            parent.appendChild(arguments[i])

        return parent
    }

    /**
     * Creates an opacity keyframe animation rule and returns its name.
     * Since most mobile Webkits have timing issues with animation-delay,
     * we create separate rules for each line/segment.
     */
    function addAnimation(alpha, trail, i, lines) {
        var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-')
          , start = 0.01 + i / lines * 100
          , z = Math.max(1 - (1 - alpha) / trail * (100 - start), alpha)
          , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()
          , pre = prefix && '-' + prefix + '-' || ''

        if (!animations[name]) {
            sheet.insertRule(
              '@' + pre + 'keyframes ' + name + '{' +
              '0%{opacity:' + z + '}' +
              start + '%{opacity:' + alpha + '}' +
              (start + 0.01) + '%{opacity:1}' +
              (start + trail) % 100 + '%{opacity:' + alpha + '}' +
              '100%{opacity:' + z + '}' +
              '}', sheet.cssRules.length)

            animations[name] = 1
        }

        return name
    }

    /**
     * Tries various vendor prefixes and returns the first supported property.
     */
    function vendor(el, prop) {
        var s = el.style
          , pp
          , i

        prop = prop.charAt(0).toUpperCase() + prop.slice(1)
        for (i = 0; i < prefixes.length; i++) {
            pp = prefixes[i] + prop
            if (s[pp] !== undefined) return pp
        }
        if (s[prop] !== undefined) return prop
    }

    /**
     * Sets multiple style properties at once.
     */
    function css(el, prop) {
        for (var n in prop)
            el.style[vendor(el, n) || n] = prop[n]

        return el
    }

    /**
     * Fills in default values.
     */
    function merge(obj) {
        for (var i = 1; i < arguments.length; i++) {
            var def = arguments[i]
            for (var n in def)
                if (obj[n] === undefined) obj[n] = def[n]
        }
        return obj
    }

    /**
     * Returns the line color from the given string or array.
     */
    function getColor(color, idx) {
        return typeof color == 'string' ? color : color[idx % color.length]
    }

    // Built-in defaults

    var defaults = {
        lines: 12,            // The number of lines to draw
        length: 7,            // The length of each line
        width: 5,             // The line thickness
        radius: 10,           // The radius of the inner circle
        scale: 1.0,           // Scales overall size of the spinner
        rotate: 0,            // Rotation offset
        corners: 1,           // Roundness (0..1)
        color: '#000',        // #rgb or #rrggbb
        direction: 1,         // 1: clockwise, -1: counterclockwise
        speed: 1,             // Rounds per second
        trail: 100,           // Afterglow percentage
        opacity: 1 / 4,         // Opacity of the lines
        fps: 20,              // Frames per second when using setTimeout()
        zIndex: 2e9,          // Use a high z-index by default
        className: 'spinner', // CSS class to assign to the element
        top: '50%',           // center vertically
        left: '50%',          // center horizontally
        position: 'absolute'  // element position
    }

    /** The constructor */
    function Spinner(o) {
        this.opts = merge(o || {}, Spinner.defaults, defaults)
    }

    // Global defaults that override the built-ins:
    Spinner.defaults = {}

    merge(Spinner.prototype, {

        /**
         * Adds the spinner to the given target element. If this instance is already
         * spinning, it is automatically removed from its previous target b calling
         * stop() internally.
         */
        spin: function (target) {
            this.stop()

            var self = this
              , o = self.opts
              , el = self.el = css(createEl(0, { className: o.className }), { position: o.position, width: 0, zIndex: o.zIndex })

            css(el, {
                left: o.left,
                top: o.top
            })

            if (target) {
                target.insertBefore(el, target.firstChild || null)
            }

            el.setAttribute('role', 'progressbar')
            self.lines(el, self.opts)

            if (!useCssAnimations) {
                // No CSS animation support, use setTimeout() instead
                var i = 0
                  , start = (o.lines - 1) * (1 - o.direction) / 2
                  , alpha
                  , fps = o.fps
                  , f = fps / o.speed
                  , ostep = (1 - o.opacity) / (f * o.trail / 100)
                  , astep = f / o.lines

                ; (function anim() {
                    i++;
                    for (var j = 0; j < o.lines; j++) {
                        alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)

                        self.opacity(el, j * o.direction + start, alpha, o)
                    }
                    self.timeout = self.el && setTimeout(anim, ~~(1000 / fps))
                })()
            }
            return self
        },

        /**
         * Stops and removes the Spinner.
         */
        stop: function () {
            var el = this.el
            if (el) {
                clearTimeout(this.timeout)
                if (el.parentNode) el.parentNode.removeChild(el)
                this.el = undefined
            }
            return this
        },

        /**
         * Internal method that draws the individual lines. Will be overwritten
         * in VML fallback mode below.
         */
        lines: function (el, o) {
            var i = 0
              , start = (o.lines - 1) * (1 - o.direction) / 2
              , seg

            function fill(color, shadow) {
                return css(createEl(), {
                    position: 'absolute',
                    width: o.scale * (o.length + o.width) + 'px',
                    height: o.scale * o.width + 'px',
                    background: color,
                    boxShadow: shadow,
                    transformOrigin: 'left',
                    transform: 'rotate(' + ~~(360 / o.lines * i + o.rotate) + 'deg) translate(' + o.scale * o.radius + 'px' + ',0)',
                    borderRadius: (o.corners * o.scale * o.width >> 1) + 'px'
                })
            }

            for (; i < o.lines; i++) {
                seg = css(createEl(), {
                    position: 'absolute',
                    top: 1 + ~(o.scale * o.width / 2) + 'px',
                    transform: o.hwaccel ? 'translate3d(0,0,0)' : '',
                    opacity: o.opacity,
                    animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'
                })

                if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), { top: 2 + 'px' }))
                ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))
            }
            return el
        },

        /**
         * Internal method that adjusts the opacity of a single line.
         * Will be overwritten in VML fallback mode below.
         */
        opacity: function (el, i, val) {
            if (i < el.childNodes.length) el.childNodes[i].style.opacity = val
        }

    })


    function initVML() {

        /* Utility function to create a VML tag */
        function vml(tag, attr) {
            return createEl('<' + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', attr)
        }

        // No CSS transforms but VML support, add a CSS rule for VML elements:
        sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')

        Spinner.prototype.lines = function (el, o) {
            var r = o.scale * (o.length + o.width)
              , s = o.scale * 2 * r

            function grp() {
                return css(
                  vml('group', {
                      coordsize: s + ' ' + s,
                      coordorigin: -r + ' ' + -r
                  }),
                  { width: s, height: s }
                )
            }

            var margin = -(o.width + o.length) * o.scale * 2 + 'px'
              , g = css(grp(), { position: 'absolute', top: margin, left: margin })
              , i

            function seg(i, dx, filter) {
                ins(g,
                  ins(css(grp(), { rotation: 360 / o.lines * i + 'deg', left: ~~dx }),
                    ins(css(vml('roundrect', { arcsize: o.corners }), {
                        width: r,
                        height: o.scale * o.width,
                        left: o.scale * o.radius,
                        top: -o.scale * o.width >> 1,
                        filter: filter
                    }),
                      vml('fill', { color: getColor(o.color, i), opacity: o.opacity }),
                      vml('stroke', { opacity: 0 }) // transparent stroke to fix color bleeding upon opacity change
                    )
                  )
                )
            }

            if (o.shadow)
                for (i = 1; i <= o.lines; i++)
                    seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')

            for (i = 1; i <= o.lines; i++) seg(i)
            return ins(el, g)
        }

        Spinner.prototype.opacity = function (el, i, val, o) {
            var c = el.firstChild
            o = o.shadow && o.lines || 0
            if (c && i + o < c.childNodes.length) {
                c = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild
                if (c) c.opacity = val
            }
        }
    }

    if (typeof document !== 'undefined') {
        sheet = (function () {
            var el = createEl('style', { type: 'text/css' })
            ins(document.getElementsByTagName('head')[0], el)
            return el.sheet || el.styleSheet
        }())

        var probe = css(createEl('group'), { behavior: 'url(#default#VML)' })

        if (!vendor(probe, 'transform') && probe.adj) initVML()
        else useCssAnimations = vendor(probe, 'animation')
    }

    return Spinner

}));

},{}],76:[function(require,module,exports){
var sessionPollInterval = 60000,
    sessionExpirationMinutes = 20,
    sessionWarningMinutes = 5,
    sessionIntervalID, sessionLastActivity;

function sessionClearInterval() {
    clearInterval(sessionIntervalID);
}

function sessionLogout() {
    window.localStorage.removeItem('longlive');
    $('form#logoutform').submit();
}

function sessionInterval() {
    var now = new Date(),
        diff = now - sessionLastActivity,
        diffMins = (diff / 1000 / 60),
        message, active;
    
    message = 'Your session will expire in ' + (sessionExpirationMinutes - sessionWarningMinutes) +
        ' minutes (as of ' + now.toTimeString() + '), press OK to remain logged in ' +
        'or press Cancel to log off \n If you logged off any changes you are doing will be lost.';

    if (diffMins >= sessionWarningMinutes) {
        sessionClearInterval();
        active = confirm(message);

        if (active === true) {
            now = new Date();
            diff = now - sessionLastActivity;
            diffMins = (diff / 1000 / 60);

            if (diffMins > sessionExpirationMinutes) {
                sessionLogout();
            } else {
                initializeSession();
                sessionSetInterval();
                sessionLastActivity = new Date();
            }
        } else {
            sessionLogout();
        }
    }
}

function sessionSetInterval() {
    sessionIntervalID = setInterval(sessionInterval, 60000);
}

function sessionKeyPressed(ed, ev) {
    sessionLastActivity = new Date();
}

function initializeSession() {
    sessionLastActivity = new Date();

    $.ajax({
        method: 'post',
        url: window.routemap + 'account/status?' + Date.now(),
        success: function (data) {
            window.localStorage['longlive'] = JSON.stringify(data);
            sessionExpirationMinutes = data.actualExpirtaionSpan;
            sessionWarningMinutes = data.expirationAlert

            sessionSetInterval();
        },
        error: function (resp) {
            
        }
    });
    $(document).bind('keypress.session', function (ed, ev) {
        sessionKeyPressed(ed, ev);
    });
}

module.exports = initializeSession.call();
},{}],77:[function(require,module,exports){
module.exports = Marionette.Region.extend({
	el: 'div#dialogPanel',
	onShow: function (view) {
		this.$el.addClass('visible active');
		// view.$el.modal('setting', 'closable', false)
		// view.$el.modal('setting', { dimmerSettings : { opacity:0.7 } });
		// view.$el.modal('toggle', { closable: false });
		// view.$el.modal('setting', 'autofocus', false);
		// view.$el.modal('show');
		view.$el.modal({
			closable: false,
			autofocus: false,
			dimmerSettings: {
				opacity: 0.5
			}
		}).modal('show');
	},
	onClose: function () {
		this.$el.removeClass('visible active')
	}
});
},{}],78:[function(require,module,exports){

module.exports = Marionette.Region.extend({
    hasRootView: false,
    
    defaults: {
        inTransitionClass: 'slideInFromRight',
        outTransitionClass: 'slideOutToRight',
        animationClass: 'animated',
        transitionDelay: '1000',
        'class': 'stacks',
        itemClass: 'stack-item'
    },

    initialize: function (options) {
        this.views = [];
        options = options || {};
        this.options = _.defaults({}, this.defaults, options);
    },

    render: function (view) {
        this.$el.addClass(this.options['class']);
        return this;
    },

    setRootView: function (view) {
        this.hasRootView = true;
        this.views.push(view);
        view.render();
        view.$el.addClass(this.options.itemClass);
        this.$el.append(view.$el);
    },

    pop: function () {
        if (this.views.length > (this.hasRootView ? 1 : 0)) {
            var view = this.views.pop();
            this.transitionViewOut(view);
        }
    },

    push: function (view) {
        this.views.push(view);
        view.render();
        view.$el.addClass(this.options.itemClass);
        this.transitionViewIn(view);
    },

    transitionViewIn: function (view) {
        this.trigger('before:transition', this, view);
        view.$el.addClass('hiddenToRight');
        this.$el.append(view.$el);

        _.delay(function () {
            view.$el.addClass(this.options.animationClass);
            view.$el.addClass(this.options.inTransitionClass);

            _.delay(function () {
                view.$el.removeClass('hiddenToRight');
                this.trigger('tansitionIn', this, view);
            }.bind(this), this.options.transitionDelay);
        }.bind(this), 1);
    },

    transitionViewOut: function (view) {
        this.trigger('before:transitionOut', this, view);
        view.$el.addClass(this.options.outTransitionClass);

        _.delay(function () {
            view.remove();
            this.trigger('transitionOut', this, view);
        }.bind(this), this.options.transitionDelay);
    }
});
},{}],79:[function(require,module,exports){
var LayoutView = require('../../lib/views/layout'),
    StackRegion = require('../../lib/regions/stack'),
    DialogRegion = require('../../lib/regions/dialog');

module.exports = LayoutView.extend({
    el: 'body',

    regions: {
        profile: 'div#profilelnk',
        main: 'div#workspace',
        subHeader: 'div#subheader',
        modalWindow: {
            regionClass: DialogRegion,
            selector: 'div#dialogPanel'
        }
        // notification panel
        // profile options
    },

    //initialize: function () {
    //    //var _this = this;
    //    //$(window).resize(function () {
    //    //    _this.main.$el.height(($(window).height() - _this.main.$el.offset().top) - 60);
    //    //});
    //    //_this.main.$el.height(($(window).height() - _this.main.$el.offset().top) - 60);
    //}
});
},{"../../lib/regions/dialog":77,"../../lib/regions/stack":78,"../../lib/views/layout":84}],80:[function(require,module,exports){
(function (Marionette) {
    _remove = Marionette.View.prototype.remove;

    _.extend(Marionette.View.prototype, {
        remove: function () {
            var args = Array.prototype.slice.call(arguments),
                fadeOutTime = 700;
            //if (this.model != null) {
            //    typeof this.model.destroyed === 'function' ? this.isDestroyed() : void 0;
            //}
            return _remove.apply(this, args);
        },
        templateHelpers: function () {
            //console.log(this);
        }
    });
}(Marionette));
},{}],81:[function(require,module,exports){
module.exports = Marionette.CollectionView.extend();
},{}],82:[function(require,module,exports){
module.exports = Marionette.CompositeView.extend();
},{}],83:[function(require,module,exports){
module.exports = Marionette.ItemView.extend();
},{}],84:[function(require,module,exports){
module.exports = Marionette.LayoutView.extend();
},{}],85:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');
module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var _attachmentModel, _attachmentCollection, taskIds, subtaskIds;
        if (options.controlsheet !== true) {
            taskIds = _.pluck(options.tasks, 'id');
            subtaskIds = _.pluck(options.subtasks, 'id');
        } else {
            taskIds = options.tasks.get('id');
            subtaskIds = _.pluck(options.subtasks, 'id');
        }
        _attachmentCollection = Reqres.request('Assembly:Entities:AttachmentCollection');
        this.layout = this.GetLayout(taskIds, subtaskIds, _attachmentCollection);

        this.listenTo(Events, 'Add:Attachments:Assembly', function () {
            var jsonValues = JSON.stringify(_attachmentCollection);
            $('#loading').show();
            $.ajax({
                url: window.routemap + 'api/taskattachment/attachments',
                type: 'POST',
                data: jsonValues,
                contentType: "application/json",
                success: function (data) {
                    Events.trigger('Assembly:Attachments:Added', _attachmentCollection);
                    $('#loading').hide();
                },
                error: function (data) {
                    $('#loading').hide();
                    console.log(data.responseText);
                }
            });
        });

        return this.show(this.layout);
    },

    GetLayout: function (taskIds, subtaskIds, _attachmentCollection) {
        return new Views.Layout({ collection: _attachmentCollection, taskIds: taskIds.toString(), subtaskIds: subtaskIds.toString() });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":86}],86:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    AddAttachmentAssemblyTemplate = require('../../../jst/workspace/assemblyaddattachment-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};
Views.SelectedItemView = ItemView.extend({
    tagName: 'li',
    template: _.template('<%= attachmentType %> <% if(!_.isEmpty(attachmentDesc)) { %> { <%= attachmentDesc %> } <% } %> <i style="float:right;" class="delete icon"></i>'),
    initialize: function() {

    },
    events: {
        'click .delete.icon': 'removeSelectedItem'
    },
    removeSelectedItem: function() {
        this.remove();
        this.options.attachCollection.remove(this.model)
        this.undelegateEvents();
    }
});
Views.Layout = LayoutView.extend({
    template: AddAttachmentAssemblyTemplate,
    className: 'ui medium scrolling modal transition',
    initialize: function(options) {
        this.AttachmentType;
    },
    events: {
        'change input[type="radio"]': 'manipulateTextBox',
        'click #buttonAddToList': 'AddAttachmentToList',
        'click .delete.icon.attachment': 'removeSelectedAttachment',
        'click #buttonAddAttachments': 'SaveAssemblyAttachment'
    },
    AddAttachmentToList: function() {
        if (!_.isEmpty($('#txtattachmentType').val()) || $('#selectAttachmentType').val() !== "0") {
            var _attachmentModel = Reqres.request('Assembly:Entities:AttachmentModel');
            if (this.AttachmentType === 'new') {
                _attachmentModel.set('attachmentType', $('#txtattachmentType').val());
            } else {
                _attachmentModel.set('attachmentType', $('#selectAttachmentType option:selected').text());
            }
            _attachmentModel.set('attachmentDesc', $('#assemblyAttachComments').val());
            _attachmentModel.set('SubtaskIDs', this.options.subtaskIds);
            _attachmentModel.set('TaskIds', this.options.taskIds);
            this.collection.add(_attachmentModel);
            this.$('#selectedlistAssemblyAttachment').append(new Views.SelectedItemView({
                model: _attachmentModel,
                attachCollection: this.collection
            }).render().el);
            $('#txtattachmentType').val('')
            $('#selectAttachmentType').val(0);
            $('#assemblyAttachComments').val('');
        }
    },
    SaveAssemblyAttachment: function() {
        Events.trigger('Add:Attachments:Assembly');
    },
    manipulateTextBox: function(e) {
        var txt = this.$(e.currentTarget).data('type');
        if (txt === 'new') {
            this.AttachmentType = 'new';
            this.$('#txtattachmentType').show();
            this.$('#selectAttachmentType').hide();
        } else {
            this.AttachmentType = '';
            this.$('#txtattachmentType').hide();
            this.$('#selectAttachmentType').show();
        }
    },
    templateHelpers: {

    },
    triggers: {},
    onDomRefresh: function() {
        $('.ui.radio.checkbox').checkbox();
    },
    onRender: function() {
        this.$('a[data-content]').popup({
            debug: false
        });
        //this.$el.css('width', '450');
    }
});

module.exports = Views;

},{"../../../jst/workspace/assemblyaddattachment-template.html":30,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],87:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');
module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var taskids;
        if (options.controlsheet !== true) {
            taskids = _.pluck(options.tasks, 'id');
        }
        else {
            taskids = options.tasks.get('id');
        }
        this.layout = this.GetLayout(options.tasksInstrctions);

        this.listenTo(this.layout, 'Save:Instructions:AssemblyDetails', function () {
            this.AddInstructions(taskids.toString(), options.tasksInstrctions, options._AttachmentCollection)
        });

        return this.show(this.layout);
    },

    AddInstructions: function (taskids, taskInstrModel, _attachmentCollection) {
        if (_.isUndefined(taskInstrModel)) {
            taskInstrModel = Reqres.request('Task:Instruction:EmptyModel:Enities');
        }
        taskInstrModel.set('assemblyInstructionField', $('#assembly_instructions').val());
        Reqres.request('tasks:instructions:Update:entities', taskids, 'Assembly', taskInstrModel)
        Events.trigger('save:instruction:Assembly', taskInstrModel.get('assemblyInstructionField'), _attachmentCollection);
        $('.ui.modal').modal('hide');

    },

    GetLayout: function (tasksInstrctions) {
        if (_.isUndefined(tasksInstrctions)) {
            tasksInstrctions = Reqres.request('Task:Instruction:EmptyModel:Enities');
        }
        return new Views.Layout({ model: tasksInstrctions });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":88}],88:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    AddInstructionAssemblyTemplate = require('../../../jst/workspace/assemblyaddinstruction-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: AddInstructionAssemblyTemplate,
    className: 'ui small scrolling modal transition',

    initialize: function (options) {

    },
    templateHelpers: function () {
        return this.model.toJSON();
    },
    events: {

    },
    templateHelpers: {

    },
    triggers: {
        'click #buttonSaveInstruction': 'Save:Instructions:AssemblyDetails'
    },
    onDomRefresh: function () {
        //if (!_.isUndefined(this.options.instruction)) {
        //    $('#assembly_instructions').text(this.options.instruction.get('assemblyInstructionField'));
        //}
    },
    //onRender: function () {
    //    this.$el.css('width', '450');	   
    //}
});

module.exports = Views;

},{"../../../jst/workspace/assemblyaddinstruction-template.html":31,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],89:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var isMultipleTasks = _.uniq(_.pluck(_.toArray(_.map(options.subtasks, function (subtask) { return subtask.toJSON() })), 'taskId'));
        var staff = null;
        if (isMultipleTasks.length === 1 && firmContext.Result.FirmSettingsContext[0].persontoSign !== '0') {
            var taskid = isMultipleTasks.toString();
            var staffpromises = Reqres.request('StaffBudgets:Staff:entities', taskid, firmContext.Result.FirmSettingsContext[0].persontoSign);
            $.when.apply($, staffpromises)
                .done(function (staffinfo) {
                    if (staffinfo != null && staffinfo.staffNameId != 0) {
                        staff = staffinfo;
                    }
                })
                .fail(function () {
                    console.log(arguments);
                });
        }

        this.layout = this.GetLayout(options.users, staff, options.subtasks);

        this.listenTo(this.layout, 'Apply:edited:AssemblyDetails', function () {
            var selectedLists = {
                filing_typeId: 0,
                filing_type: '',
                person_toSignId: 0,
                person_toSign: '',
                send_to: '',
                type_ofCopiesId: 0,
                type_ofCopies: '',
                number_ofCopies: '',
                assembly_comments: ''
            };

            if ($('#selectfilingType').val() !== "0") {
                selectedLists.filing_typeId = $('#selectfilingType').val();
                selectedLists.filing_type = $('#selectfilingType  option:selected').text();
            }
            if (!_.isEmpty($('#persontoSign_row').val())) { //More if condition we have to change later
                selectedLists.person_toSignId = $('#persontoSign_row').val();
                selectedLists.person_toSign = $('#persontoSign_text').val();
            }
            if (!_.isEmpty($('#sendTo_row').val())) {
                selectedLists.send_to = $('#sendTo_row').val();
            }
            if ($('#selectTypeofCopies').val() !== "0") {
                selectedLists.type_ofCopiesId = $('#selectTypeofCopies').val();
                selectedLists.type_ofCopies = $('#selectTypeofCopies  option:selected').text();
            }
            //if ($('#selectDeliveryMethod').val() !== "0") {
            //    subTask.set('findelivery_methidid', $('#selectDeliveryMethod').val());
            //    subTask.set('findelivery_method', $('#selectDeliveryMethod  option:selected').text());
            //}
            if (!_.isEmpty($('#numberofCopies_row').val())) {
                selectedLists.number_ofCopies = $('#numberofCopies_row').val();
            }
            if (!_.isEmpty($('#comments_row').val())) {
                selectedLists.assembly_comments = $('#comments_row').val();
            }

            Events.trigger('Apply:grid:AssemblyDetails', selectedLists);
        });

        return this.show(this.layout);
    },

    GetLayout: function (users, staff, subtasks) {
        return new Views.Layout({ users: users, staff: staff, subtasks: subtasks });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":90}],90:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    EditAssemblyTemplate = require('../../../jst/workspace/editassembly-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: EditAssemblyTemplate,
    className: 'ui small scrolling modal transition',
    initialize: function (options) {
        this.users = options.users;
        this.users = _.map(this.users, function (user) {
            return {
                title: user.fullName,
                Id: user.Id,
                branchName: user.branchName
            }
        })
    },
    events: {

    },
    templateHelpers: {

    },
    triggers: {
        'click #buttonApplyToGrid': 'Apply:edited:AssemblyDetails'
    },
    onDomRefresh: function () {
        var self = this;
        this.options.staff !== null ? $('#persontoSign_row').val(this.options.staff.staffNameId) : '';
        this.options.staff !== null ? $('#persontoSign_text').val(this.options.staff.staffName.trim()) : '';
        if (firmContext.Result.FirmSettingsContext[0].defaulttypeofCopies !== '0') {
            $('#selectTypeofCopies').val(firmContext.Result.FirmSettingsContext[0].defaulttypeofCopies);
        }
        //this.$el.find('.ui.search')
		//	.search({
		//	    source: self.users, searchFields: ['title'], searchFullText: true,
		//	    onSelect: function (result) {
		//	        $('#persontoSign_row').val(result.id);
		//	    }
		//	});

        this.$el.find('.ui.search').search({
            source: self.users,
            maxResults: 10,
            minCharacters: 0,
            searchFullText: true,           
            onSelect: function (result) {
                _.delay(function () {
                    if (result.title === $('#persontoSign_text').val()) {
                        $('#persontoSign_row').val(result.Id);
                        $('#persontoSign_text').val(result.title);                      
                    } else {
                        var getuser = _.where(self.users, {
                            'fullName': $('#persontoSign_text').val()
                        })[0];
                        $('#persontoSign_row').val(getuser.Id);
                        $('#persontoSign_text').val(getuser.fullName);                      
                    }
                }, 200);
            },            
            searchFields: ['title'],
            templates: {
                standard: function (response) {
                    var html = '';
                    var users = response.results;
                    if (users !== 'undefined') {
                        $.each(users, function (index, result) {                          
                            var branchname = result.Id === 0 ? '' : result.branchName;
                            html += '<div class="result"><div class="content"><div class="title qsusername" style="float:left;">' + result.title + '</div><div class="description qsbranch" style="float:right;">' + branchname + '</div></div></div>';
                        });
                        return html;
                    }
                }
            }
        });

    },
    onRender: function () {
        var self = this;
        this.$el.css('width', '450');        
    },

});

module.exports = Views;

},{"../../../jst/workspace/editassembly-template.html":40,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],91:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
    var API = {};

    context.startWithParent = false;
    context.Show = require('./show/controller');
    context.Edit = require('./edit/controller');
    context.AddAttachments = require('./addattachments/controller');
    context.AddInstructions = require('./addinstruction/controller');
    context.ShowSubtaskAttachment = require('./showattachements/controller');

    API = {
        show: function (options) {
            if (!_.isUndefined(this.ShowAssemblyController)) {
                this.ShowAssemblyController.destroy();
            }
            this.ShowAssemblyController = new context.Show.Controller({
                region: options.region,
                subtasks: options.subtasks,
                tasks: options.tasks,
                userAutoSuggest: options.userAutoSuggest,
                controlsheet: options.controlsheet,
                taskInstr: options.taskInstr,
                taskAttach: options.taskAttach,
                priortasks: options.priortasks
            });
        },
        edit: function (subtaskCollection, userAutoSuggest) {
            if (!_.isUndefined(this.editAssembly)) {
                this.editAssembly.destroy();
            }
            this.editAssembly = new context.Edit.Controller({
                region: application.rootView.modalWindow,
                subtasks: subtaskCollection,
                users: userAutoSuggest
            });
        },
        AddAttachement: function (tasks, subtasks, controlsheet) {
            if (!_.isUndefined(this.attachmentController)) {
                this.attachmentController.destroy();
            }
            this.attachmentController = new context.AddAttachments.Controller({
                region: application.rootView.modalWindow,
                tasks: tasks,
                subtasks: subtasks,
                controlsheet: controlsheet
            });
        },
        AddInstruction: function (tasks, tasksInstrctions, controlsheet, _AttachmentCollection) {
            if (!_.isUndefined(this.TaskAddInstruction)) {
                this.TaskAddInstruction.destroy();
            }
            this.TaskAddInstruction = new context.AddInstructions.Controller({
                region: application.rootView.modalWindow,
                tasks: tasks,
                tasksInstrctions: tasksInstrctions,
                controlsheet: controlsheet,
                _AttachmentCollection: _AttachmentCollection
            });
        },
        ShowSubtaskAttachments: function (subtaskModel) {
            if (!_.isUndefined(this.ShowSubtaskAttach)) {
                this.ShowSubtaskAttach.destroy();
            }
            this.ShowSubtaskAttach = new context.ShowSubtaskAttachment.Controller({
                region: application.rootView.modalWindow,
                subtaskModel: subtaskModel
            });
        }
    };

    context.on('start', function (options) {
        return API.show(options);
    });

    Events.on('stop:info', function () {
        return context.stop();
    });

    Events.on('BulkEdit:assembly:click', function (subtaskCollection, userAutoSuggest) {
        return API.edit(subtaskCollection, userAutoSuggest);
    });
    Events.on('AddAttachment:assembly:click', function (tasks, subtasks, controlsheet) {
        return API.AddAttachement(tasks, subtasks, controlsheet);
    });
    Events.on('AddInstruction:assembly:click', function (tasks, tasksInstrctions, controlsheet, _AttachmentCollection) {
        return API.AddInstruction(tasks, tasksInstrctions, controlsheet, _AttachmentCollection);
    });
    Events.on('Assembly:open:subtaskAttachment', function (subtaskModel) {
        return API.ShowSubtaskAttachments(subtaskModel);
    });
    Events.on('stop:move', function () {
        return context.stop();

    });

};
},{"../../lib/config/events":68,"./addattachments/controller":85,"./addinstruction/controller":87,"./edit/controller":89,"./show/controller":92,"./showattachements/controller":94}],92:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var taskids, tasksInstrctions, taskAttachments, boolIsChanged = false;
        this.taskInstrModel_copy, this.taskAttachments_copy, this._AttachmentCollection;
        var userAutoSuggest = options.userAutoSuggest;
        if (options.controlsheet !== true) {
            taskids = _.pluck(options.tasks, 'id');
            if (_.keys(options.tasks).length === 1) {
                tasksInstrctions = Reqres.request('tasks:instructions:Get:entities', parseInt(taskids.toString()));
                taskAttachments = Reqres.request('tasks:Attachments:Get:entities', taskids.toString());
                this.taskInstrModel_copy = tasksInstrctions;
                this.taskAttachments_copy = taskAttachments;
            }
        } else {
            taskids = options.tasks.get('id');
            tasksInstrctions = options.taskInstr; //Reqres.request('tasks:instructions:Get:entities', taskids.toString());
            taskAttachments = options.taskAttach;
            this.taskInstrModel_copy = options.taskInstr;
            this.taskAttachments_copy = options.taskAttach;
        }

        var userData = [];
        _.each(userAutoSuggest, function (obj) {
            userData.push({ Id: obj.Id, fullName: firmContext.Result.Location.length > 1 ? obj.Id !== 0 ? obj.fullName + '  |  ' + obj.branchName : obj.fullName : obj.fullName, userName: obj.fullName });
        });
        this.layout = this.GetLayout(tasksInstrctions, taskAttachments, options.priortasks);

        this.listenTo(this.layout, 'show', (function (_this) {
            return function () {
                return _this.GetDataGrid(options.subtasks, userData, options.priortasks, options.tasks, options.controlsheet);
            }
        }(this)));

        this.listenTo(this.layout, 'assemblySave:clicked', function () {
            $('#loading').show();
            options.pageType = "Assembly";
            var self = this;
            var promises = Reqres.request('Subtask:Save:entities', options);
            promises.done(function () {
                options.subtasks.fetch({
                    reset: true,
                    data: { query: taskids.toString() }
                }).done(function () { $('#loading').hide(); });
                $('#assemblysave').hide();               
                _.each(options.subtasks.selected, function (model) {
                    model.deselect();
                });
            })
                .fail(function () {
                    $('#loading').hide();
                });
        });

        this.listenTo(this.layout, 'Copyfromprior:assembly:click', function () {
            $('#loading').show();
            var self = this;
            var promises = Reqres.request('Subtask:Assembly:CopyFromPrior', taskids.toString());
            $.when.apply($, promises)
                .done(function (data) {
                    options.subtasks.fetch({
                        reset: true,
                        data: { query: taskids.toString() }
                    });
                    $('#loading').hide();
                })
                .fail(function () {
                    $('#loading').hide();
                });
        });

        this.listenTo(this.layout, 'BulkEdit:assembly:click', function () {
            Events.trigger('BulkEdit:assembly:click', options.subtasks.selected, userAutoSuggest)
        }, this);

        this.listenTo(this.layout, 'AddAttachment:assembly:click', function () {
            boolIsChanged = false;
            _.each(options.subtasks.models, function (model) {
                if (model.hasChanged()) {
                    boolIsChanged = true;
                    $('#confMsglblAssembly').html('Changes made to the grid are not saved. Do you want to Save and Continue ?');
                    $('#confAssembly').modal({
                        closable: false,
                        onDeny: function () {
                            Events.trigger('AddAttachment:assembly:click', options.tasks, options.subtasks.selected, options.controlsheet);
                        },
                        onApprove: function () {
                            boolIsChanged = false;
                            options.pageType = "Assembly";
                            var self = this;
                            var promises = Reqres.request('Subtask:Save:entities', options);
                            promises.done(function () {
                                options.subtasks.fetch({
                                    reset: true,
                                    data: { query: taskids.toString() }
                                });
                                $('#assemblysave').hide();
                            }).fail(function () { });
                            Events.trigger('AddAttachment:assembly:click', options.tasks, options.subtasks.selected, options.controlsheet);
                        }
                    }).modal('show');
                }
            });
            if (!boolIsChanged) {
                Events.trigger('AddAttachment:assembly:click', options.tasks, options.subtasks.selected, options.controlsheet);
            }
        }, this);

        this.listenTo(Events, 'Assembly:Attachments:Added', function (collection) {
            var self = this;
            _.each(options.subtasks.selected, function (model) {
                model.deselect();
            });
            this._AttachmentCollection = collection;
            $('#sectionAttachmentandInstruction').show();
            _.each(collection.models, function (model) {
                self.layout.$('#sectionAttachments').append(new Views.SelectedShowItemView({ model: model }).render().el);
            });
            options.subtasks.fetch({
                reset: true,
                data: { query: taskids.toString() }
            });
        });

        this.listenTo(this.layout, 'AddInstruction:assembly:click', function () {
            Events.trigger('AddInstruction:assembly:click', options.tasks, tasksInstrctions, options.controlsheet, this._AttachmentCollection)
        }, this);

        this.listenTo(this.layout, 'Copyfromprior:assembly:click', function () {
            $('#loading').show();
            var self = this;
            var promises = Reqres.request('Copyfromprior:assembly:click', options);
            $.when.apply($, promises)
                .done(function () {

                    $('#loading').hide();
                })
                .fail(function () {
                    $('#loading').hide();
                });
        });

        this.listenTo(this.layout, 'assembly:prior:clicked', function (obj) {
            this.showPriorSubtasks(obj.view, options.subtasks, options.priortasks, this);
        });

        this.listenTo(this.layout, 'assembly:current:clicked', function (obj) {
            this.showCurrentSubtasks(obj.view, options.subtasks, options.priortasks, taskids, this);
        });

        this.listenTo(Events, 'Apply:grid:AssemblyDetails', function (selectedLists) {
            if (_.keys(options.subtasks.selected).length !== 0) {
                var cellEdited = [];
                _.each(options.subtasks.selected, function (subTask) {
                    if (subTask.get('filing_typeId') !== Number(selectedLists.filing_typeId) && Number(selectedLists.filing_typeId) !== 0)
                        cellEdited.push({ 'colIndex': 4, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                    if (subTask.get('person_toSignId') !== Number(selectedLists.person_toSignId) && Number(selectedLists.person_toSignId) !== 0)
                        cellEdited.push({ 'colIndex': 5, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                    if (subTask.get('send_to') !== selectedLists.send_to && selectedLists.send_to !== '')
                        cellEdited.push({ 'colIndex': 6, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                    if (subTask.get('type_ofCopiesId') !== Number(selectedLists.type_ofCopiesId) && Number(selectedLists.type_ofCopiesId) !== 0)
                        cellEdited.push({ 'colIndex': 7, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                    if (subTask.get('number_ofCopies') !== selectedLists.number_ofCopies && selectedLists.number_ofCopies !== '')
                        cellEdited.push({ 'colIndex': 8, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                    if (subTask.get('assembly_comments') !== selectedLists.assembly_comments && selectedLists.assembly_comments !== '')
                        cellEdited.push({ 'colIndex': 11, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });

                    subTask.set({
                        'filing_typeId': Number(selectedLists.filing_typeId) !== 0 ? Number(selectedLists.filing_typeId) : Number(subTask.get('filing_typeId')),
                        'filing_type': Number(selectedLists.filing_typeId) !== 0 ? selectedLists.filing_type : subTask.get('filing_type'),
                        'person_toSignId': Number(selectedLists.person_toSignId) !== 0 ? Number(selectedLists.person_toSignId) : Number(subTask.get('person_toSignId')),
                        'person_toSign': Number(selectedLists.person_toSignId) !== 0 ? selectedLists.person_toSign : subTask.get('person_toSign'),
                        'send_to': selectedLists.send_to !== '' ? selectedLists.send_to : subTask.get('send_to'),
                        'type_ofCopiesId': Number(selectedLists.type_ofCopiesId) !== 0 ? Number(selectedLists.type_ofCopiesId) : Number(subTask.get('type_ofCopiesId')),
                        'type_ofCopies': Number(selectedLists.type_ofCopiesId) !== 0 ? selectedLists.type_ofCopies : subTask.get('type_ofCopies'),
                        'number_ofCopies': selectedLists.number_ofCopies !== '' ? selectedLists.number_ofCopies : subTask.get('number_ofCopies'),
                        'assembly_comments': selectedLists.assembly_comments !== '' ? subTask.get('assembly_comments') + ' ' + selectedLists.assembly_comments : subTask.get('assembly_comments'),
                    });
                });
                Events.trigger('Apply:grid:AssemblyDetails:Done', cellEdited);
            }
        });

        return this.show(this.layout, {
            loading: true
        });
    },

    GetLayout: function (tasksInstrctions, taskAttachments, prioryears) {
        return new Views.Layout({
            instruction: tasksInstrctions,
            taskAttachments: taskAttachments,
            priorYearTaskList: prioryears,
            controlsheet: this.options.controlsheet
        });
    },
    GetDataGrid: function (subtaskCollection, users, prioryears, tasks, controlsheet) {
        var dataGrid = new Views.DataGrid({
            collection: subtaskCollection,
            users: users,
            prioryears: prioryears,
            tasks: tasks,
            iscontrolsheet: controlsheet,
        });
        return this.show(dataGrid, {
            loading: true,
            region: this.layout.gridData
        });
    },

    showPriorSubtasks: function (view, subtasks, prioryears) {
        $('#loading').show();
        $('.ui.text.loader').html("Loading..");
        $('#priorassembly, #priorshipping').addClass('active');
        $('#currentassembly, #currentshipping').removeClass('active');
        if (_.isUndefined(_.where(prioryears, { selected: true })[0])) {
            _.where(prioryears, { id: 1 })[0].selected = true;
        } else {
            var selectedyear = _.where(prioryears, { selected: true })[0];
            _.where(prioryears, { id: (selectedyear.id + 1) })[0].selected = true;
            _.where(prioryears, { id: selectedyear.id })[0].selected = false;
        }

        var _priorsubtasks = Reqres.request('Subtask:entities', _.where(prioryears, { selected: true })[0].taskId.toString());
        var tasksInstrctions = Reqres.request('tasks:instructions:Get:entities', parseInt(_.where(prioryears, { selected: true })[0].taskId.toString()));
        var taskAttachments = Reqres.request('tasks:Attachments:Get:entities', _.where(prioryears, { selected: true })[0].taskId.toString());
        _.delay(function () {
            $('#loading').hide();
            Events.trigger('prior:shipping:click', _priorsubtasks, 'prior', tasksInstrctions, taskAttachments);
        }, 5000);

        this.layout.$('div#bulkeditassembly').addClass('disableoption');
        this.layout.$('div#addInstruction').addClass('disableoption');
        this.layout.$('div#addAttachment').addClass('disableoption');
        this.layout.$('div#copyfrompriorAssembly').addClass('disableoption');

        if (_.where(prioryears, { selected: true })[0].id === prioryears.length) {
            this.layout.$('#priorassembly').hide();
        }
    },

    showCurrentSubtasks: function (view, subtasks, prioryears, ids, ctx) {
        $('#priorassembly, #priorshipping').removeClass('active');
        $('#currentassembly, #currentshipping').addClass('active');
        if (!_.isUndefined(_.where(prioryears, { selected: true })[0])) {
            _.where(prioryears, { selected: true })[0].selected = false;
        } 
        Events.trigger('prior:shipping:click', subtasks, 'current', this.taskInstrModel_copy, this.taskAttachments_copy);
        this.layout.$('#priorassembly').show();
        this.layout.$('div#bulkeditassembly').addClass('disableoption');
        this.layout.$('div#addInstruction').removeClass('disableoption');
        this.layout.$('div#addAttachment').removeClass('disableoption');
        this.layout.$('div#copyfrompriorAssembly').removeClass('disableoption');
    },

});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":93}],93:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutAssemblyTemplate = require('../../../jst/workspace/assemblylayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

var ColumnAttributes = function (attr, celltype, readonly, align, renderer, source, strict) {
    var columnSettings;

    function colString(item, value) {
        if (_.isUndefined(value)) {
            return item.get(attr);
        } else {
            item.set(attr, value);
        }
    };

    function colDate(item, value) {
        if (_.isUndefined(value)) {
            var year = moment(item.get(attr)).year();
            return (year != 1900 ? moment(item.get(attr)).format('l') : '');
        }
    };

    function colBool(item, value) {
        if (_.isUndefined(value)) return _.isUndefined(item.selected) ? false : item.selected;
        return (value ? item.select() : item.deselect());
    }

    function colLink(item, value) {
        if (_.isUndefined(value)) {
            return '<a href="/routing" target="_blank">' + item.get(attr) + '</a>';
        } else {
            return;
        }
    }

    function colAutocomplete(item, value) {
        if (_.isUndefined(value)) {
            return item.get(attr);
        } else {
            item.set(attr, value);
        }
    };

    switch (celltype) {
        case 'html':
            columnSettings = {
                data: colLink,
                type: 'text',
                readonly: readonly,
                className: 'htLeft',
                renderer: 'html'
            }
            break;
        case 'checkbox':
            columnSettings = {
                data: colBool,
                type: 'checkbox',
                readonly: readonly,
                className: 'htCenter',
                // colWidths: 20
            }
            break;
        case 'numeric':
            columnSettings = {
                data: colString,
                readOnly: readonly,
                className: 'htCenter'
            }
            break;
        case 'date':
            columnSettings = {
                data: colDate,
                type: 'text',
                readOnly: readonly,
                className: 'htLeft',
                dateFormat: 'MM/DD/YYYY'
            }
            break;
        case 'dropdown':
            columnSettings = {
                data: colAutocomplete,
                type: 'dropdown',
                className: align,
                source: source,
                strict: strict
            }
            break;
        default:
            columnSettings = {
                data: colString,
                type: 'text',
                className: align,
                readOnly: readonly
            };
            break;
    }

    return columnSettings;
};
var customrenderer = function (instance, td, row, col, prop, value, cellProperties) {
    var args = arguments;
    td.innerHTML = value;
    //if (value === 'Not Filing') {
    //    td.style.fontWeight = '900',
    //        td.style.fontStyle = 'italic',
    //        td.style.color = '#E27A13',
    //        td.style.fontWeight = 'bold'
    //} else if (value === 'Not Filed') {
    //    td.style.color = '#F0635C',
    //        td.style.fontWeight = '900',
    //        td.style.fontStyle = 'italic',
    //        td.style.fontWeight = 'bold'
    //} else if (value === 'Complete') {
    //    td.style.color = '#64943f',
    //        td.style.fontWeight = '900',
    //        td.style.fontStyle = 'italic',
    //        td.style.fontWeight = 'bold'
    //}
    if (value === 'In Process') {
        td.style.color = '#64943f';
        td.style.fontWeight = 'bold';
    }
    if (col === 11) {
        $(td).attr('title', value);
    }
    Handsontable.TextCell.renderer.apply(this, arguments);
};

Views.DataGrid = ItemView.extend({
    template: false,

    initialize: function () {
        this.cellEdited = [];
        this.isreset = false;
        var _this = this;

        this.listenTo(Events, 'Apply:grid:AssemblyDetails:Done', function (applycellEdited) {
            if (!_.isUndefined(applycellEdited)) {
                $.each(applycellEdited, function (index, ele) {
                    _.each(_this.collection.models, function (model) {
                        if (model.get('taskId') === ele['taskId'] && model.get('id') === ele['subtaskId'])
                            _this.cellEdited.push({ 'rowIndex': _.indexOf(_this.collection.models, model), 'colIndex': ele['colIndex'] });
                    });
                });
            }
            this.refreshGrid('apply');
        });

        this.listenTo(this.collection, 'change:attachment_count', this.refreshGrid);

        this.listenTo(this.collection, 'reset', function () {
            this.isreset = true;
            this.refreshGrid('reset');
        });
        this.listenTo(this.collection, 'selected', function () {
            this.showHideOptions(true);
        });
        this.listenTo(this.collection, 'select:none', function () {
            this.showHideOptions(false);
        });
        this.listenTo(Events, 'prior:shipping:click', function (_priorsubtasks, type, taskInstrModel, taskAttachments) {
            this.refreshGrid('prior', _priorsubtasks, type, taskInstrModel, taskAttachments);
        });

        this.listenTo(Events, 'assembly:refresh:grid', function () {
            var grid = this.$el.handsontable('getInstance');
            grid.render();
        }, this);
    },

    events: {
        'click  th[data-keyname]': 'sortAssemblygrid'
    },

    sortAssemblygrid: function (e) {
        this.collection.sortData(e.currentTarget.dataset.keyname);
    },

    getHeaderSettings: function () {
        var headers = [{
            displayName: '',
            keyName: '',
            fullName: '',
            colWidth: 2
        }, {
            displayName: 'Client',
            keyName: 'clientName',
            fullName: 'Client Name',
            colWidth: 8
        }, {
            displayName: 'Jurisdiction',
            keyName: 'name',
            fullName: 'Jurisdiction',
            colWidth: 8
        }, {
            displayName: 'Form',
            keyName: 'form',
            fullName: 'Form',
            colWidth: 6
        }, {
            displayName: 'Filing Type',
            keyName: 'filing_type',
            fullName: 'Filling Type',
            colWidth: 3
        }, {
            displayName: 'Person to Sign',
            keyName: 'person_toSign',
            fullName: 'Person to Sign',
            colWidth: 8
        }, {
            displayName: 'Send To',
            keyName: 'send_to',
            fullName: 'Send To',
            colWidth: 4.5
        }, {
            displayName: 'Type of Copies',
            keyName: 'type_ofCopies',
            fullName: 'Type of Copies ',
            colWidth: 4.5
        }, {
            displayName: 'No of Copies',
            keyName: 'number_ofCopies',
            fullName: 'Number of Copies ',
            colWidth: 2.5
        }, {
            displayName: 'Jur Date Completed',
            keyName: 'completed_on',
            fullName: 'Jurisdiction Date Completed',
            colWidth: 4
        }, {
            displayName: 'Jur Task Status',
            keyName: 'status',
            fullName: 'Jurisdiction Task Status ',
            colWidth: 4.5
        }, {
            displayName: 'Comments',
            keyName: 'assembly_comments',
            fullName: 'Assembly Comments',
            colWidth: 6
        }, {
            displayName: 'Attach',
            keyName: 'attachment_count',
            fullName: 'Attachment Count',
            colWidth: 2
        }, ];
        return headers;
    },

    refreshGrid: function (type, _priorsubtasks, pctype, taskInstrModel, taskAttachments) {
        var grid = this.$el.handsontable('getInstance');
        pctype === 'prior' ? this.options.type = 'prior' : this.options.type = 'current';
        if (!_.isUndefined(grid)) {
            if (type == 'apply')
                $('#assemblysave').show();
            if (type == 'prior') {
                grid.loadData(_priorsubtasks);
                $('div#addInstruction').addClass('disableoption');
                $('div#addAttachment').addClass('disableoption');
                $('div#copyfrompriorAssembly').addClass('disableoption');
                $('div#sectionAttachmentandInstruction').show();
                $('#priorYearlabel').css('color', 'red');
                $('div#prioryearMessage').show();
                if (pctype !== 'current') {
                    if (_.where(this.options.prioryears, { selected: true })[0].id === this.options.prioryears.length) {
                        $('#priorassembly').hide();
                    }
                }
                // $('#assemblysave').hide();
            }
            if (pctype == 'current') {
                $('div#addInstruction').removeClass('disableoption');
                $('div#addAttachment').removeClass('disableoption');
                $('div#copyfrompriorAssembly').removeClass('disableoption');
                $('div#sectionAttachmentandInstruction').show();
                $('#priorYearlabel').css('color', 'black');
                $('div#prioryearMessage').hide();
                $('#priorassembly').show();
            }

            grid.updateSettings({
                maxRows: this.collection.length,
            });

            grid.render();
        }
        if (type === 'prior') {
            if (this.options.type == 'prior' || this.options.type == 'current') {
                taskInstrModel, taskAttachments
                if (_.isUndefined(taskInstrModel) && _.isUndefined(taskAttachments)) {
                    $('#sectionAttachmentandInstruction').hide();
                } else {
                    if (_.isEmpty(taskInstrModel.get('assemblyInstructionField')) && taskAttachments.results.length === 0) {
                        $('#sectionAttachmentandInstruction').hide();
                    }
                }
                if (!_.isUndefined(taskInstrModel)) {
                    if (!_.isEmpty(taskInstrModel.get('assemblyInstructionField'))) {
                        $('#sectionAttachmentandInstruction').show();
                        $('#sectionInstruction').show();
                        $('#assembly_instruction').text(taskInstrModel.get('assemblyInstructionField'))
                    } else {
                        $('#sectionInstruction').hide();
                    }
                } else {
                    $('#sectionInstruction').hide();
                }

                if (!_.isUndefined(taskAttachments)) {
                    var _attachmentCollection = new Backbone.Collection();
                    $('#sectionAttachments>label').remove();
                    _.each(taskAttachments.results, function (response) {
                        var _attachmentModel = Reqres.request('Assembly:Entities:AttachmentModel');
                        _attachmentModel.set('attachmentType', response.attachmentType);
                        _attachmentModel.set('attachmentDesc', response.attachmentDesc);
                        _attachmentModel.set('TaskIds', response.TaskIds);
                        $('#sectionAttachments').append(new Views.SelectedShowItemView({
                            model: _attachmentModel
                        }).render().el);
                        _attachmentCollection.add(_attachmentModel);
                    });
                }
                if (this.options.type == 'prior')
                    $('#sectionAttachmentandInstruction').addClass('disableoption');
                else
                    $('#sectionAttachmentandInstruction').removeClass('disableoption');
            }
        }
    },

    onDomRefresh: function () {
        var headersettings = this.getHeaderSettings(),
            headers = _.pluck(headersettings, 'displayName');

        var self = this;
        var type_ofCopies = Reqres.request('Subtask:type_ofCopies:entities');
        var delivery_method = Reqres.request('Subtask:delivery_method:entities');
        if (this.options.prioryears === null || _.isUndefined(this.options.prioryears) || this.options.prioryears.length === 0) {
            $('#priorassembly').hide();
            $('#currentassembly').hide();
        } else {
            $('#priorassembly').show();
            $('#currentassembly').show();
        }

        var overrideCompleted = _.where(userContext.Result.Rights, {
            module_id: 31
        })[0];
        var status, statusId;
        if (_.pluck(this.options.tasks, 'id').length === 1 || this.options.iscontrolsheet === true) {
            if (this.options.iscontrolsheet === true) {
                status = self.options.tasks.get('currentStatus');
                statusId = self.options.tasks.get('statusId');
            } else {
                status = _.pluck(self.options.tasks, 'model')[0].get('currentStatus');
                statusId = _.pluck(self.options.tasks, 'model')[0].get('statusId');
            }

            if (statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !overrideCompleted.access) {
                $('div#addInstruction').addClass('disableoption');
                $('div#addAttachment').addClass('disableoption');
                $('div#copyfrompriorAssembly').addClass('disableoption');
            }
        }
        if (this.options.prioryears !== null && !_.isUndefined(this.options.prioryears) && this.options.prioryears.length !== 0) {
            $('div#copyfrompriorAssembly').removeClass('disableoption');
        } else {
            $('div#copyfrompriorAssembly').addClass('disableoption');
        }

        this.$el.handsontable({
            data: this.collection,
            columns: [
                ColumnAttributes('', 'checkbox', true),
                ColumnAttributes('clientName', 'text', true),
                ColumnAttributes('name', 'text', true),
                ColumnAttributes('form', 'text', true), {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('filing_type');
                        } else {
                            var filing_typeId = 0;
                            switch (value) {
                                case 'Paper':
                                    filing_typeId = 1;
                                    break;
                                case 'eFile':
                                    filing_typeId = 2;
                                    break;
                                case 'None':
                                    filing_typeId = 3;
                                    break;
                            }

                            model.set('filing_typeId', filing_typeId);
                            return model.set('filing_type', value);
                        }
                    },
                    type: 'dropdown',
                    source: ['eFile', 'Paper', 'None'],
                    strict: true
                }, {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('person_toSign');
                        } else {
                            var result = _.where(self.options.users, {
                                'fullName': value.trim()
                            });
                            if (firmContext.Result.Location.length > 1 && result.length === 0) {
                                result = _.where(self.options.users, {
                                    'userName': value.trim()
                                });
                            }
                            result.length != 0 ? model.set('person_toSignId', result[0].Id) : model.set('person_toSignId', 0);
                            return result.length != 0 ? model.set('person_toSign', result[0].userName) : model.set('person_toSign', '');
                        }
                    },
                    type: 'dropdown',
                    source: function (query, process) {
                        return process(_.pluck(self.options.users, 'fullName'));
                    },
                    trimDropdown: false,
                    strict: false,
                    validator: function (value, callback) {
                        callback(true);
                    }
                },
                ColumnAttributes('send_to', 'text', false), {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('type_ofCopies');
                        } else {
                            var result = _.where(type_ofCopies, {
                                'name': value
                            });
                            result.length != 0 ? model.set('type_ofCopiesId', result[0].id) : model.set('type_ofCopiesId', 0);
                            return result.length != 0 ? model.set('type_ofCopies', value) : model.set('type_ofCopies', '');
                        }
                    },
                    type: 'dropdown',
                    source: _.pluck(type_ofCopies, 'name'),
                    trimDropdown: false,
                    strict: false
                },
                //{
                //    data: function(model, value) {
                //        if (_.isUndefined(value)) {
                //            return model.get('findelivery_method');
                //        } else {
                //            var result = _.where(delivery_method, {
                //                'name': value
                //            });
                //            result.length != 0 ? model.set('findelivery_methidid', result[0].id) : model.set('findelivery_methidid', 0);
                //            return result.length != 0 ? model.set('findelivery_method', value) : model.set('findelivery_method', '');
                //        }
                //    },
                //    type: 'dropdown',
                //    source: _.pluck(delivery_method, 'name'),
                //    strict: false
                //},
                ColumnAttributes('number_ofCopies', 'text', false),
                ColumnAttributes('completed_on', 'date', true),
                ColumnAttributes('status', 'text', true),
                ColumnAttributes('assembly_comments', 'text', false, 'comments'),
                // ColumnAttributes('attachment_count', 'text', true)
                {
                    data: function (item, value) {
                        if (_.isUndefined(value)) {
                            return '<a>' + item.get('attachment_count') + '</a>';
                        } else {
                            return;
                        }
                    },
                    type: 'text',
                    className: 'htLeft',
                    readOnly: true,
                    renderer: 'html'
                }
            ],
            colHeaders: headers,
            nestedHeaders: [
             [
              { label: '', colspan: 4 },
              { label: '<div title="Staff" class="ui divider roleindicator staff"></div>', colspan: 5 },
              { label: '', colspan: 4 },
             ],
             headers
            ],
            colWidths: function (col) {
                var hot = self.$el.handsontable('getInstance'),
                    colname = hot.getColHeader(col),
                    totalwidth = document.documentElement.clientWidth,
                    columnwidth = _.where(headersettings, { displayName: colname })[0].colWidth;

                if (totalwidth < 2000) {
                    return ((totalwidth * columnwidth) / 100);
                }
            },
            // colHeaders: ['', 'Client', 'Jurisdiction', 'Form', 'Filing Method', 'Person To Sign', 'Send To', 'Type of Copies', 'Number of Copies', 'Jur Date Completed', 'Jur Task Status', 'Comments',
            //         'Attch'],
            cells: function (row, col, prop) {
                if (col != 0 && col != 12) {
                    this.renderer = customrenderer;
                }
                var isTaskLocked = false;
                if (firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !overrideCompleted.access) {
                    var taskstatusId = statusId || _.pluck(_.where(self.options.tasks, { 'id': this.instance.getSourceData().at(row).get('taskId') }), 'model')[0].get('statusId');
                    if (taskstatusId === 23) {
                        isTaskLocked = true;
                    }
                }
                if (this.instance.getSourceData().at(row).get('status') === 'Not Filing' || this.instance.getSourceData().at(row).get('status') === 'Not Filed' || self.options.type === 'prior' || isTaskLocked) {
                    return {
                        readOnly: true,
                        disableVisualSelection: true
                    }
                }
            },
            rowHeaders: false,
            //currentRowClassName: 'currentRow',
            //currentColClassName: 'currentCol',
            maxRows: this.collection.length,
            fillHandle: 'vertical',
            wordWrap: false,
            manualColumnFreeze: true,
            manualColumnResize: true,
            // colWidths:[20, 100, 100, 70, 70, 100, 120, 80, 70, 70, 100, 80, 100, 50],
            // colWidths: [100],
            // manualColumnResize: false,
            stretchH: 'all',
            // height: this.collection.length * 22 + 200,
            afterChange: function (changes, source) {
                if (changes != null) {
                    $.each(changes, function (index, change) {
                        if (self.$el.handsontable('getInstance').getSourceData().at(change[0]).hasChanged()) {
                            $('#assemblysave').show();
                            var td = self.$el.handsontable('getInstance').getCell(change[0], self.$el.handsontable('getInstance').propToCol(change[1]));
                            $(td).addClass('editedFileds');
                            self.cellEdited.push({ 'rowIndex': change[0], 'colIndex': self.$el.handsontable('getInstance').propToCol(change[1]) });
                        }
                    });
                }
            },
            afterGetColHeader: function (col, th) {
                if (!$(th).parent().index()) {
                    th.classList.add('roleindicatorheader');
                    return;
                }
                var header = this.getColHeader(col);

                var headerobj = _.where(headersettings, { displayName: header })[0];

                if (!("content" in th.dataset && col >= 0)) {
                    th.dataset.content = headerobj.fullName;
                    th.dataset.keyname = headerobj.keyName;
                    // header === 'Attch' ? th.dataset.content = 'Attachments' : th.dataset.content = header;
                }
                if (col === 4 || col === 5 || col === 6 || col === 7 || col === 8 || col === 11) {
                    th.classList.add('customBorder');
                }
            },

            afterRender: function () {
                self.$('th[data-content], th .roleindicator').popup({
                    debug: false
                });

                if (self.isreset) {
                    self.$el.find('.editedFileds').removeClass('editedFileds');
                    self.cellEdited = [];
                    self.isreset = false;
                } else {
                    $.each(self.cellEdited, function (index, ele) {
                        var td = self.$el.handsontable('getInstance').getCell(ele['rowIndex'], ele['colIndex']);
                        $(td).addClass('editedFileds');
                    });
                }
            },
            afterRenderer: function (td, row, col, prop, val, cellProperties) {
                if (col === 10) {
                    var model = this.getSourceData().at(row);
                    var rowElement = this.getCell(row, col);
                    rowElement.innerHTML = model.get('status') === 'Not Filed' ? "Deleted" : model.get('status');
                }
            },
        });

        this.$el.handsontable('getInstance').addHook('afterOnCellMouseDown', this.cellClicked);
    },
    cellClicked: function (event, coords, TD) {
        switch (coords.col) {
            case 12:
                if (this.getSourceData().at(coords.row).get('status') !== 'Not Filing' && this.getSourceData().at(coords.row).get('status') !== 'Not Filed') {
                    Events.trigger('Assembly:open:subtaskAttachment', this.getSourceData().at(coords.row));
                }
                break;
            default:
                break;
        }
    },
    showHideOptions: function (show) {
        if (show) {
            $('div#bulkeditassembly').removeClass('disableoption');
        } else {
            $('div#bulkeditassembly').addClass('disableoption');
        }
    }

});
Views.SelectedShowItemView = ItemView.extend({
    tagName: 'label',
    template: _.template('<%= attachmentType %> <% if(!_.isEmpty(attachmentDesc)) { %> { <%= attachmentDesc %> } <% } %> <i class="delete icon"></i> '),
    initialize: function () { },
    events: {
        'click .delete.icon': 'removeSelectedItem'
    },
    removeSelectedItem: function () {
        this.model.set('IsDeleted', true);
        this.model.save();
        this.remove();
        this.undelegateEvents();
    }
});
Views.Layout = LayoutView.extend({
    template: LayoutAssemblyTemplate,
    // className: 'ui attached segment',
    className: 'ui grid',
    initialize: function () {
        this.listenTo(Events, 'save:instruction:Assembly', this.refreshInstruction);
    },
    templateHelpers: function () {
        return {
            isControlSheet: _.isUndefined(this.options.controlsheet) ? false : true
        }
    },
    regions: {
        gridData: 'div#assembly-grid'
    },
    triggers: {
        'click #assemblysave': 'assemblySave:clicked',
        'click #bulkeditassembly': 'BulkEdit:assembly:click',
        'click #addAttachment': 'AddAttachment:assembly:click',
        'click #addInstruction': 'AddInstruction:assembly:click',
        'click #copyfrompriorAssembly': 'Copyfromprior:assembly:click',
        'click #priorassembly': 'assembly:prior:clicked',
        'click #currentassembly': 'assembly:current:clicked'
    },
    onDomRefresh: function () {
        var self = this;
        if (_.isUndefined(this.options.instruction) && _.isUndefined(this.options.taskAttachments)) {
            $('#sectionAttachmentandInstruction').hide();
        } else {
            if (_.isEmpty(self.options.instruction.get('assemblyInstructionField')) && this.options.taskAttachments.results.length === 0) {
                $('#sectionAttachmentandInstruction').hide();
            }
        }
        if (!_.isUndefined(this.options.instruction)) {
            _.delay(function () {
                if (!_.isEmpty(self.options.instruction.get('assemblyInstructionField'))) {
                    $('#sectionAttachmentandInstruction').show();
                    $('#sectionInstruction').show();
                    $('#assembly_instruction').text(self.options.instruction.get('assemblyInstructionField'))
                } else {
                    $('#sectionInstruction').hide();
                }
            }, 5000); ///need changes in later stages
        } else {
            $('#sectionInstruction').hide();
        }
        if (this.options.priorYearTaskList !== null && !_.isUndefined(this.options.priorYearTaskList) && this.options.priorYearTaskList.length !== 0) {
            $('div#copyfrompriorAssembly').removeClass('disableoption');
        }
        if (!_.isUndefined(this.options.taskAttachments)) {
            var _attachmentCollection = new Backbone.Collection();

            _.each(this.options.taskAttachments.results, function (response) {
                var _attachmentModel = Reqres.request('Assembly:Entities:AttachmentModel');
                _attachmentModel.set('attachmentType', response.attachmentType);
                _attachmentModel.set('attachmentDesc', response.attachmentDesc);
                _attachmentModel.set('TaskIds', response.TaskIds);
                self.$('#sectionAttachments').append(new Views.SelectedShowItemView({
                    model: _attachmentModel
                }).render().el);
                _attachmentCollection.add(_attachmentModel);
            });
        }
    },
    refreshInstruction: function (instruction, _attachmentCollection) {
        if (_.isEmpty(instruction)) {
            $('#sectionInstruction').hide();
            if (this.options.taskAttachments.results.length === 0 && _.isUndefined(_attachmentCollection)) {
                $('#sectionAttachmentandInstruction').hide();
            }
        } else {
            $('#sectionInstruction').show();
            $('#sectionAttachmentandInstruction').show();
            $('#assembly_instruction').text(instruction);
        }

    }

});

module.exports = Views;

},{"../../../jst/workspace/assemblylayout-template.html":32,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],94:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var taskids, subtaskids, taskAttachments, _attachmentCollection;
        taskids = taskids = options.subtaskModel.get('taskId');
        subtaskids = options.subtaskModel.get('id');
        if (options.subtaskModel.get('attachment_count') !== 0) {
            taskAttachments = Reqres.request('Task:GetSubtaskAttachment:entities', taskids.toString(), subtaskids.toString());
            _attachmentCollection = Reqres.request('Assembly:Entities:AttachmentCollection');
        }
        this.layout = this.GetLayout(taskAttachments, options.subtaskModel, _attachmentCollection);
        return this.show(this.layout);
    },

    GetLayout: function (taskAttachments, subtaskModel, _attachmentCollection) {
        return new Views.Layout({ subtaskModel: subtaskModel, taskAttachments: taskAttachments, collection: _attachmentCollection });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":95}],95:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    ShowSubtaskAttachmentTemplate = require('../../../jst/common/showsubtaskattachments-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};
Views.SelectedShowItemView = ItemView.extend({
    tagName: 'li',
    template: _.template('<%= attachmentType %> <% if(!_.isEmpty(attachmentDesc)) { %> { <%= attachmentDesc %> } <% } %> <i class="delete icon" style="float:right;"></i> '),
    initialize: function() {},
    events: {
        'click .delete.icon': 'removeSelectedItem'
    },
    removeSelectedItem: function() {
        this.model.set('IsSubDeleted', true);
        this.model.save();
        this.collection.remove(this.model)
        this.options.subModel.set('attachment_count', this.collection.length);
        this.remove();
        this.undelegateEvents();
    }
});
Views.Layout = LayoutView.extend({
    template: ShowSubtaskAttachmentTemplate,
    className: 'ui small scrolling modal transition',
    initialize: function() {},
    events: {

    },
    templateHelpers: function() {
        return {
            name: this.options.subtaskModel.get('name')
        }
    },
    triggers: {},
    onDomRefresh: function() {
        var self = this;
        if (!_.isUndefined(this.options.taskAttachments)) {
            _.each(this.options.taskAttachments.results, function(response) {
                var _attachmentModel = Reqres.request('Assembly:Entities:AttachmentModel');
                _attachmentModel.set('attachmentType', response.attachmentType);
                _attachmentModel.set('attachmentDesc', response.attachmentDesc);
                _attachmentModel.set('TaskIds', response.TaskIds);
                _attachmentModel.set('SubtaskIDs', response.SubtaskIDs);
                self.collection.add(_attachmentModel);
                self.$('#selectedlistAssemblyAttachment').append(new Views.SelectedShowItemView({
                    model: _attachmentModel,
                    collection: self.collection,
                    subModel: self.options.subtaskModel
                }).render().el);

            });
        } else {
            self.$('#showsubtaskAttachment').append('<div style:"font-style: italic;font-size: medium;"> No Attachments. <div>');
        }

    },
    onRender: function() {
        this.$('a[data-content]').popup({
            debug: false
        });
    },

});

module.exports = Views;

},{"../../../jst/common/showsubtaskattachments-template.html":23,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],96:[function(require,module,exports){
var application = require('../../../application'),
	BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        this.layout = this.GetLayout(options.statuslist, options.userlist);

        this.listenTo(this.layout, 'checklist:save:clicked', function (obj){
            window.getSelection().removeAllRanges();
            obj.view.query.checklistDescription = obj.view.editor.value();
            obj.view.query.taskId = options.taskId;
            if (!_.isEmpty(obj.view.editor.value())) {
                this.addChecklist(this, this.layout.query, parseInt(options.taskId));
                this.layout.resetForm();
            }
        }, this);

        this.listenTo(this.layout, 'checklist:saveclose:clicked', function (obj) {
            window.getSelection().removeAllRanges();
            obj.view.query.checklistDescription = obj.view.editor.value();
            obj.view.query.taskId = options.taskId;
            if (!_.isEmpty(obj.view.editor.value())) {
                this.addChecklist(this, this.layout.query, parseInt(options.taskId));
                $('.ui.modal').modal('hide');
            }
        }, this);

        return this.show(this.layout);
    },

    addChecklist: function (context, data, taskId) {
        $.post(window.routemap + 'api/checklists', data).done(function (response) {
            if (response === 'success') {                
                Events.trigger('checklists:new:added');
            }
        }).fail(function (response) {
            console.log(response);
        });
    },

    GetLayout: function (status, users) {
        return new Views.Layout({
            userlist: users,
            statuslist: status
        })
    }
});
},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":97}],97:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutAddChecklistsTemplate = require('../../../jst/workspace/addchecklists-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutAddChecklistsTemplate,
    className: 'ui medium scrolling modal transition',
    initialize: function() {
        this.query = {
            associatedStatusId: '0',
            completionDueOn: '1/1/1900',
            assignToAdmin: false,
            assignedPersonId: '0',
            checklistDescription: '',
            taskId: ''
        }
    },
    events: {
        'change input[type="radio"]': 'changeuserListAccess'
    },
    changeuserListAccess: function(e) {
        this.query.assignToAdmin = $(e.currentTarget).val() === 'P' ? false : true;
        if (this.$(e.currentTarget).val() === 'A') {
            //this.$('#userlist input').prop('disabled', true);
            this.$('#userlist').hide().find('input').val('');
        } else {
            //this.$('#userlist input').prop('disabled', false);
            this.$('#userlist').show();
        }
    },
    regions: {},
    triggers: {
        'click #savechecklist': 'checklist:save:clicked',
        'click #saveclosechecklist': 'checklist:saveclose:clicked'
    },

    resetForm: function () {
        this.$('form').trigger('reset');
        this.editor.editable.innerHTML = '';

        this.query.associatedStatusId = '0';
        this.query.completionDueOn = '1/1/1900';
        this.query.assignToAdmin = false;
        this.query.assignedPersonId = '0';
    },

    searchView: function(param, criteria, saveto, savable) {
        var self = this;
        var data = this.options[param].map(function(d) {
            d.title = d[criteria];
            return d;
        });
        this.$('#' + param).search({
            source: data,
            minCharacters: 0,
            maxResults: data.length,
            searchFields: ['title'],
            onSelect: function(result) {
                self.query[saveto] = result[savable];
            }
        });
    },
    onDomRefresh: function() {
        var self = this;
        this.$('.ui.radio.checkbox').checkbox();
        var datefield = new Pikaday({
            field: self.$('#datepicker')[0],
            format: 'MM/DD/YYYY',
            onSelect: function() {
                self.query.completionDueOn = this.getMoment().format('MM/DD/YYYY');
            }
        });
        this.searchView('statuslist', 'Name', 'associatedStatusId', 'id');
        this.searchView('userlist', 'fullName', 'assignedPersonId', 'Id');
        this.editor = woofmark(this.$("#ipmarkdowneditor")[0], {
            parseHTML: domador,
            parseMarkdown: megamark,
            html: false,
            markdown: false
        });

        this.$el.find('.wk-wysiwyg').on('keydown', function (e) { e.stopPropagation(); });

        this.$('a[data-content]').popup({
            debug: false
        });
    }
});

module.exports = Views;

},{"../../../jst/workspace/addchecklists-template.html":25,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],98:[function(require,module,exports){
var application = require('../../../application'),
	BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        this.layout = this.GetLayout(options.statuslist, options.userlist);
        
        this.listenTo(this.layout, 'checklist:bulkapply:clicked', function (obj) {
            //obj.view.query.checklistDescription = obj.view.editor.value();
            //console.log(obj.view.query);
            obj.view.query.taskId = options.taskId;
            if (obj.view.query.associatedStatusId !== '0') {
                obj.view.query.associatedStatusName = _.where(options.statuslist, { 'id': obj.view.query.associatedStatusId })[0].Name;
            }
            if (obj.view.query.assignedPersonId !== '0') {
                obj.view.query.assignedPersonName = _.where(options.userlist, { 'Id': obj.view.query.assignedPersonId })[0].fullName;
            }
            
            //console.log(obj.view.query);
            Events.trigger('checklist:bulkapply:clicked', obj.view.query);
            $('.ui.modal').modal('hide');

            //if (!_.isEmpty(obj.view.editor.value())) {
            //    console.log(obj.view.query);
            //    this.addChecklist(this, this.layout.query, parseInt(options.taskId));
            //}

        }, this);

        return this.show(this.layout);
    },

    //addChecklist: function (context, data, taskId) {
    //    $.post(window.routemap + 'api/checklists', data).done(function (response) {
    //        console.log($('.ui.modal'), response);
    //        if (response === 'success') {
    //            $('.ui.modal').modal('hide');
    //            Events.trigger('checklists:new:added');
    //        }
    //    }).fail(function (response) {
    //        console.log(response);
    //    });
    //},

    GetLayout: function (status, users) {
        return new Views.Layout({
            userlist: users,
            statuslist: status
        })
    }
});
},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":99}],99:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutChecklistBulkEditTemplate = require('../../../jst/workspace/checklisteditbulk-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutChecklistBulkEditTemplate,
    className: 'ui small scrolling modal transition',
    initialize: function() {
        this.query = {
            associatedStatusId: '0',
            associatedStatusName: '',
            completionDueOn: '1/1/1900',
            assignToAdmin: false,
            assignedPersonId: '0',
            assignedPersonName: '',
            //checklistDescription: '',
            taskId: ''
        }
    },
    events: {
        'change input[type="radio"]': 'changeuserListAccess'
    },
    changeuserListAccess: function(e) {
        this.query.assignToAdmin = $(e.currentTarget).val() === 'P' ? false : true;
        if (this.$(e.currentTarget).val() === 'A') {
            this.$('#userlist').hide().find('input').val('');
        } else {
            this.$('#userlist').show();
        }
    },
    regions: {},
    triggers: {
        'click #applychecklistchanges': 'checklist:bulkapply:clicked'
    },
    searchView: function(param, criteria, saveto, savable) {
        var self = this;
        var data = this.options[param].map(function(d) {
            d.title = d[criteria];
            return d;
        });
        this.$('#' + param).search({
            source: data,
            minCharacters: 0,
            maxResults: data.length,
            searchFields: ['title'],
            onSelect: function(result) {
                self.query[saveto] = result[savable];

            }
        });
    },
    onDomRefresh: function() {
        var self = this;
        this.$('.ui.radio.checkbox').checkbox();
        var datefield = new Pikaday({
            field: self.$('#datepicker')[0],
            format: 'MM/DD/YYYY',
            onSelect: function() {
                self.query.completionDueOn = this.getMoment().format('MM/DD/YYYY');
            }
        });
        this.searchView('statuslist', 'Name', 'associatedStatusId', 'id');
        this.searchView('userlist', 'fullName', 'assignedPersonId', 'Id');
        this.$('a[data-content]').popup({
            debug: false
        });
        //this.editor = woofmark(this.$("#ipmarkdowneditor")[0], {
        //    parseHTML: domador,
        //    parseMarkdown: megamark,
        //    html: false,
        //    markdown: false
        //});
    }
});

module.exports = Views;

},{"../../../jst/workspace/checklisteditbulk-template.html":33,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],100:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function(options) {
        this.layout = this.GetLayout(options.model);

        this.listenTo(this.layout, 'show', function() {
            this.layout.editor.editable.innerHTML = megamark(this.options.model.get(this.options.key));
        });

        this.listenTo(this.layout, 'save:edited:checklist', function(obj) {
            if (!_.isEmpty(obj.view.editor.value())) {
                this.saveData(obj.view)
            }
        }, this);

        return this.show(this.layout);
    },

    saveData: function(view) {
        window.getSelection().removeAllRanges();
        this.options.model.set(this.options.key, view.editor.value());
        //$('#checklistsave').show();
        Events.trigger('checklists:afterChange:Save');
        view.$el.modal('hide');
    },

    GetLayout: function(model) {
        var isResponseTemplate = this.options.key === 'response' ? true : false
        return new Views.Layout({
            isResponseTemplate: isResponseTemplate,
            model: model
        });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":101}],101:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    EditorTemplate = require('../../../jst/common/editpoint-template.html'),
    EditorResponseTemplate = require('../../../jst/common/editresponse-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: EditorTemplate,
    className: 'ui small scrolling modal transition',
    events: {
        'focusout .wk-wysiwyg': 'checkEmpty'
    },
    templateHelpers: {
        name: 'Checklist'
    },
    checkEmpty: function(e) {
        var element = this.$(e.currentTarget);
        if (element.is(':empty')) {
            element.css('border-color', '#e0b4b4');
        } else {
            element.css('border-color', 'gray');
        }
    },
    triggers: {
        'click #savepoint': 'save:edited:checklist'
    },
    onDomRefresh: function() {
        //this.$('.ui.modal').modal('hide dimmer');
        //this.$('.ui.dimmer').css('background-color', 'rgba(0,0,0,0)');
        //this.$('.ui.dimmer').parent().find('.ui.dimmer').css('background-color', 'rgba(0,0,0,0)');

        this.editor = woofmark(this.$('#ipmarkdowneditor')[0], {
            parseHTML: domador,
            parseMarkdown: megamark,
            html: false,
            markdown: false
        });

        this.$el.find('.wk-wysiwyg').on('keydown', function (e) { e.stopPropagation(); });

        this.$('a[data-content]').popup({
            debug: false
        });
    }
});

module.exports = Views;

},{"../../../jst/common/editpoint-template.html":20,"../../../jst/common/editresponse-template.html":21,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],102:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
    var API = {};

    context.startWithParent = false;
    context.Show = require('./show/controller');
    context.Add = require('./add/controller');
    context.Edit = require('./edit/controller');
    context.BulkEdit = require('./bulkedit/controller');

    API = {
        show: function (options) {
            return new context.Show.Controller({
                region: options.region,
                tasks: options.tasks,
                controlsheet: options.controlsheet,
                moveTask:options.moveTask,
                tasksIds: options.tasksIds,
                priortasks: options.priortasks,
                userAutoSuggest: options.userAutoSuggest,
                checklistCollections: options.checklistCollections,
                firmStatusLists: options.firmStatusLists
            });
        },

        add: function (options) {
            return new context.Add.Controller({
                region: application.rootView.modalWindow,
                statuslist: options.statuslist,
                userlist: options.userlist,
                taskId: options.taskid
            });
        },

        bulkedit: function (options) {
            return new context.BulkEdit.Controller({
                region: application.rootView.modalWindow,
                statuslist: options.statuslist,
                userlist: options.userlist,
                taskId: options.taskid
            });
        },

        edit: function (model, key){
            return new context.Edit.Controller({
                region: application.rootView.modalWindow,
                model: model,
                key: key
            });
        }
    };

    context.on('start', function (options) {
        return API.show(options);
    });

    Events.on('checklists:Add:clicked', function (options) {
        return API.add(options);
    });

    Events.on('checklists:bulkedit:clicked', function (options) {
        return API.bulkedit(options);
    });

    context.on('stop:checklists', function () {
        return context.stop();
    });

    Events.on('stop:move', function () {
        return context.stop();
    });

     Events.on(' open:checklists:editor', function (model, key) {
        return API.edit(model, key);
    });

};
},{"../../lib/config/events":68,"./add/controller":96,"./bulkedit/controller":98,"./edit/controller":100,"./show/controller":103}],103:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var taskids, checklists, assignedPersonList, associatedStatusList, prioryears, catId;
        if (options.controlsheet !== true) {
            taskids = options.tasksIds || window.localStorage.getItem('points_Taskids');
            catId = window.localStorage.getItem('points_catId');
            checklists = Reqres.request('Checklists:entities', taskids, options.moveTask); //_.pluck(options.tasksCollection.selected, 'id').join());
            if (!options.moveTask) {
                prioryears = Reqres.request('task:prioryears', taskids);
                var clientInfo = window.localStorage.getItem('points_clientinfo').split('_');
                var clientinfo = clientInfo[0];
                clientinfo = clientinfo + (clientInfo[1] === '' ? '' : ' (' + clientInfo[1] + ')');
                clientinfo = clientinfo + (clientInfo[6] === '' ? '' : ' | ' + clientInfo[6]);
                clientinfo = clientinfo + (clientInfo[3] === '' ? '' : ' | ' + clientInfo[3]);
                clientinfo = clientinfo + (clientInfo[5] === '' ? '' : ' | ' + clientInfo[5]);
                $('#clientinfo').text(clientinfo);
                var clientcontact = '';
                clientcontact = clientcontact + (clientInfo[4] === '' ? '' : ' E: ' + clientInfo[4]);
                clientcontact = clientcontact + (clientInfo[2] === '' ? '' : ' | P: ' + clientInfo[2]);
                $('#clientcontact').text(clientcontact);
            }
            else
                prioryears = [];
            assignedPersonList = _.map(Reqres.request('User:entities:AutoSuggest'), function (obj) {
                return _.pick(obj, 'fullName', 'Id');
            });
        } else {
            assignedPersonList = _.map(options.userAutoSuggest, function (obj) {
                return _.pick(obj, 'fullName', 'Id');
            });
            taskids = options.tasksIds || options.tasks.get('id');
            if (options.moveTask) {
                catId = _.values(options.tasks.models)[0].get('categoryId');
                checklists = Reqres.request('Checklists:entities', taskids, options.moveTask); //_.pluck(options.tasksCollection.selected, 'id').join());
            }
            else {
                catId = options.tasks.get('categoryId');
                checklists = options.checklistCollections;
            }

            prioryears = [];
            if (!options.moveTask)
                prioryears = options.priortasks;//Reqres.request('task:prioryears', taskids);
        }
        switch (catId) {
            case 'TX':
                catId = 1;
                break;
            case 'FS':
                catId = 2;
                break;
            case 'BK':
                catId = 3;
                break;
            case 'OT':
                catId = 4;
                break;
        }
        if (options.moveTask || !options.controlsheet)
            associatedStatusList = Reqres.request('firmsettings:status:entities', catId);
        else
            associatedStatusList = options.firmStatusLists;

        // $.get(window.routemap + 'api/FirmSettings/statusbycategory/0', function(data) {
        //     self.associatedStatusList = data;
        // });
        this.layout = this.GetLayout(prioryears, checklists);
        //if (prioryears === null || prioryears.length === 0 || checklists.length === 0) {
        //    $('#priorchecklist').hide();
        //}
        this.listenTo(this.layout, 'show', (function (_this) {
            window.chkcollection = checklists;
            return function () {
                return _this.GetDataGrid(checklists, assignedPersonList, associatedStatusList, prioryears, taskids);
            }
        }(this)));

        this.listenTo(Events, 'checklists:delete:clicked', function (options) {
            options.set('deleted', !options.get('deleted'));
        });

        this.listenTo(this.layout, 'checklists:Add:clicked', function () {
            Events.trigger('checklists:Add:clicked', {
                statuslist: associatedStatusList,
                userlist: assignedPersonList,
                taskid: taskids
            });
        });

        this.listenTo(this.layout, 'Export:Grid:Data:Checklist', function () {
            Events.trigger('Export:Grid:Data:Checklist:CSV');
        });

        this.listenTo(this.layout, 'checklists:bulkedit:clicked', function () {
            Events.trigger('checklists:bulkedit:clicked', {
                statuslist: associatedStatusList,
                userlist: assignedPersonList,
                taskid: taskids
            });
        });

        this.listenTo(Events, 'checklist:bulkapply:clicked', function (options) {
            $('#loading').show();
            var cellEdited = [];
            _.each(checklists.selected, function (model) {
                if (model.get('associatedStatusId') !== options.associatedStatusId && options.associatedStatusId !== '0')
                    cellEdited.push({ 'colIndex': 2, 'taskId': model.get('taskId'), 'chkId': model.get('chktaskid') });
                if (model.get('completionDueOn') !== options.completionDueOn && options.completionDueOn !== '1/1/1900')
                    cellEdited.push({ 'colIndex': 4, 'taskId': model.get('taskId'), 'chkId': model.get('chktaskid') });
                if (model.get('assignedPersonId') !== options.assignedPersonId)
                    cellEdited.push({ 'colIndex': 5, 'taskId': model.get('taskId'), 'chkId': model.get('chktaskid') });

                model.set({
                    'associatedStatusId': options.associatedStatusId !== '0' ? options.associatedStatusId : model.get('associatedStatusId'),
                    'associatedStatusName': options.associatedStatusName !== '' ? options.associatedStatusName : model.get('associatedStatusName'),
                    'completionDueOn': options.completionDueOn !== '1/1/1900' ? options.completionDueOn : model.get('completionDueOn'),
                    'assignToAdmin': options.assignToAdmin,
                    'assignedPersonId': options.assignedPersonId !== '0' ? options.assignedPersonId : model.get('assignedPersonId'),
                    'assignedPersonName': options.assignedPersonName !== '' ? options.assignedPersonName : model.get('assignedPersonName')
                });
                model.deselect();
            });
            Events.trigger('checklists:refreshGrid', cellEdited);
            $('#loading').hide();
            $('#checklistsave').show();
        });

        this.listenTo(this.layout, 'checklists:prior:clicked', function () {
            $('#loading').show();

            if (_.isUndefined(_.where(prioryears, { selected: true })[0])) {
                _.where(prioryears, { id: 1 })[0].selected = true;
            } else {
                var selectedyear = _.where(prioryears, { selected: true })[0];
                //console.log(selectedyear);
                _.where(prioryears, { id: (selectedyear.id + 1) })[0].selected = true;
                _.where(prioryears, { id: selectedyear.id })[0].selected = false;
            }

            checklists.fetch({
                reset: true,
                data: {
                    query: _.where(prioryears, {
                        selected: true
                    })[0].taskId.toString()
                }
            }).done(function (data) {
                $('#loading').hide();
            }).fail(function () {
                $('#loading').hide();
            });

            $('#bulkeditchecklist').addClass('hideItem');
            $('#assignchecklist').addClass('hideItem');
            $('#unassignchecklist').addClass('hideItem');
            $('#defaultchecklist').hide();
            $('#addChecklistsButton').hide();

            if (_.where(prioryears, { selected: true })[0].id === prioryears.length) {
                $('#priorchecklist').hide();
            }

        });

        this.listenTo(this.layout, 'checklists:current:clicked', function () {
            $('#loading').show();

            if (!_.isUndefined(_.where(prioryears, {
                selected: true
            })[0])) {
                _.where(prioryears, {
                    selected: true
                })[0].selected = false;
            }

            checklists.fetch({
                reset: true,
                data: {
                    query: taskids.toString()
                }
            }).done(function () {
                $('#loading').hide();
                Events.trigger('checklists:refreshGrid');
            }).fail(function () {
                $('#loading').hide();
            });

            $('#bulkeditchecklist').removeClass('hideItem');
            $('#assignchecklist').removeClass('hideItem');
            $('#unassignchecklist').removeClass('hideItem');
            $('#defaultchecklist').show();
            $('#priorchecklist').show();
            $('#addChecklistsButton').show();
        });

        this.listenTo(this.layout, 'checklists:save:clicked', function () {
            var loadingtype = '#loading';
            //if (options.moveTask && !_.isObject(options.moveTask)) {
            //    loadingtype = '#moveloading';
            //    $('#moveloading').find('.ui.text.loader').html("Loading..");
            //}
            $(loadingtype).show();
            checklists.saveAll({
                success: function () { },
                error: function () { }
            }).done(function () {
                $('#checklistsave').hide();
                checklists.fetch({
                    reset: true,
                    data: {
                        query: taskids.toString()
                    }
                }).done(function () {
                    $(loadingtype).hide();
                });
            }).fail(function () {
                $('#checklistsave').hide();
                checklists.fetch({
                    reset: true,
                    data: {
                        query: taskids.toString()
                    }
                }).done(function () {
                    $(loadingtype).hide();
                });
            });
        });

        this.listenTo(this.layout, 'checklists:assign:clicked', function (obj) {
            //console.log(obj.view.$('#dimmer'));
            $('#loading').show();
            _.each(checklists.selected, function (model) {
                //model.set('isassigned', true);
                model.set('checklistAction', 'assign');
            });

            checklists.saveModels(checklists.selected, {
                success: function () { },
                error: function () { }
            }).done(function () {
                checklists.fetch({
                    reset: true,
                    data: {
                        query: taskids.toString()
                    }
                }).done(function () {
                    $('#loading').hide();
                });
            }).fail(function () {
                $('#loading').hide();
            });

            _.each(checklists.selected, function (model) {
                model.deselect();
            });
        });

        this.listenTo(this.layout, 'checklists:unassign:clicked', function () {
            $('#loading').show();
            _.each(checklists.selected, function (model) {
                model.set('isassigned', false);
                model.set('checklistAction', 'unassign');
            });

            checklists.saveModels(checklists.selected, {
                success: function () { },
                error: function () { }
            }).done(function () {
                checklists.fetch({
                    reset: true,
                    data: {
                        query: taskids.toString()
                    }
                }).done(function () {
                    $('#loading').hide();
                });
            }).fail(function () {
                $('#loading').hide();
            });

            _.each(checklists.selected, function (model) {
                model.deselect();
            });
        });

        this.listenTo(this.layout, 'checklists:default:clicked', function () {
            var self = this;

            $('#confirmationmessage').html("Are you sure you want to delete the current Checklist and apply the default Checklist from the utility?");
            $('#confirmationbox').modal({
                closable: false,
                onDeny: function () {
                    //return false;
                },
                onApprove: function () {
                    $('#loading').show();
                    $.post(window.routemap + 'api/checklists/default/' + taskids.toString())
                        .done(function (response) {
                            if (response === 'success') {
                                checklists.fetch({
                                    reset: true,
                                    data: {
                                        query: taskids.toString()
                                    }
                                }).done(function () {
                                    $('#loading').hide();
                                });
                            }
                        }).fail(function (response) {
                            $('#loading').hide();
                        });
                }
            }).modal('show');


        });

        this.listenTo(Events, 'checklists:new:added', function () {
            checklists.fetch({
                reset: true,
                data: {
                    query: taskids.toString()
                }
            });
            _.each(checklists.selected, function (model) {
                model.deselect();
            });
        });

        this.listenTo(this.layout, 'checklists:close:clicked', function () {
            Events.trigger('stop:checklists');
        });

        this.listenTo(this.layout, 'Create:Email:Checklists', function (model) {
            if (options.controlsheet) {
                var clientinfo = this.options.tasks.toJSON();
                this.sendEmail(this.layout, model.collection, clientinfo.clientName, clientinfo.clientAccountNumber, clientinfo.taskType_Name, clientinfo.clientEmail, userContext.Result.UserContext[0].phoneNumber, clientinfo.periodEndDate, clientinfo.description);
            } else {
                this.sendEmail(this.layout, model.collection, clientInfo[0], clientInfo[1], clientInfo[6], clientInfo[4], userContext.Result.UserContext[0].phoneNumber, clientInfo[3], clientInfo[5]);
            }
        }, this);

        this.listenTo(checklists, 'select:none', function (model) {
            this.layout.$('#email-link').prop({
                'href': 'javascript:void(0)'
            });
        }, this);

        return this.show(this.layout, {
            loading: true
        });
    },

    GetLayout: function (prioryears, _checklists) {
        return new Views.Layout({
            collection: _checklists,
            prioryears: prioryears,
            moveTask: this.options.moveTask,
            controlsheet: this.options.controlsheet,
            tasks: this.options.tasks
        });
    },

    sendEmail: function (view, collection, name, accno, type, mailid, phno, penddate, description) {
        var link = view.$('#email-link'),
            body = '',
            counter = 1,
            _clipBoardText = '',
             from = userContext.Result.UserContext[0].firstName.trim() !== '' ? userContext.Result.UserContext[0].firstName.trim() + ' ' + userContext.Result.UserContext[0].lastName.trim() : userContext.Result.UserContext[0].lastName.trim(), //window.loggedinUser,
            outlookApp = '';
        var _clientName = name.split(',');
        name = _clientName.length >= 2 ? (_clientName[1].trim() !== '' ? _clientName[1].trim() + ' ' + _clientName[0].trim() : _clientName[0].trim()) : _clientName[0].trim();
        try {
            outlookApp = new ActiveXObject("Outlook.Application");
        }
        catch (ex) {

        }
        if (outlookApp == "Outlook") {
            var topContent = '',
                Phone = !_.isEmpty(phno) ? Phone = "Tel: " + phno : '',
                bottomContent = '',
                strContent = this.createChecklistsforOutlookEmail(collection);

            topContent += name + "<br/>";
            topContent += type + "<br/>";
            topContent += moment(penddate).format('MM/DD/YYYY') + "<br/>";
            !_.isEmpty(description) ? topContent += description + "<br/><br/>" : topContent += "<br/><br/>";
            topContent += "You have been assigned the following checklist items to complete. Please access the checklist page within XCM to complete the work.";

            bottomContent += "If you have any questions please contact me <br/>";

            var nameSpace = outlookApp.getNameSpace("MAPI");
            mailFolder = nameSpace.getDefaultFolder(6);
            mailItem = mailFolder.Items.add('IPM.Note');
            if (accno != "")
                mailItem.Subject = "Checklist Items - " + name + ", Client Number - " + accno;
            else
                mailItem.Subject = "Checklist Items - " + name;
            mailItem.To = mailid;
            mailItem.HTMLBody = topContent + "<br/><br/>" + strContent + "<br/>" + bottomContent + "<br/>" + from + "<br/>" + Phone;
            mailItem.display(0);

        } else {
            body += name + "\n";
            body += type + "\n";
            body += moment(penddate).format('MM/DD/YYYY') + "\n";
            !_.isEmpty(description) ? body += description + "\n\n" : body += "\n\n";
            body += "You have been assigned the following checklist items to complete. Please access the checklist page within XCM to complete the work. \n\n";

            _clipBoardText = this.createChecklistsforEmail(collection);

            if (_clipBoardText.length > 1200) {
                body += "[[[Points could not be automatically inserted based on your browser's limitations. XCM has copied the data you selected into your clipboard. Please highlight this red text and press (Ctrl + V) to paste the points in this email.]]] \n\n";
                this.copyToClipboard(_clipBoardText);
            } else {
                body += _clipBoardText;
            }

            body += "If you have any questions please contact me \n\n";
            body += " " + from + "\n";
            !_.isEmpty(phno) ? body += "Ph: " + phno : '';

            if (accno != '') {
                link[0].href = "mailto:" + mailid + "?subject=Checklist Items - " + name + ", Client Number - " + accno + "&body=" + encodeURIComponent(body);
            } else {
                link[0].href = "mailto:" + mailid + "?subject=Checklist Items - " + name + "&body=" + encodeURIComponent(body);
            }
            return true;
        }
    },

    copyToClipboard: function (_clipBoardText) {
        // Creating hidden id storing content
        var targetId = "_hiddenCopyText_";
        target = document.getElementById(targetId);
        if (!target) {
            var target = document.createElement("textarea");
            target.id = targetId;
            document.body.appendChild(target);
        }
        ///Start Selecting balank before copying to clipboard
        target.textContent = "";
        target.select();
        document.execCommand("copy");
        ///Start Selecting balank before copying to clipboard

        target.textContent = _clipBoardText;
        // Highlight its content
        target.select();

        // Copy the highlighted text
        document.execCommand("copy");

        // Remove it from the body
        document.body.removeChild(target);
    },

    createChecklistsforEmail: function (_collection) {
        var checklistsText = "",
              counter = 1;
        _.each(_collection.models, function (model, index) {
            if (model.selected) {
                checklistsText += counter + ") " + domador(model.get('checklistItem')) + ":" + domador(model.get('checklistDescription')) + "\n \n";
                counter++;
            }
        }, this);

        checklistsText = checklistsText.replace(/(<\?[a-z]*(\s[^>]*)?\?(>|$)|<!\[[a-z]*\[|\]\]>|<!DOCTYPE[^>]*?(>|$)|<!--[\s\S]*?(-->|$)|<[a-z?!\/]([a-z0-9_:.])*(\s[^>]*)?(>|$))/gi, '').replace(/&nbsp;/g, ' ').replace(/\\/g, '').replace(/_/g, '').replace(/#/g, '').replace(/\**/g, '');
        return checklistsText;
    },

    createChecklistsforOutlookEmail: function (_collection) {
        var checklistsText = "",
             counter = 1;
        _.each(_collection.models, function (model, index) {
            if (model.selected) {
                checklistsText += counter + ") " + domador(model.get('checklistItem')) + ":" + domador(model.get('checklistDescription')) + "<br/><br/>";
                counter++;
            }
        }, this);
        checklistsText = checklistsText.replace(/\\/g, '').replace(/_/g, '').replace(/#/g, '').replace(/\**/g, '');
        return checklistsText;
    },

    GetDataGrid: function (checklistsCollection, personlist, statuslist, prioryrs, ids) {
        var dataGrid = new Views.DataGrid({
            collection: checklistsCollection,
            userlist: personlist,
            statuslist: statuslist,
            prioryears: prioryrs,
            currentTaskId: ids,
            moveTask: this.options.moveTask
        });
        return this.show(dataGrid, {
            loading: true,
            region: this.layout.gridData
        });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":104}],104:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutChecklistsTemplate = require('../../../jst/workspace/checklistslayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

var ColumnAttributes = function (attr, celltype, readonly, align, renderer, source, strict) {
    var columnSettings;

    function colString(item, value) {
        if (_.isUndefined(value)) {
            return item.get(attr);
        } else {
            item.set(attr, value);
        }
    };

    function colDate(item, value) {
        if (_.isUndefined(value)) {
            var year = moment(item.get(attr)).year();
            return (year != 1900 ? moment(item.get(attr)).format('l') : '');
        }
    };

    function colBool(item, value) {
        if (_.isUndefined(value)) return _.isUndefined(item.selected) ? false : item.selected;
        return (value ? item.select() : item.deselect());
    }

    function colLink(item, value) {
        if (_.isUndefined(value)) {
            return '<a href="/routing" target="_blank">' + item.get(attr) + '</a>';
        } else {
            return;
        }
    }

    function colAutocomplete(item, value) {
        if (_.isUndefined(value)) {
            return item.get(attr);
        } else {
            item.set(attr, value);
        }
    };

    switch (celltype) {
        case 'html':
            columnSettings = {
                data: colLink,
                type: 'text',
                readonly: readonly,
                className: 'htLeft',
                renderer: 'html'
            }
            break;
        case 'checkbox':
            columnSettings = {
                data: colBool,
                type: 'checkbox',
                readonly: readonly,
                className: 'htCenter',
            }
            break;
        case 'numeric':
            columnSettings = {
                data: colString,
                readOnly: readonly,
                className: 'htCenter'
            }
            break;
        case 'date':
            columnSettings = {
                data: colDate,
                type: 'text',
                readOnly: readonly,
                className: 'htLeft',
                dateFormat: 'MM/DD/YYYY'
            }
            break;
        case 'dropdown':
            columnSettings = {
                data: colAutocomplete,
                type: 'dropdown',
                className: align,
                source: source,
                strict: strict
            }
            break;
        default:
            columnSettings = {
                data: colString,
                type: 'text',
                className: align,
                readOnly: readonly
            };
            break;
    }

    return columnSettings;
};

function doneOrNotcolumnRenderer(instance, td, row, col, prop, value, cellProperties) {
    td.innerHTML = value;
    td.style.fontWeight = 'bold'
    //if (value === 'Done') {
    //    td.style.color = '#039D2A';
    //    cellProperties.readOnly = true;
    //} else
    if (value === 'Not Done') {
        td.style.color = '#64943f';
    }
    //else {
    //    td.style.color = '#A9A9A9';
    //}
}

var titleColumnRenderer = function (instance, td, row, col, prop, value, cellProperties) {
    td.innerHTML = value;
    $(td).attr('title', value)
};

var cellEdited = [];
var isreset = false;
var isLockedTask = false;
Views.DataGrid = ItemView.extend({
    template: false,
    lookups: {
        donrOrNot: {
            "Done": "Done",
            "Not Done": "Not Done",
            "NA": "NA"
        }
    },
    initialize: function (options) {
        var self = this;
        this.associatedStatusList = options.statuslist;
        if (_.isArray(this.associatedStatusList))
            this.associatedStatusList.unshift({ id: 0, Name: '' });
        else {
            this.associatedStatusList = [];
            this.associatedStatusList.push({ id: 0, Name: '' });
        }
        this.assignedPersonList = options.userlist;

        this.currentTaskId = this.options.currentTaskId;

        this.listenTo(this.collection, 'reset', function () {
            isreset = true;
            this.refreshGrid();
        });
        this.listenTo(this.collection, 'change:checklistDescription', this.refreshGrid);
        //this.listenTo(this.collection, 'change:deleted', this.refreshGrid);
        this.listenTo(this.collection, 'change:action', this.refreshGrid);

        this.listenTo(this.collection, 'selected', function () {
            this.showHideOptions(true);
            Events.trigger('checklist:sendemail', this.collection);
        });
        this.listenTo(this.collection, 'select:none', function () {
            this.showHideOptions(false);
        });

        Events.on('checklists:refreshGrid', function (applycellEdited) {
            if (!_.isUndefined(applycellEdited)) {
                $.each(applycellEdited, function (index, ele) {
                    _.each(self.collection.models, function (model) {
                        if (model.get('taskId') === ele['taskId'] && model.get('chktaskid') === ele['chkId'])
                            cellEdited.push({ 'rowIndex': _.indexOf(self.collection.models, model), 'colIndex': ele['colIndex'] });
                    });
                });
            }
            self.refreshGrid();
        });


        this.listenTo(Events, 'Export:Grid:Data:Checklist:CSV', function () {
            var temp = this.exportPlugin.exportAsString('csv', {
                exportHiddenRows: true,
                exportHiddenColumns: true,
                columnHeaders: true,
                rowHeaders: true
            }).replace(/(<([^>]+)>)|(false)/ig, '');

            this.exportToCsv('Checklist-Items.csv', temp);
        }, this);
    },
    events: {
        'click th[data-keyname]': 'sortgridData'
    },

    sortgridData: function (e) {
        this.collection.sortData(e.currentTarget.dataset.keyname);
    },

    showHideOptions: function (show) {
        if (show) {
            $('div#checklistoptions').removeClass('disableoption');
        } else {
            $('div#checklistoptions').addClass('disableoption');
        }
    },
    refreshGrid: function () {
        var grid = this.$el.handsontable('getInstance');
        if (!_.isUndefined(grid)) {
            grid.updateSettings({
                maxRows: this.collection.length
            });
            grid.render();
        } else {
            this.$el.empty();
            if (this.collection.length) {
                this.initializeGrid();
            } else {
                return;
            }
        }
    },

    onDomRefresh: function () {
        this.$el.css({
            'width': '100%',
        });
        $('#tabIssuesPoints .item').tab('change tab', 'tabChecklists');
        if (this.collection.length === 0) {
            this.$el.html("No Records Found");
            return;
        } else {
            // this.currentTaskId = this.collection.first().get('taskId');
        }
        this.initializeGrid();
    },

    gridColumnSettings: function () {
        var self = this;
        var columns = [{
            type: 'checkbox',
            readonly: true,
            className: 'htCenter',
            data: function (item, value) {
                if (_.isUndefined(value)) return _.isUndefined(item.selected) ? false : item.selected;
                return (value ? item.select() : item.deselect());
            }
        }, {
            data: function (model, value) {
                if (_.isUndefined(value)) {
                    var actions = model.get('checklistStatus');
                    actions = actions + (model.get('checklistAction').trim() === 'M' ? ' ' + model.get('checklistAction').trim() : '');
                    var user = _.where(self.assignedPersonList, {
                        Id: model.get('updated_by')
                    })[0];
                    user = _.isUndefined(user) ? '' : user.fullName;
                    return '<div title="' + user + ', ' + (moment(model.get('updated_on')).year() != 1900 ? moment(model.get('updated_on')).format('l') : '') + '">' + actions + '</div>';
                } else {
                    return model.get('checklistStatus');
                }
            },
            editor: false,
            renderer: 'html',
            readOnly: true,
            //type: 'text'
        },
            ColumnAttributes('clientName', 'text', true), {
                type: 'dropdown',
                strict: true,
                allowInvalid: false,
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        return model.get('associatedStatusName');
                    } else {
                        var selected = _.filter(self.associatedStatusList, function (status) {
                            return status.Name.trim() === value;
                        })[0];
                        model.set('associatedStatusId', selected.id);
                        model.set('associatedStatusName', selected.Name);
                        return model.get('associatedStatusName');
                    }
                },
                trimDropdown: false,
                source: _.map(this.associatedStatusList, function (status) {
                    return status['Name'].trim();
                })
            }, {
                data: function (item, val) {
                    if (_.isUndefined(val)) {
                        var ChklistItem = item.get('checklistItem').trim();
                        var ChklistDesc = item.get('checklistDescription').trim();
                        var checklist;

                        if (ChklistItem !== '' && ChklistDesc !== '') {
                            checklist = ChklistItem + ':' + ChklistDesc;
                        } else {
                            checklist = ChklistItem + ChklistDesc;
                        }
                        return megamark(checklist);
                    } else {
                        return;
                    }
                },
                editor: false,
                renderer: "html",
            }, {
                type: 'date',
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        var year = moment(model.get('completionDueOn')).year();
                        return (year != 1900 ? moment(model.get('completionDueOn')).format('l') : '');
                    } else {
                        var year = moment(model.get('completionDueOn')).year();
                        model.set('completionDueOn', value);
                        return value;
                    }
                },
                dateFormat: 'MM/DD/YYYY',
                readonly: true,
                correctFormat: true,
            }, {
                type: 'dropdown',
                strict: true,
                allowInvalid: false,
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        return model.get('assignedPersonName').trim();
                    } else {
                        var selected = _.where(self.assignedPersonList, {
                            fullName: value
                        })[0];
                        model.set('assignedPersonId', selected.Id);
                        model.set('assignedPersonName', selected.fullName);
                        return model.get('assignedPersonName');
                    }
                },
                trimDropdown: false,
                source: _.pluck(this.assignedPersonList, 'fullName')
            }, {
                type: 'text',
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        var year = moment(model.get('assignedOn')).year();
                        return (year != 1900 ? moment(model.get('assignedOn')).format('l') : '');
                    }
                },
                readonly: true,
                correctFormat: true,
                editor: false
            }, {
                type: 'dropdown',
                strict: true,
                allowInvalid: false,
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        if (model.get('doneOrNA') !== '') {
                            return model.get('doneOrNA');
                        } else {
                            return 'Not Done'
                        }
                    } else {
                        //model.set('doneOrNA', value);
                        console.log(model, value);
                        model.set('doneOrNA', self.lookups.donrOrNot[value]);
                        if (value.trim() === 'Not Done') {
                            model.set('byWhomId', 0);
                            model.set('byWhom', '');
                            model.set('completedOn', '01/01/1900');
                        } else {
                            model.set('completedOn', moment().format('MM/DD/YYYY'));
                            var selected = _.where(self.assignedPersonList, {
                                Id: loggedinuserid
                            })[0];
                            model.set('byWhomId', selected.Id);
                            model.set('byWhom', selected.fullName);
                        }
                        return model.get('doneOrNA');
                    }
                },
                //source: ['Done', 'Not Done', 'NA']
                source: _.keys(this.lookups.donrOrNot),
                trimDropdown: false
            },
            ColumnAttributes('byWhom', 'text', true), {
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        var year = moment(model.get('completedOn')).year();
                        return (year != 1900 ? moment(model.get('completedOn')).format('l') : '');
                    } else {
                        return;
                    }
                },
                readonly: true,
                editor: false
            },
            ColumnAttributes('comments', 'text', false), {
                data: function (item, value) {
                    if (_.isUndefined(value)) {
                        //switch (item.get('deleted')) {
                        //    case true:
                        //        return '<i class="undo blue icon"></i>';
                        //        break;
                        //    default:
                        //        return '<i class="trash outline blue icon"></i>';
                        //        break;
                        //}
                        switch (item.get('action')) {
                            case 'D':
                                return '<i class="undo blue icon"></i>';
                                break;
                            default:
                                return '<i class="trash outline blue icon"></i>';
                                break;
                        }
                    } else {
                        return;
                    }
                },
                renderer: "html",
                className: 'htCenter',
                editor: false
            }
        ];

        if (this.options.moveTask) {
            return columns;
        } else {
            return columns.filter(function (val, ind) {
                return ind !== 2;
            });
        }
    },

    gridHeaderSettings: function () {
        // var headers = [
        //     "",
        //     "",
        //     "Client",
        //     "Associated Status",
        //     "Checklist",
        //     "Ckl Due Date",
        //     "Assigned Person",
        //     "Date Assigned",
        //     "Status",
        //     "Completed By",
        //     "Completed On",
        //     "Comments",
        //     "Delete"
        // ];

        var headers = [{
            displayName: "",
            keyName: "",
            fullName: "",
            colWidth: 2,
        }, {
            displayName: "Action",
            keyName: "checklistStatus",
            fullName: "Action Status",
            colWidth: 2,
        }, {
            displayName: "Client",
            keyName: "clientName",
            fullName: "Client Name",
            colWidth: 8,
        }, {
            displayName: "Associated Status",
            keyName: "associatedStatusName",
            fullName: "Associated Status",
            colWidth: 7,
        }, {
            displayName: "Checklist",
            keyName: "checklistItem",
            fullName: "Checklist",
            colWidth: 14,
        }, {
            displayName: "Ckl Due Date",
            keyName: "completionDueOn",
            fullName: "Checklist Due Date On",
            colWidth: 5,
        }, {
            displayName: "Assigned Person",
            keyName: "assignedPersonName",
            fullName: "Assigned Person",
            colWidth: 8,
        }, {
            displayName: "Date Assigned",
            keyName: "assignedOn",
            fullName: "Date Assigned On",
            colWidth: 5,
        }, {
            displayName: "Status",
            keyName: "doneOrNA",
            fullName: "Status",
            colWidth: 4,
        }, {
            displayName: "Completed By",
            keyName: "byWhom",
            fullName: "Completed By",
            colWidth: 8,
        }, {
            displayName: "Completed On",
            keyName: "completedOn",
            fullName: "Completed On",
            colWidth: 5,
        }, {
            displayName: "Comments",
            keyName: "comments",
            fullName: "Comments",
            colWidth: 6,
        }, {
            displayName: "Delete",
            keyName: "action",
            fullName: "Delete",
            colWidth: 2,
        }]

        if (this.options.moveTask) {
            // return headers;
            return {
                displaynames: _.pluck(headers, 'displayName'),
                keynames: _.pluck(headers, 'keyName'),
                fullnames: _.pluck(headers, 'fullName'),
                colwidths: _.pluck(headers, 'colWidth')
            }
        } else {
            // return _.without(headers, 'Client');
            var arr = _.pluck(headers, 'colWidth');
            arr.splice(2, 1);
            return {
                displaynames: _.without(_.pluck(headers, 'displayName'), 'Client'),
                keynames: _.without(_.pluck(headers, 'keyName'), 'clientName'),
                fullnames: _.without(_.pluck(headers, 'fullName'), 'Client Name'),
                colwidths: arr
            }
        }
    },

    initializeGrid: function () {
        var self = this,
            headers = this.gridHeaderSettings();

        this.$el.handsontable({
            data: this.collection,
            toCheck: this.currentTaskId,
            moveTask: this.options.moveTask,
            columns: this.gridColumnSettings(),
            colHeaders: headers.displaynames,
            cells: function (row, col, prop) {

                var header = this.instance.getColHeader(col);
                if (_.isUndefined(self.options.moveTask)) {
                    if (self.collection.length && (parseInt(self.currentTaskId) !== parseInt(this.instance.getSourceData().at(0).get('taskId')))) {
                        return {
                            readOnly: true
                        };
                    }
                }

                if (header === "Completed By" || header === "Client") {
                    return {
                        readOnly: true
                    };
                }
                if (header === "Status") {
                    this.renderer = doneOrNotcolumnRenderer;
                }
                if (header === "Comments") {
                    this.renderer = titleColumnRenderer;
                }
                //if ((self.collection.length !== 0) && (this.instance.getData().at(row).get('deleted'))) {
                if (((self.collection.length !== 0) && (this.instance.getSourceData().at(row).get('action') === 'D')) || isLockedTask) {
                    return {
                        readOnly: true,
                        disableVisualSelection: true
                    };
                } else {
                    return {
                        readOnly: false,
                        disableVisualSelection: false
                    };
                }

            },
            //colWidths: [20, 20, 220, 120, 120, 100, 120, 80, 80, 105, 115, 150, 80],
            comments: true,
            maxRows: this.collection.length,
            manualColumnResize: true,
            colWidths: [20, 100],
            // wordWrap: false,
            manualColumnFreeze: true,
            manualColumnResize: true,
            rowHeaders: true,
            colWidths: function (col) {
                var hot = self.$el.handsontable('getInstance'),
                    colname = hot.getColHeader(col),
                    totalwidth = document.documentElement.clientWidth,
                    columnwidth = headers.colwidths[col];

                if (totalwidth < 2000) {
                    return ((totalwidth * columnwidth) / 100);
                }
            },
            // colWidths: this.options.moveTask ? [20, 25, 80, 80, 150, 60, 80, 60, 50, 80, 60, 100, 30] : [20, 25, 80, 150, 60, 80, 60, 50, 80, 60, 100, 30],
            fillHandle: 'vertical',
            stretchH: 'all',
            afterGetColHeader: function (col, th) {
                if (!("content" in th.dataset) && col >= 0) {
                    th.dataset.content = headers.fullnames[col];
                    th.dataset.keyname = headers.keynames[col];
                }
                var header = this.getColHeader(col);
                if (header === "Associated Status" || header === "Checklist" || header === "Ckl Due Date" || header === "Assigned Person" || header === "Status" || header === "Comments" || header === "Delete") {
                    th.classList.add('customBorder');
                }
            },
            afterRender: function () {
                $('th[data-content]').popup({
                    debug: false
                });

                if (isreset) {
                    self.$el.find('.editedFileds').removeClass('editedFileds');
                    cellEdited = [];
                    isreset = false;
                } else {
                    $.each(cellEdited, function (index, ele) {
                        var td = self.$el.handsontable('getInstance').getCell(ele['rowIndex'], ele['colIndex']);
                        $(td).addClass('editedFileds');
                    });
                }

                $('.undo.blue').closest('tr').addClass('deletedrow');
            },
            afterChange: function (changes, source) {
                if (changes != null) {
                    $.each(changes, function (index, change) {
                        if (self.$el.handsontable('getInstance').getSourceData().at(change[0]).hasChanged()) {
                            //self.$el.find('#checklistsave').show();
                            Events.trigger('checklists:afterChange:Save');
                            var td = self.$el.handsontable('getInstance').getCell(change[0], self.$el.handsontable('getInstance').propToCol(change[1]));
                            $(td).addClass('editedFileds');
                            cellEdited.push({ 'rowIndex': change[0], 'colIndex': self.$el.handsontable('getInstance').propToCol(change[1]) });
                        }
                    });

                }
            },
        });

        this.$el.handsontable('getInstance').addHook('afterOnCellMouseDown', this.cellClicked);

        this.hotInstance = this.$el.handsontable('getInstance');

        this.exportPlugin = this.hotInstance.getPlugin('exportFile');

        var openchecklists = _.filter(this.collection.models, function (model) {
            return moment(model.get('completedOn')).year() == 1900 && model.get('completedOn') != 'D';
        });

        $('span#chk_filter_count').html('(' + openchecklists.length + '/' + this.collection.length + ')');
    },

    cellClicked: function (event, coords, TD, scope) {
        var settings = this.getSettings().__proto__;
        if ((!_.isUndefined(settings.moveTask) && coords.row >= 0) || ((coords.row >= 0 && settings.data.length) && (parseInt(settings.toCheck) === parseInt(settings.data.collection.at(0).get('taskId'))))) {
            var header = this.getColHeader(coords.col);
            switch (header) {
                case 'Delete':
                    var model = this.getSourceData().at(coords.row);
                    //model.set('deleted', !model.get('deleted'));
                    model.set('action', model.get('action') === 'D' ? 'UD' : 'D');
                    //$('#checklistsave').show();
                    Events.trigger('checklists:afterChange:Save');
                    if (model.get('action') === 'UD') {
                        var ele = TD.parentElement;
                        ele.classList.remove('deletedrow');
                    }
                    break;

                case 'Checklist':
                    //if (!this.getData().at(coords.row).get('deleted')) {
                    if (this.getSourceData().at(coords.row).get('action') === 'UD') {
                        Events.trigger('open:checklists:editor', this.getSourceData().at(coords.row), 'checklistDescription');
                        cellEdited.push({ 'rowIndex': coords.row, 'colIndex': coords.col });
                    }
                    break;
            }
        }
    },

    exportToCsv: function (filename, content) {
        var blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
        if (navigator.msSaveBlob) { // IE 10+
            navigator.msSaveBlob(blob, filename);
        } else {
            var link = document.createElement("a");
            if (link.download !== undefined) { // feature detection
                // Browsers that support HTML5 download attribute
                var url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", filename);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    }
});

Views.Layout = LayoutView.extend({
    template: LayoutChecklistsTemplate,
    className: 'ui grid',
    regions: {
        gridData: 'div#checklists-grid'
    },
    initialize: function () {
        var self = this;
        this.on('checklists:prior:clicked', function () {
            this.$('#currentchecklist').removeClass('active')
            this.$('#priorchecklist').addClass('active');
        });

        this.on('checklists:current:clicked', function () {
            this.$('#priorchecklist').removeClass('active')
            this.$('#currentchecklist').addClass('active');
        });
        this.isTaskLocked = false;

        Events.on('checklists:afterChange:Save', function () {
            if (!self.isTaskLocked)
                self.$el.find('#checklistsave').show();
        });

    },
    templateHelpers: function () {
        return {
            prior: this.options.prioryears !== null && this.options.prioryears.length !== 0 ? 'inline-block' : 'none',
            movetask: _.isUndefined(this.options.moveTask) ? 'block' : 'none',
            isMoveTask: _.isUndefined(this.options.moveTask) ? false : true,
            hasPriorTasks: _.isNull(this.options.prioryears) || this.options.prioryears.length ? false : true,
            isControlSheet: _.isUndefined(this.options.controlsheet) ? false : true
        }
    },
    triggers: {
        'click .close': 'checklists:close:clicked',
        'click #addChecklistsButton': 'checklists:Add:clicked',
        'click #checklistsave': 'checklists:save:clicked',
        'click #assignchecklist': 'checklists:assign:clicked',
        'click #unassignchecklist': 'checklists:unassign:clicked',
        'click #bulkeditchecklist': 'checklists:bulkedit:clicked',
        'click #priorchecklist': 'checklists:prior:clicked',
        'click #currentchecklist': 'checklists:current:clicked',
        'click #defaultchecklist': 'checklists:default:clicked',
        'click div#exportChecklistItems': 'Export:Grid:Data:Checklist',
        'click a#email-link': {
            event: 'Create:Email:Checklists',
            preventDefault: false,
            stopPropagation: false
        }
    },

    onDomRefresh: function () {
        this.$('a[data-content]').popup({
            debug: false
        });

        var overrideCompleted = _.where(userContext.Result.Rights, {
            module_id: 31
        })[0];
        var statusId;
        if (this.options.controlsheet === true) {
            statusId = this.options.tasks.get('statusId');
        }
        else {
            statusId = Number(window.localStorage.getItem('points_statusId'));
        }
        if (statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !overrideCompleted.access) {
            $('div#checklistoptions').addClass('disableoption');
            $('div#defaultchecklist').addClass('disableoption');
            $('div#addChecklistsButton').addClass('disableoption');
            this.$el.find('#checklistsave').hide();
            isLockedTask = this.isTaskLocked = true;
        }

    }
});

module.exports = Views;

},{"../../../jst/workspace/checklistslayout-template.html":34,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],105:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
    var API = {};

    context.startWithParent = false;
    context.Show = require('./show/controller');

    API = {
        show: function (options) {
            return new context.Show.Controller({
                region: options.region,
                tasks: options.tasks,
                controlsheet:options.controlsheet,
                _customFieldCollection: options._customFieldCollection
            });
        }
    };

    context.on('start', function (options) {
        return API.show(options);
    });

    Events.on('stop:info', function () {
        return context.stop();
    });
};
},{"../../lib/config/events":68,"./show/controller":106}],106:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var customFields;
        if (options.controlsheet) {
            customFields = options._customFieldCollection;
        } else {
            customFields = Reqres.request('Entities.CustomFields', options.tasks.get('id'));
        }
        this.layout = this.GetLayout(customFields, options.tasks);
        return this.show(this.layout, {
            loading: true
        });
    },

    GetLayout: function (customfields, tasks) {
        return new Views.Layout({ collection: customfields, tasks: tasks });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":107}],107:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutCustomFieldTemplate = require('../../../jst/workspace/customfieldlayout-template.html'),
	 ItemCustomFieldTemplate = require('../../../jst/workspace/customfieldpartial-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.CustomFieldItemView = ItemView.extend({
    template: ItemCustomFieldTemplate,
    initialize: function () {
    },
    templateHelpers: function () {
        return this.model.toJSON();
    },
    events: {
        'keyup input': 'modelchanged',
        'focusout input': 'modelchanged'
    },
    className: 'column',
    onRender: function () {
        this.$el.css('padding', '3px');
        var textboxId = this.model.get('taskId') + '-' + this.model.get('id');
        if (this.model.get('dataType') === "Date") {
            new Pikaday({ field: this.$el.find("#" + textboxId)[0], format: 'MM/DD/YYYY' });
        }
    },
    modelchanged: function () {
        if (!this.options.isTaskLocked)
            $('#buttonCustomFieldsSave').show();
        var textboxId = this.model.get('taskId') + '-' + this.model.get('id');
        $(this.$el.find("#" + textboxId)[0]).addClass('editedFileds');
    },
});
Views.CustomFieldItemSaveButton = ItemView.extend({
    template: _.template('<div id="buttonCustomFieldsSave" class="ui primary button" style="border-bottom-left-radius: 1.5em; border-top-left-radius: 1.5em; border-radius:1.5em; float:right;display:none;">Save</div>'),
    initialize: function () {
    },
    events: {

    },
    className: 'column',
    onRender: function () {
        this.$el.css('padding', '7px');
    }
});
Views.Layout = LayoutView.extend({
    template: LayoutCustomFieldTemplate,
    // className: 'ui top attached segment',
    className: 'ui grid',
    initialize: function () {
        this.overrideCompleted = _.where(userContext.Result.Rights, {
            module_id: 31
        })[0];
        this.isTaskLocked = false;
        this.statusId = this.options.tasks.get('statusId'); 
        if (this.statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !this.overrideCompleted.access) {
            $('#buttonCustomFieldsSave').addClass('disableoption');
            this.isTaskLocked = true;
        }
    },
    events: {
        'click #buttonCustomFieldsSave': 'saveChanges'
    },
    saveChanges: function () {
        var self = this;
        _.each(this.collection.models, function (customModel) {
            var textboxId = customModel.get('taskId') + '-' + customModel.get('id');
            customModel.set('fielddata', $("#" + textboxId + "").val());
        });
        $('#loading').show();
        this.collection.saveAll({
            success: function () { self.$el.find('.editedFileds').removeClass('editedFileds'); },
            error: function () { }
        }).done(function () { $('#buttonCustomFieldsSave').hide(); $('#loading').hide(); }).fail(function () { $('#loading').hide(); console.log('fail...'); });

    },
    onRender: function () {
        var self = this;
        if (self.isTaskLocked)
            $('#buttonCustomFieldsSave').addClass('disableoption');      
        this.collection.each(function (model) {
            self.$el.find('#customFieldGrid').append(new Views.CustomFieldItemView({ model: model, isTaskLocked: self.isTaskLocked }).render().el);
        });
        if (this.collection.length != 0) {
            this.$el.find('#customFieldGrid').append(new Views.CustomFieldItemSaveButton().render().el);
        }
        if (this.collection.length === 0) {
            $('#customfield').hide();
            $('#regionCustomFields').hide();
            $('#leftNavCustomField').hide();
        }
    }
});

module.exports = Views;
},{"../../../jst/workspace/customfieldlayout-template.html":36,"../../../jst/workspace/customfieldpartial-template.html":37,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],108:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        this.layout = this.GetLayout(options.users);

        this.listenTo(this.layout, 'Apply:edited:EfileDetails', function () {
            var edited = false;
            if (_.keys(options.subtasks).length != 0) {
                if (options.subtasks.length != 0) {
                    var cellEdited = [];
                    _.each(options.subtasks, function (subTask) {
                        if (moment(subTask.get('eFile_shipped_on')).year() != 1 && moment(subTask.get('eFile_shipped_on')).year() != 1900) {
                            if (!subTask.hasChanged('eFile_received_on') && moment(subTask.get('eFile_received_on')).year() != 1 && moment(subTask.get('eFile_received_on')).year() != 1900) {
                                edited = true;
                                if (subTask.get('document_control_number') !== $('#efileDocumentControlNumber').val() && $('#efileDocumentControlNumber').val() !== '')
                                    cellEdited.push({ 'colIndex': 9, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                                if (subTask.get('whoeFiledId') !== Number($('#whoeFiledId_row').val()) && Number($('#whoeFiledId_row').val()) !== 0)
                                    cellEdited.push({ 'colIndex': 8, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                                if (subTask.get('eFile_received_on') !== $('#efileConsentFormReceivedOn').val() && $('#efileConsentFormReceivedOn').val() !== '')
                                    cellEdited.push({ 'colIndex': 6, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });

                                subTask.set({
                                    'document_control_number': $('#efileDocumentControlNumber').val() !== '' ? $('#efileDocumentControlNumber').val() : subTask.get('document_control_number'),
                                    'whoeFiledId': Number($('#whoeFiledId_row').val()) !== 0 ? Number($('#whoeFiledId_row').val()) : Number(subTask.get('whoeFiledId')),
                                    'whoeFiled_return': $('#efileWhoReturn').val() !== '' ? $('#efileWhoReturn').val() : subTask.get('whoeFiled_return'),
                                    'eFile_received_on': $('#efileConsentFormReceivedOn').val() !== '' ? $('#efileConsentFormReceivedOn').val() : subTask.get('eFile_received_on')
                                });
                                if ($('#efileDateReturn').val() !== '' && $('#efileDateReturn').val() !== "") {
                                    subTask.set('eFile_return_on', $('#efileDateReturn').val());
                                    cellEdited.push({ 'colIndex': 7, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                                } if ($('#efileDateAccepted').val() !== '' && $('#efileDateAccepted').val() !== "") {
                                    subTask.set('eFile_accepted_on', $('#efileDateAccepted').val());
                                    cellEdited.push({ 'colIndex': 10, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                                } if ($('#efileDateRejected').val() !== '' && $('#efileDateRejected').val() !== "") {
                                    subTask.set('eFile_rejected_on', $('#efileDateRejected').val());
                                    cellEdited.push({ 'colIndex': 11, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                                }
                            }
                            else {
                                if ($('#efileConsentFormReceivedOn').val() !== '') {
                                    edited = true;
                                    if (subTask.get('whoeFiledId') !== Number($('#whoeFiledId_row').val()) && Number($('#whoeFiledId_row').val()) !== 0)
                                        cellEdited.push({ 'colIndex': 8, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                                    if (subTask.get('eFile_received_on') !== $('#efileConsentFormReceivedOn').val() && $('#efileConsentFormReceivedOn').val() !== '')
                                        cellEdited.push({ 'colIndex': 6, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });

                                    subTask.set({
                                        'whoeFiledId': Number($('#whoeFiledId_row').val()) !== 0 ? Number($('#whoeFiledId_row').val()) : loggedinuserid,
                                        'whoeFiled_return': $('#efileWhoReturn').val() !== '' ? $('#efileWhoReturn').val() : loggedinUser,
                                        'eFile_received_on': $('#efileConsentFormReceivedOn').val() != '' ? $('#efileConsentFormReceivedOn').val() : moment('1/1/1900').format('l')
                                    });
                                }
                            }
                        }
                        subTask.deselect();
                    });
                    if (edited)
                        Events.trigger('Apply:grid:EfileDetails', cellEdited);
                }
            }
        });

        return this.show(this.layout);
    },

    GetLayout: function (users) {
        return new Views.Layout({ users: users });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":109}],109:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    EditEfileTemplate = require('../../../jst/workspace/editefile-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: EditEfileTemplate,
    className: 'ui small scrolling modal transition',
    initialize: function(options) {
        this.users = options.users;
        this.users = _.map(this.users, function(user) {
            return {
                title: user.fullName,
                id: user.Id
            }
        })
    },
    events: {

    },
    templateHelpers: {

    },
    triggers: {
        'click #ApplyToEfileGrid': 'Apply:edited:EfileDetails'
    },
    onDomRefresh: function() {
        new Pikaday({
            field: this.$el.find('input.date')[0],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[1],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[2],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[3],
            format: 'MM/DD/YYYY'
        });

        $('#fileConsentFormReceivedOn').text(moment(new Date()).format('MM/DD/YYYY'));
        $('#efileWhoReturn').val(loggedinUser.trim());
        $('#whoeFiledId_row').val(loggedinuserid);

        this.$('a[data-content]').popup({
            debug: false
        });
    },
    onRender: function() {
        var self = this;
        this.$el.css('width', '450');

        this.$el.find('.ui.search')
            .search({
                source: self.users,
                searchFields: ['title'],
                searchFullText: true,
                onSelect: function(result) {
                    $('#whoeFiledId_row').val(result.id);
                }
            });
    },


});

module.exports = Views;

},{"../../../jst/workspace/editefile-template.html":41,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],110:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
	var API = {};

	context.startWithParent = false;
	context.Show = require('./show/controller');
	context.Edit = require('./edit/controller');

	API = {
		show: function (options) {
		    if (!_.isUndefined(this.ShoweFileController)) {
		        this.ShoweFileController.destroy();
		    }
		    this.ShoweFileController = new context.Show.Controller({
				region: options.region,
				subtasks: options.subtasks,
				tasks: options.tasks,
				userAutoSuggest: options.userAutoSuggest,
				controlsheet: options.controlsheet
			});
		},
		edit: function (subtaskCollection, userAutoSuggest) {
		    if (!_.isUndefined(this.EditeFileDetails)) {
		        this.EditeFileDetails.destroy();
		    }
		    this.EditeFileDetails = new context.Edit.Controller({
		        region: application.rootView.modalWindow,
		        subtasks: subtaskCollection,
		        users: userAutoSuggest
		    });
		},
	};

	context.on('start', function (options) {
		return API.show(options);
	});

	Events.on('stop:info', function () {
		return context.stop();
	});

	Events.on('BulkEdit:efile:click', function (subtaskCollection, userAutoSuggest) {
	    return API.edit(subtaskCollection, userAutoSuggest);
	});
};
},{"../../lib/config/events":68,"./edit/controller":108,"./show/controller":111}],111:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var taskids;
        var userAutoSuggest = options.userAutoSuggest; //Reqres.request('User:entities:AutoSuggest');
        if (options.controlsheet !== true) {
            taskids = _.pluck(options.tasks, 'id');
        }
        else {
            var taskid = [];
            taskid.push(Number(options.tasks.get('id')));
            taskids = taskid;
        }

        this.changeStatusName(this, options, taskids, 'init');
        var userData = [];
        _.each(userAutoSuggest, function (obj) {
            userData.push(
               { Id: obj.Id, fullName: firmContext.Result.Location.length > 1 ? obj.Id !== 0 ? obj.fullName + '  |  ' + obj.branchName : obj.fullName : obj.fullName, userName: obj.fullName }
            );
        });

        this.layout = this.GetLayout();

        this.listenTo(this.layout, 'show', (function (_this) {
            return function () {
                return _this.GetDataGrid(options.subtasks, options.tasks, userData, options.controlsheet);
            }
        }(this)));

        this.listenTo(this.layout, 'efileSave:clicked', function () {
            $('#loading').show();
            options.pageType = "eFile";
            var self = this;
            var promises = Reqres.request('Subtask:Save:entities', options);
            promises.done(function () {
                self.changeStatusName(self, options, taskids);
                options.subtasks.fetch({
                    reset: true, data: { query: taskids.toString() }
                }).done(function () {
                    $('#efilesave').hide();
                    $('#efilesuccessMsg').show();
                    $('#efilesuccessMsglbl').html('Save eFile Details is done');
                    $('#loading').hide();
                }).fail(function () {
                    $('#loading').hide();
                });
            })
                .fail(function () {
                    $('#loading').hide();
                });
        });

        this.listenTo(this.layout, 'BulkEdit:efile:click', function () {
            Events.trigger('BulkEdit:efile:click', options.subtasks.selected, userAutoSuggest)
        }, this);

        this.listenTo(this.layout, 'movetoCompleted:efile:click', function () {
            $('#loading').show();
            var self = this;

            var promises = Reqres.request('Subtask:MovetoCompleted:entities', taskids, 'eFile');

            $.when.apply($, promises)
             .done(function (data) {
                 if (data.message.Success == 'OK') {
                     self.changeStatusName(self, options, taskids);
                     options.subtasks.fetch({
                         reset: true, data: { query: taskids.toString() }
                     }).done(function () {
                         $('#loading').hide();
                     });
                     $('#efilesuccessMsg').show();
                 }
                 else if (!_.isUndefined(data.message.mandatory)) {
                     $('#efilewarningMsglbl').html(data.message.mandatory);
                     $('#efilewarningMsg').show();
                 }
                 else if (!_.isUndefined(data.message.confirm)) {
                     $('#confefileMsglbl').html(data.message.confirm);
                     $('#confefile').modal({
                         closable: false,
                         onDeny: function () {
                             //return false;
                         },
                         onApprove: function () {
                             if (!_.isUndefined(data.message.delete_Juris)) {
                                 self.deleteorconfirmPromt(data.message.delete_Juris, options, true, taskids);
                             }
                             else
                                 self.movetocompletedValidated(options, false, taskids);
                         }
                     }).modal('show');

                 }
                 else if (!_.isUndefined(data.message.delete_Juris)) {
                     $('#confefileMsglbl').html(data.message.delete_Juris);
                     $('#confefile').modal({
                         closable: false,
                         onDeny: function () {
                             self.movetocompletedValidated(options, false, taskids);
                         },
                         onApprove: function () {
                             self.movetocompletedValidated(options, true, taskids);
                         }
                     }).modal('show');

                 }
                 $('#loading').hide();
             })
                .fail(function () {
                    $('#loading').hide();
                    $('.ui.text.loader').html("Saving..");
                    console.log(arguments);
                });
        });

        return this.show(this.layout, {
            loading: true
        });
    },

    GetLayout: function () {
        return new Views.Layout({
            controlsheet: this.options.controlsheet
        });
    },

    GetDataGrid: function (subtaskCollection, tasks, userAutoSuggest, controlsheet, prioryears) {
        var dataGrid = new Views.DataGrid({
            collection: subtaskCollection,
            users: userAutoSuggest,
            tasks: tasks,
            iscontrolsheet: controlsheet
        });
        return this.show(dataGrid, {
            loading: true,
            region: this.layout.gridData
        });
    },

    deleteorconfirmPromt: function (delete_Juris, options, deleting, taskids) {
        var self = this;
        $('#deleteefileMsglbl').html(delete_Juris);
        $('#deleteefileModal').modal({
            closable: false,
            onDeny: function () {
                self.movetocompletedValidated(options, false, taskids);
            },
            onApprove: function () {
                self.movetocompletedValidated(options, true, taskids);
            }
        }).modal('show');
    },

    movetocompletedValidated: function (options, deleting, taskids) {
        var self = this;

        $('#loading').show();
        var promises = Reqres.request('Subtask:task_movetoCompletedValidated:entities', taskids, deleting, 'eFile');

        $.when.apply($, promises)
             .done(function (data) {
                 if (data.message == 'OK') {
                     self.changeStatusName(self, options, taskids);
                     options.subtasks.fetch({
                         reset: true, data: { query: taskids.toString() }
                     }).done(function () {
                         $('#efilesuccessMsg').show();
                         $('#efilesuccessMsglbl').html('Task is Moved to Completed');
                         $('#loading').hide();
                     });
                     $('#successMsg').show();
                 }
                 else if (!_.isUndefined(data.message.mandatory)) {
                     $('#efilewarningMsglbl').html(data.message.mandatory);
                     $('#efilewarningMsg').show();
                 }
                 else {
                     $('#efilewarningMsglbl').html(data.message);
                     $('#efilewarningMsg').show();
                 }
                 $('#loading').hide();
             })
            .fail(function () {
                $('#loading').hide();
                $('.ui.text.loader').html("Saving..");
            });
    },

    changeStatusName: function (self, options, taskids, type) {
        if (options.controlsheet === true && type !== 'init') {
            self.options.tasks.fetch({ reset: true }).done(function (data) {
                Events.trigger('refresh:routing:move', data.currentStatusField, 'eFile');
                self.checkcomplebutton(self.options, data.statusIdField);
            });
        }
        else if (_.pluck(options.tasks, 'id').length === 1 && type !== 'init') {
            _.filter(self.options.tasks, function (model) {
                model.fetch({ reset: true }).done(function (data) {
                    $('#taskstatus').text('Current Status: ' + data.currentStatusField);
                    self.checkcomplebutton(self.options, data.statusIdField);
                });
            });
        }
    },

    checkcomplebutton: function (options, statusId) {   
        var subtaskCompleted = _.filter(options.subtasks.models, function (model) {
            if (model.get('status_id') === 1003)
                return true;
        });

        if (subtaskCompleted.length > 0 || statusId === 19 || statusId === 20 || statusId === 21 || statusId === 22) {
            $('div#eFilemoveCompleted').removeClass('disableoption');
        } else {
            $('div#eFilemoveCompleted').addClass('disableoption');
        }

        var ovwerrideCompleted = _.where(userContext.Result.Rights, {
            module_id: 31
        })[0];
        if (statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !ovwerrideCompleted.access) { //check
            $('div#eFilemoveCompleted').addClass('disableoption');
            $('div#efilesave').addClass('disableoption');
        }
    }


});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":112}],112:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayouteFileTemplate = require('../../../jst/workspace/efilelayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

var ColumnAttributes = function (attr, celltype, readonly, align, renderer) {
    var columnSettings;

    function colString(item, value) {
        if (_.isUndefined(value)) {
            return item.get(attr);
        } else {
            item.set(attr, value);
        }
    };

    function colDate(item, value) {
        if (_.isUndefined(value)) {
            if (item.get('filing_type') != 'eFile' || item.get('status') === 'Not Filing' || item.get('status') === 'Not Filed')
                return '';
            else {
                var year = moment(item.get(attr)).year();
                return (year != 1900 && year != 1 ? moment(item.get(attr)).format('l') : '');
            }
        } else {
            return !_.isNaN(moment(value).year()) ? item.set(attr, value) : item.set(attr, '01/01/1900');
        }
    };


    function colBool(item, value) {
        if (_.isUndefined(value)) return _.isUndefined(item.selected) ? false : item.selected;
        return (value ? item.select() : item.deselect());
    }

    function colLink(item, value) {
        if (_.isUndefined(value)) {
            return '<a href="/routing" target="_blank">' + item.get(attr) + '</a>';
        } else {
            return;
        }
    }

    switch (celltype) {
        case 'html':
            columnSettings = {
                data: colLink,
                type: 'text',
                readonly: readonly,
                className: 'htLeft',
                renderer: 'html'
            }
            break;
        case 'checkbox':
            columnSettings = {
                data: colBool,
                type: 'checkbox',
                readonly: readonly,
                className: 'htCenter',
                // colWidths: 20
            }
            break;
        case 'numeric':
            columnSettings = {
                data: colString,
                readOnly: readonly,
                className: 'htCenter'
            }
            break;
        case 'date':
            columnSettings = {
                data: colDate,
                type: 'date',
                readOnly: readonly,
                className: 'htLeft',
                dateFormat: 'MM/DD/YYYY',
                correctFormat: true
            }
            break;
        default:
            columnSettings = {
                data: colString,
                type: 'text',
                className: align,
                readOnly: readonly
            };
            break;
    }

    return columnSettings;
};

var statusColumnRenderer = function (instance, td, row, col, prop, value, cellProperties) {
    td.innerHTML = value;

    if (value === 'In Process') {
        td.style.color = '#64943f'
        td.style.fontWeight = 'bold'
    }

};

Views.DataGrid = ItemView.extend({
    template: false,
    initialize: function () {
        var _this = this;
        this.listenTo(Events, 'Apply:grid:EfileDetails', function (applycellEdited) {
            if (!_.isUndefined(applycellEdited)) {
                $.each(applycellEdited, function (index, ele) {
                    _.each(_this.collection.models, function (model) {
                        if (model.get('taskId') === ele['taskId'] && model.get('id') === ele['subtaskId'])
                            _this.cellEdited.push({ 'rowIndex': _.indexOf(_this.collection.models, model), 'colIndex': ele['colIndex'] });
                    });
                });
            }
            this.refreshGrid('apply');
        });
        this.listenTo(this.collection, 'reset', function () {
            this.isreset = true;
            this.refreshGrid('reset');
        });
        this.listenTo(this.collection, 'selected', function () {
            this.showHideOptions(true);
        });
        this.listenTo(this.collection, 'select:none', function () {
            this.showHideOptions(false);
        });

        this.listenTo(Events, 'efile:refresh:grid', function () {
            var grid = this.$el.handsontable('getInstance');
            grid.render();
        }, this);

        this.cellEdited = [];
        this.isreset = false;
    },

    events: {
        'click th[data-keyname]': 'sortEfilegrid'
    },

    sortEfilegrid: function (e) {
        this.collection.sortData(e.currentTarget.dataset.keyname);
    },

    getHeaderSettings: function () {
        var headers = [{
            displayName: '',
            keyName: '',
            fullName: '',
            colWidth: 1
        }, {
            displayName: 'Client',
            keyName: 'clientName',
            fullName: 'Client Name',
            colWidth: 8
        }, {
            displayName: 'Jurisdiction',
            keyName: 'name',
            fullName: 'Jurisdiction',
            colWidth: 8
        }, {
            displayName: 'Form',
            keyName: 'form',
            fullName: 'Form',
            colWidth: 5
        }, {
            displayName: 'Filing Method',
            keyName: 'filing_type',
            fullName: 'Filing Method',
            colWidth: 3
        }, {
            displayName: 'Consent Shipped On',
            keyName: 'eFile_shipped_on',
            fullName: 'Consent Shipped On',
            colWidth: 5.5
        }, {
            displayName: 'Consent Rec\'d On',
            keyName: 'eFile_received_on',
            fullName: 'Consent Received On',
            colWidth: 5
        }, {
            displayName: 'eFiled On',
            keyName: 'eFile_return_on',
            fullName: 'eFiled On',
            colWidth: 5
        }, {
            displayName: 'eFiled By',
            keyName: 'whoeFiled_return',
            fullName: 'eFiled By',
            colWidth: 8
        }, {
            displayName: 'DCN',
            keyName: 'document_control_number',
            fullName: 'Document Control Number',
            colWidth: 5
        }, {
            displayName: 'eFile Accepted On',
            keyName: 'eFile_accepted_on',
            fullName: 'eFile Accepted On',
            colWidth: 5
        }, {
            displayName: 'eFile Rejected On',
            keyName: 'eFile_rejected_on',
            fullName: 'eFile Rejected On',
            colWidth: 5
        }, {
            displayName: 'Del.Status',
            keyName: 'status',
            fullName: 'Del.Status',
            colWidth: 4.5
        }, ];

        return headers;
    },

    refreshGrid: function (type) {
        var grid = this.$el.handsontable('getInstance');
        if (!_.isUndefined(grid)) {
            if (type == 'apply')
                $('#efilesave').show();
            else
                $('#efilesave').hide();
            return grid.render();
        }
    },

    onDomRefresh: function () {
        var headersettings = this.getHeaderSettings(),
            headers = _.pluck(headersettings, 'displayName');

        this.$el.css({
            'width': '100%',
        });
        $('#efilesuccessClose').on('click', function () {
            $(this)
                .closest('.message')
                .transition('fade');
        });
        $('#efilewarningClose').on('click', function () {
            $(this)
                .closest('.message')
                .hide();
        });

        var self = this;

        this.collection.where({
            filing_typeId: 2
        }).length === 0 ? $('#efilebulkedit').closest('.row').hide() : $('#efilebulkedit').closest('.row').show();
        $('div#efilebulkedit').addClass('disableoption');

        var subtaskCompleted = _.filter(this.collection.models, function (model) {
            if (model.get('status_id') === 1003)
                return true;
        });

        var taskinstatus = _.filter(this.options.tasks, function (model) {
            if (self.options.iscontrolsheet !== true) {
                if (model.get('statusId') === 19 || model.get('statusId') === 20 || model.get('statusId') === 21 || model.get('statusId') === 22)
                    return true;
            } else {
                if (self.options.tasks.get('statusId') === 19 || self.options.tasks.get('statusId') === 20 || self.options.tasks.get('statusId') === 21 || self.options.tasks.get('statusId') === 22)
                    return true;
            }
        });

        if ((subtaskCompleted.length > 0 || taskinstatus.length > 0)) {
            $('div#eFilemoveCompleted').removeClass('disableoption');
        } else {
            $('div#eFilemoveCompleted').addClass('disableoption');
        }
        var overrideCompleted = _.where(userContext.Result.Rights, {
            module_id: 31
        })[0];
        var status, statusId;
        if (_.pluck(this.options.tasks, 'id').length === 1 || this.options.iscontrolsheet === true) {           
            if (this.options.iscontrolsheet === true) {
                status = self.options.tasks.get('currentStatus');
                statusId = self.options.tasks.get('statusId');
            } else {
                status = _.pluck(self.options.tasks, 'model')[0].get('currentStatus');
                statusId = _.pluck(self.options.tasks, 'model')[0].get('statusId');
            }

            if (statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !overrideCompleted.access) { 
                $('div#eFilemoveCompleted').addClass('disableoption');
                $('div#efilesave').addClass('disableoption');
            }
        }

        this.$el.handsontable({
            data: this.collection,
            columns: [
                ColumnAttributes('', 'checkbox', true),
                ColumnAttributes('clientName', 'text', true),
                ColumnAttributes('name', 'text', true),
                ColumnAttributes('form', 'text', true),
                ColumnAttributes('filing_type', 'text', true),
                ColumnAttributes('eFile_shipped_on', 'date', true),
                ColumnAttributes('eFile_received_on', 'date', false),
                ColumnAttributes('eFile_return_on', 'date', false), {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('whoeFiled_return');
                        } else {
                            var result = _.where(self.options.users, {
                                'fullName': value.trim()
                            });
                            if (firmContext.Result.Location.length > 1 && result.length === 0) {
                                result = _.where(self.options.users, {
                                    'userName': value.trim()
                                });
                            }
                            result.length != 0 ? model.set('whoeFiledId', result[0].Id) : model.set('whoeFiledId', 0);
                            return result.length != 0 ? model.set('whoeFiled_return', result[0].userName) : model.set('whoeFiled_return', '');
                        }
                    },
                    type: 'dropdown',
                    source: function (query, process) {
                        return process(_.pluck(self.options.users, 'fullName'));
                    },
                    trimDropdown: false,
                    strict: false,
                    validator: function (value, callback) {
                        callback(true);
                    }
                },
                ColumnAttributes('document_control_number', 'text', false),
                ColumnAttributes('eFile_accepted_on', 'date', false),
                ColumnAttributes('eFile_rejected_on', 'date', false),
                ColumnAttributes('status', 'text', true)
            ],
            //colHeaders: ['', 'Client', 'Jurisdiction', 'Form', 'Filing Method', 'Who eFiled Return', 'Return /Consent Form Shipped', 'Consent Form Received on', 'Return eFiled', 'Document Control Number', 'eFile Accepted', 'eFile Rejected'],
            // colHeaders: function (col) {
            //     switch (col) {
            //         case 0:
            //             return '';
            //         case 1:
            //             return '<div data-content="Client">Client</div>';
            //         case 2:
            //             return '<div data-content="Jurisdiction">Jurisdiction</div>';
            //         case 3:
            //             return '<div data-content="Form">Form</div>';
            //         case 4:
            //             return '<div data-content="Filing Method">Filing Method</div>';
            //         case 5:
            //             return '<div data-content="Who eFiled Return">Who eFiled Return</div>';
            //         case 6:
            //             return '<div data-content="Return /Consent Form Shipped">Return /Consent Form Shipped</div>';
            //         case 7:
            //             return '<div data-content="Consent Form Received on">Consent Form Received on</div>';
            //         case 8:
            //             return '<div data-content="Return eFiled">Return eFiled</div>';
            //         case 9:
            //             return '<div data-content="Document Control Number">DCN</div>';
            //         case 10:
            //             return '<div data-content="eFile Accepted">eFile Accepted</div>';
            //         case 11:
            //             return '<div data-content="eFile Rejected">eFile Rejected</div>';
            //         case 12:
            //             return '<div data-content="Deliverable Status">Del.Status</div>';
            //     }
            // },
            colHeaders: headers,
            nestedHeaders: [
                [
                    { label: '', colspan: 5 },
                    { label: '<div title="Support Staff" class="ui divider roleindicator supportstaff"></div>', colspan: 7 },
                    { label: '', colspan: 1 },
                ],
                headers
            ],
            colWidths: function (col) {
                var hot = self.$el.handsontable('getInstance'),
                    colname = hot.getColHeader(col),
                    totalwidth = document.documentElement.clientWidth,
                    columnwidth = _.where(headersettings, { displayName: colname })[0].colWidth;

                if (totalwidth < 2000) {
                    return ((totalwidth * columnwidth) / 100);
                }
            },
            cells: function (row, col, prop) {
                if (col === 12) {
                    this.renderer = statusColumnRenderer;
                }
                //var cellProperties = {};
                var isTaskLocked = false;
                if (firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !overrideCompleted.access) {
                    var taskstatusId = statusId || _.pluck(_.where(self.options.tasks, { 'id': this.instance.getSourceData().at(row).get('taskId') }), 'model')[0].get('statusId');
                    if (taskstatusId === 23) {
                        isTaskLocked = true;
                    }
                }
                if (this.instance.getSourceData().at(row).get('filing_type') != 'eFile' || this.instance.getSourceData().at(row).get('status') === 'Not Filing' || this.instance.getSourceData().at(row).get('status') === 'Not Filed' || isTaskLocked) {
                    return {
                        readOnly: true,
                        disableVisualSelection: true
                    }
                } else {
                    var year = moment(this.instance.getSourceData().at(row).get('eFile_shipped_on')).year();
                    if (this.instance.getSourceData().at(row).get('filing_type') === 'eFile' && (year === 1900 || year === 1)) {
                        return {
                            readOnly: true,
                            disableVisualSelection: true
                        }
                    } else {
                        var rec_year = moment(this.instance.getSourceData().at(row).get('eFile_received_on')).year();
                        if (this.instance.getSourceData().at(row).get('filing_type') === 'eFile' && col !== 6 && col !== 0 && (rec_year === 1900 || rec_year === 1)) { //&& col !== 0 change this
                            return {
                                readOnly: true,
                                disableVisualSelection: true
                            }
                        } else if (this.instance.getSourceData().at(row).get('filing_type') === 'eFile' && (col === 6 || col === 0) && (rec_year === 1900 || rec_year === 1)) {
                            return {
                                readOnly: false,
                                disableVisualSelection: false
                            }
                        } else if (this.instance.getSourceData().at(row).get('filing_type') === 'eFile' && this.instance.getSourceData().at(row).get('whoeFiledId') !== 0 && !_.contains([1, 2, 3, 4, 5], col) && (rec_year !== 1900 && rec_year !== 1 && !isNaN(rec_year))) {
                            return {
                                readOnly: false,
                                disableVisualSelection: false
                            }
                        } else if (!this.instance.getSourceData().at(row).hasChanged('eFile_received_on')) {
                            return {
                                readOnly: true,
                                disableVisualSelection: true
                            }
                        }
                    }
                }
                //if (taskinstatus.length === 0 && (year !== 1900 && year !== 1))
                //    cellProperties.readOnly = true;
                //return cellProperties;
            },
            //afterGetColHeader: function (col, TH) {

            //  TH.style['fontSize'] = '12px';
            //},
            //colWidths: [110, 150, 70, 90, 100, 110, 120, 130, 150, 90, 90],

            maxRows: this.collection.length,
            fillHandle: 'vertical',
            currentRowClassName: 'currentRow',
            currentColClassName: 'currentCol',
            wordWrap: false,
            manualColumnFreeze: true,
            manualColumnResize: true,
            // colWidths: [100],
            //colWidths: [10, 120, 150, 50, 70, 70, 80, 80, 80, 40, 50, 80, 60],
            rowHeaders: false,
            maxRows: this.collection.length,
            stretchH: 'all',
            fillHandle: 'vertical',
            afterChange: function (changes, source) {
                if (changes != null) {
                    $.each(changes, function (index, change) {
                        if (self.$el.handsontable('getInstance').getSourceData().at(change[0]).hasChanged()) {
                            $('#efilesave').show();
                            var td = self.$el.handsontable('getInstance').getCell(change[0], self.$el.handsontable('getInstance').propToCol(change[1]));
                            $(td).addClass('editedFileds');
                            self.cellEdited.push({ 'rowIndex': change[0], 'colIndex': self.$el.handsontable('getInstance').propToCol(change[1]) });
                        }
                    });
                }
            },
            afterGetColHeader: function (col, th) {

                if (!$(th).parent().index()) {
                    th.classList.add('roleindicatorheader');
                    return;
                }

                var header = this.getColHeader(col);

                var headerobj = _.where(headersettings, { displayName: header })[0];

                if (!("content" in th.dataset && col >= 0)) {
                    th.dataset.content = headerobj.fullName;
                    th.dataset.keyname = headerobj.keyName;
                }

                if (col === 8 || col === 6 || col === 7 || col === 9 || col === 10 || col === 11) {
                    th.classList.add('customBorder');
                }
            },
            afterRender: function (col, th) {
                self.$('th[data-content], th .roleindicator').popup({
                    debug: false
                });
                if (self.isreset) {
                    self.$el.find('.editedFileds').removeClass('editedFileds');
                    self.cellEdited = [];
                    self.isreset = false;
                } else {
                    $.each(self.cellEdited, function (index, ele) {
                        var td = self.$el.handsontable('getInstance').getCell(ele['rowIndex'], ele['colIndex']);
                        $(td).addClass('editedFileds');
                    });
                }
            },
            afterRenderer: function (td, row, col, prop, val, cellProperties) {
                if (col === 12) {
                    var model = this.getSourceData().at(row);
                    var rowElement = this.getCell(row, col);
                    rowElement.innerHTML = model.get('status') === 'Not Filed' ? "Deleted" : model.get('status');
                }
            },
        });

        //this.efiletable.updateSettings({
        //    cells: function(row, col, prop) {
        //        var cellProperties = {};
        //        if (self.efiletable.getSourceData().at(row).get('status') === 'Not Filing' || self.efiletable.getSourceData().at(row).get('status') === 'Not Filed') {
        //            return {
        //                readOnly: true
        //            }
        //        }
        //        var year = moment(self.efiletable.getSourceData().at(row).get('eFile_shipped_on')).year();
        //        if (self.efiletable.getSourceData().at(row).get('filing_type') != 'eFile' || (self.efiletable.getSourceData().at(row).get('filing_type') === 'eFile' && (year === 1900 || year === 1))) {
        //            cellProperties.readOnly = true;
        //        } else {
        //            var rec_year = moment(self.efiletable.getSourceData().at(row).get('eFile_received_on')).year();
        //            if (self.efiletable.getSourceData().at(row).get('filing_type') === 'eFile' && col !== 7 && (rec_year === 1900 || rec_year === 1)) {
        //                cellProperties.readOnly = true;
        //            } else if (self.efiletable.getSourceData().at(row).get('filing_type') === 'eFile' && col === 7 && (rec_year === 1900 || rec_year === 1)) {
        //                cellProperties.readOnly = false;
        //            } else if (self.efiletable.getSourceData().at(row).get('filing_type') === 'eFile' && !self.efiletable.getSourceData().at(row).hasChanged('eFile_received_on') && !_.contains([1, 2, 3, 4, 6, 7], col) && (rec_year !== 1900 && rec_year !== 1 && !isNaN(rec_year))) {
        //                cellProperties.readOnly = false;               
        //            } else
        //                cellProperties.readOnly = true;
        //        }
        //        //if (taskinstatus.length === 0 && (year !== 1900 && year !== 1))
        //        //    cellProperties.readOnly = true;
        //        return cellProperties;
        //    },
        //});


    },

    showHideOptions: function (show) {
        if (show) {
            $('div#efilebulkedit').removeClass('disableoption');
        } else {
            $('div#efilebulkedit').addClass('disableoption');
        }
    },

});

Views.Layout = LayoutView.extend({
    template: LayouteFileTemplate,
    className: 'ui grid',
    templateHelpers: function () {
        return {
            isControlSheet: _.isUndefined(this.options.controlsheet) ? false : true
        }
    },
    regions: {
        gridData: 'div#efile-grid'
    },
    triggers: {
        'click #efilesave': 'efileSave:clicked',
        'click #efilebulkedit': 'BulkEdit:efile:click',
        'click #eFilemoveCompleted': 'movetoCompleted:efile:click',
    }
});

module.exports = Views;

},{"../../../jst/workspace/efilelayout-template.html":44,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],113:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
	var API = {};

	context.startWithParent = false;
	context.Show = require('./show/controller');

	API = {
		show: function (options) {
			return new context.Show.Controller({
				region: options.region,
				tasks: options.tasks,
				controlsheet: options.controlsheet,
				userAutoSuggest: options.userAutoSuggest,
				_engagementCollecton: options._engagementCollection
			});
		}
	};

	context.on('start', function (options) {
		return API.show(options);
	});

	Events.on('stop:info', function () {
		return context.stop();
	});
};
},{"../../lib/config/events":68,"./show/controller":114}],114:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var engagement, userAutoSuggest, taskID;
        if (options.controlsheet !== true) {
            engagement = Reqres.request('Engagements:entities', _.pluck(options.tasks, 'id'));
            taskID = _.pluck(options.tasks, 'id').toString();
        } else {
            taskID = options.tasks.get('id');
            //engagement = Reqres.request('Engagements:entities', taskID);
            engagement = options._engagementCollecton;
        }
        userAutoSuggest = options.userAutoSuggest;
        this.layout = this.GetLayout(engagement, userAutoSuggest, options.controlsheet, this.options.tasks);
        return this.show(this.layout, {
            loading: true
        });
    },

    GetLayout: function (engagement, userAutoSuggest, isControlSheet, tasks) {
        return new Views.Layout({
            model: engagement,
            users: userAutoSuggest,
            isControlSheet: isControlSheet,
            tasks: tasks
        });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":115}],115:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutEngagementTemplate = require('../../../jst/workspace/engagementlayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = ItemView.extend({
    template: LayoutEngagementTemplate,
    className: 'ui attached segment',
    initialize: function () {
    },
    events: {
        'click #saveEngagementForm': 'SaveEngagementModel',
        'change input.date': 'validateInput',
        'keydown input.integer': 'validateInputInteger'
    },
    serializeData: function () {
        return {
            _users: this.options.users
        }
    },
    validateInput: function (e) {
        var matches = /^(\d{2})[-\/](\d{2})[-\/](\d{4})$/.exec($(e.currentTarget).val());
        e.preventDefault();
        if (matches == null) {
            $(e.currentTarget).val('');
            $(e.currentTarget).focus();
            return false;
        }
        var d = matches[2];
        var m = matches[1] - 1;
        var y = matches[3];
        var composedDate = new Date(y, m, d);
        if (composedDate.getDate() == d && composedDate.getMonth() == m && composedDate.getFullYear() == y && y >= 2000 && y <= 2100) {
            return true;
        } else {
            $(e.currentTarget).val('');
            $(e.currentTarget).focus();
            return false;
        }
    },
    validateInputInteger: function (e) {
        e.stopPropagation();
        var val = $(e.currentTarget).val();
        var valuesallowed = [46, 8, 9, 27, 13];
        // Allow: backspace, delete, tab, escape, enter and .
        if (_.indexOf(valuesallowed, e.keyCode) !== -1 ||
            // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
            // Allow: Ctrl+C
            (e.keyCode == 67 && e.ctrlKey === true) ||
            // Allow: Ctrl+X
            (e.keyCode == 88 && e.ctrlKey === true) ||
            // Allow: home, end, left, right
            (e.keyCode === 190 && !_.contains(val, ".")) ||
            // Allow only one . character
              (e.keyCode === 110 && !_.contains(val, ".")) ||
            // Allow only one . character
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    },
    SaveEngagementModel: function () {
        var self = this;
        //Get Form Values
        var data = self.$('#engagementForm').form('get values');
        //Enabling the Icon in tab indicating data is present after save engagement information successfully
        if (this.isEngagementInformationPresent(data)) {
            this.$('#iconEngagementInformation').show();
        } else {
            this.$('#iconEngagementInformation').hide();
        }
        if (this.isKeyDatesPresent(data)) {
            this.$('#iconKeyDates').show();
        } else {
            this.$('#iconKeyDates').hide();
        }
        if (this.isAcceptancePresent(data)) {
            this.$('#iconAcceptance').show();
        } else {
            this.$('#iconAcceptance').hide();
        }
        if (this.isRotationPresent(data)) {
            this.$('#iconRotation').show();
        } else {
            this.$('#iconRotation').hide();
        }
        //Convert Form Values to Backbone Model
        this.model.set(data);
        //Save Data To Server
        $('#loading').show();
        this.model.save(null, {
            success: function () { },
            error: function () { }
        }).done(function () {
            $('#loading').hide(); $('#saveEngagementForm').hide(); $('#EngagementSuccMessage').show();
            self.$el.find('.editedFileds').removeClass('editedFileds');
        }).fail(function () { console.log('fail...'); $('#loading').hide(); });
    },
    onDomRefresh: function () {
        var self = this;
        //Engagement Tab intialization
        $('#tabEngagement .item').tab();
        //Validating the Data comes from the server
        var data = this.EditEngagementFormData(this.model.toJSON());
        //Set Form Values if Data exist for the particular task
        $('#engagementForm').form('set values', data);
        // Semantic UI Drop down intialization
        this.$('.ui.dropdown').dropdown();
        this.overrideCompleted = _.where(userContext.Result.Rights, {
            module_id: 31
        })[0];
        this.statusId;
        if (_.pluck(this.options.tasks, 'id').length === 1 || this.options.isControlSheet === true) {
            if (this.options.isControlSheet === true) {
                this.statusId = this.options.tasks.get('statusId');
            } else {
                this.statusId = _.pluck(this.options.tasks, 'model')[0].get('statusId');
            }
            if (this.statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !this.overrideCompleted.access) {
                $('#saveEngagementForm').addClass('disableoption');
            }
        }
        //Date Fields Intialization with pikday calender control
        new Pikaday({ field: this.$el.find('input.date')[0], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[1], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[2], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[3], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[4], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[5], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[6], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[7], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[8], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[9], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[10], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[11], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[12], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[13], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[14], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[15], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[16], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[17], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[18], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[19], format: 'MM/DD/YYYY' });
        new Pikaday({ field: this.$el.find('input.date')[20], format: 'MM/DD/YYYY' });

        //Save Button Enable if UI Changes
        this.$el.find('form#engagementForm input, form#engagementForm select').on('change', function (field) {
            if (field.currentTarget.type === 'select-one')
                $(field.currentTarget).nextUntil('.text').next().addClass('editedFileds')
            else
                $(field.currentTarget).addClass("editedFileds");
            $('#saveEngagementForm').show()
        });
        //Hide header if its TaskInfo Module
        if (self.options.isControlSheet) {
            self.$el.find('#EngagementHeaderItem').show();
        }
        //Showing Success message when data get saved
        this.$('#EngagementSuccMessage').on('click', function () {
            $(this).closest('.message').hide();
        });

        //Enabling the Icon in tab indicating data is present
        if (this.isEngagementInformationPresent(data)) {
            this.$('#iconEngagementInformation').show();
        }
        if (this.isKeyDatesPresent(data)) {
            this.$('#iconKeyDates').show();
        }
        if (this.isAcceptancePresent(data)) {
            this.$('#iconAcceptance').show();
        }
        if (this.isRotationPresent(data)) {
            this.$('#iconRotation').show();
        }
        //when Client Risk Assessment Required filter changes to NO 'Client Risk Assessment' Filtter should hide
        this.$('[name="ClientRiskAssessmentRequired"]').on('change', function () {
            if (self.$('[name="ClientRiskAssessmentRequired"]').val() !== '2') {
                self.$('#clientRiskAssessmentHide').show();
            } else {
                self.$('#clientRiskAssessmentHide').hide();
            }
        });
        //when we get values hiding the panel
        if (data.ClientRiskAssessmentRequired === '2') {
            self.$('#clientRiskAssessmentHide').hide();
        }

    },
    EditEngagementFormData: function (value) {
        var parsedFilters = {
            PCAOBorNonPublic: value['PCAOBorNonPublic'],/*Satart Engagement Information Attribute */
            LevelofService: value['LevelofService'],
            DescriptionofOtherService: value['DescriptionofOtherService'],
            EntityStructure: value['EntityStructure'],
            DescriptionofOtherEntity: value['DescriptionofOtherEntity'],
            FinancialStatementDate: value['FinancialStatementDate'] ? (moment(value['FinancialStatementDate']).year() !== 1900 && moment(value['FinancialStatementDate']).year() !== 1) ? moment(new Date(value['FinancialStatementDate'])).format('MM/DD/YYYY') : '' : '',
            FinancialStatementFormat: value['FinancialStatementFormat'],
            CentralFileroomlocationFilelocation: value['CentralFileroomlocationFilelocation'],
            EngagementBinderName: value['EngagementBinderName'],
            BasisofAccounting: value['BasisofAccounting'],
            LineofService: value['LineofService'],
            Industry: value['Industry'],
            EngagementStatus: value['EngagementStatus'],
            IndependentPartnerReviewRequired: value['IndependentPartnerReviewRequired'],
            TechnicalPartnerReviewRequired: value['TechnicalPartnerReviewRequired'],
            PCAOBConcurringPartnerReviewRequired: value['PCAOBConcurringPartnerReviewRequired'],
            PCAOBReviewRequired: value['PCAOBReviewRequired'],
            ForeignOperations: value['ForeignOperations'],
            RealizationRateCY: value['RealizationRateCY'],
            RealizationRatePY: value['RealizationRatePY'],
            FeesCY: value['FeesCY'],
            FeesPY: value['FeesPY'],/*End Engagement Information Attribute */
            ReportDateCY: value['ReportDateCY'] ? (moment(value['ReportDateCY']).year() !== 1900 && moment(value['ReportDateCY']).year() !== 1) ? moment(new Date(value['ReportDateCY'])).format('MM/DD/YYYY') : '' : '', /*Satart Scheduling and Financials Information Attribute */
            ReportDatePY: value['ReportDatePY'] ? (moment(value['ReportDatePY']).year() !== 1900 && moment(value['ReportDatePY']).year() !== 1) ? moment(new Date(value['ReportDatePY'])).format('MM/DD/YYYY') : '' : '',
            PlanningBeginDateCY: value['PlanningBeginDateCY'] ? (moment(value['PlanningBeginDateCY']).year() !== 1900 && moment(value['PlanningBeginDateCY']).year() !== 1) ? moment(new Date(value['PlanningBeginDateCY'])).format('MM/DD/YYYY') : '' : '',
            PlanningBeginDatePY: value['PlanningBeginDatePY'] ? (moment(value['PlanningBeginDatePY']).year() !== 1900 && moment(value['PlanningBeginDatePY']).year() !== 1) ? moment(new Date(value['PlanningBeginDatePY'])).format('MM/DD/YYYY') : '' : '',
            PlanningEndDateCY: value['PlanningEndDateCY'] ? (moment(value['PlanningEndDateCY']).year() !== 1900 && moment(value['PlanningEndDateCY']).year() !== 1) ? moment(new Date(value['PlanningEndDateCY'])).format('MM/DD/YYYY') : '' : '',
            PlanningEndDatePY: value['PlanningEndDatePY'] ? (moment(value['PlanningEndDatePY']).year() !== 1900 && moment(value['PlanningEndDatePY']).year() !== 1) ? moment(new Date(value['PlanningEndDatePY'])).format('MM/DD/YYYY') : '' : '',
            FieldWorkBeginDateCY: value['FieldWorkBeginDateCY'] ? (moment(value['FieldWorkBeginDateCY']).year() !== 1900 && moment(value['FieldWorkBeginDateCY']).year() !== 1) ? moment(new Date(value['FieldWorkBeginDateCY'])).format('MM/DD/YYYY') : '' : '',
            FieldWorkBeginDatePY: value['FieldWorkBeginDatePY'] ? (moment(value['FieldWorkBeginDatePY']).year() !== 1900 && moment(value['FieldWorkBeginDatePY']).year() !== 1) ? moment(new Date(value['FieldWorkBeginDatePY'])).format('MM/DD/YYYY') : '' : '',
            FieldWorkEndDateCY: value['FieldWorkEndDateCY'] ? (moment(value['FieldWorkEndDateCY']).year() !== 1900 && moment(value['FieldWorkEndDateCY']).year() !== 1) ? moment(new Date(value['FieldWorkEndDateCY'])).format('MM/DD/YYYY') : '' : '',
            FieldWorkEndDatePY: value['FieldWorkEndDatePY'] ? (moment(value['FieldWorkEndDatePY']).year() !== 1900 && moment(value['FieldWorkEndDatePY']).year() !== 1) ? moment(new Date(value['FieldWorkEndDatePY'])).format('MM/DD/YYYY') : '' : '',
            InitialDraftReadyCY: value['InitialDraftReadyCY'] ? (moment(value['InitialDraftReadyCY']).year() !== 1900 && moment(value['InitialDraftReadyCY']).year() !== 1) ? moment(new Date(value['InitialDraftReadyCY'])).format('MM/DD/YYYY') : '' : '',
            InitialDraftReadyPY: value['InitialDraftReadyPY'] ? (moment(value['InitialDraftReadyPY']).year() !== 1900 && moment(value['InitialDraftReadyPY']).year() !== 1) ? moment(new Date(value['InitialDraftReadyPY'])).format('MM/DD/YYYY') : '' : '',
            DraftFinancialStatementDueDateCY: value['DraftFinancialStatementDueDateCY'] ? (moment(value['DraftFinancialStatementDueDateCY']).year() !== 1900 && moment(value['DraftFinancialStatementDueDateCY']).year() !== 1) ? moment(new Date(value['DraftFinancialStatementDueDateCY'])).format('MM/DD/YYYY') : '' : '',
            DraftFinancialStatementDueDatePY: value['DraftFinancialStatementDueDatePY'] ? (moment(value['DraftFinancialStatementDueDatePY']).year() !== 1900 && moment(value['DraftFinancialStatementDueDatePY']).year() !== 1) ? moment(new Date(value['DraftFinancialStatementDueDatePY'])).format('MM/DD/YYYY') : '' : '',
            FinalFinancialStatementDueDateCY: value['FinalFinancialStatementDueDateCY'] ? (moment(value['FinalFinancialStatementDueDateCY']).year() !== 1900 && moment(value['FinalFinancialStatementDueDateCY']).year() !== 1) ? moment(new Date(value['FinalFinancialStatementDueDateCY'])).format('MM/DD/YYYY') : '' : '',
            FinalFinancialStatementDueDatePY: value['FinalFinancialStatementDueDatePY'] ? (moment(value['FinalFinancialStatementDueDatePY']).year() !== 1900 && moment(value['FinalFinancialStatementDueDatePY']).year() !== 1) ? moment(new Date(value['FinalFinancialStatementDueDatePY'])).format('MM/DD/YYYY') : '' : '',
            ManagementLetterDueDateCY: value['ManagementLetterDueDateCY'] ? (moment(value['ManagementLetterDueDateCY']).year() !== 1900 && moment(value['ManagementLetterDueDateCY']).year() !== 1) ? moment(new Date(value['ManagementLetterDueDateCY'])).format('MM/DD/YYYY') : '' : '',
            ManagementLetterDueDatePY: value['ManagementLetterDueDatePY'] ? (moment(value['ManagementLetterDueDatePY']).year() !== 1900 && moment(value['ManagementLetterDueDatePY']).year() !== 1) ? moment(new Date(value['ManagementLetterDueDatePY'])).format('MM/DD/YYYY') : '' : '',
            DocumentationCompletionDate: value['DocumentationCompletionDate'], /*End Scheduling and Financials Information Attribute */
            ClientRiskAssessmentRequired: value['ClientRiskAssessmentRequired'], /*Satart Client Acceptance Attribute */
            ClientRiskAssessment: value['ClientRiskAssessment'],
            IndependenceRepresentation: value['IndependenceRepresentation'],
            RestrictedEntity: value['RestrictedEntity'], /*End Client Acceptance Attribute */
            EngagementPartner: value['EngagementPartner'], /*Satart Partner Rotation Attribute */
            EngagementPartnerDate: value['EngagementPartnerDate'] ? (moment(value['EngagementPartnerDate']).year() !== 1900 && moment(value['EngagementPartnerDate']).year() !== 1) ? moment(new Date(value['EngagementPartnerDate'])).format('MM/DD/YYYY') : '' : '',
            EngagementPartnerComments: value['EngagementPartnerComments'],
            ConcurringPartner: value['ConcurringPartner'],
            ConcurringPartnerDate: value['ConcurringPartnerDate'] ? (moment(value['ConcurringPartnerDate']).year() !== 1900 && moment(value['ConcurringPartnerDate']).year() !== 1) ? moment(new Date(value['ConcurringPartnerDate'])).format('MM/DD/YYYY') : '' : '',
            ConcurringPartnerComments: value['ConcurringPartnerComments'],/*End Partner Rotation Attribute */
        };
        return parsedFilters;
    },
    isEngagementInformationPresent: function (data) {
        if (data.PCAOBorNonPublic !== '0' ||
            data.LevelofService !== '25' ||
            data.DescriptionofOtherService !== '' ||
            data.EntityStructure !== '25' ||
            data.DescriptionofOtherEntity !== '' ||
            data.FinancialStatementDate !== '' ||
            data.FinancialStatementFormat !== '0' ||
            data.CentralFileroomlocationFilelocation !== '' ||
            data.EngagementBinderName !== '' ||
            data.BasisofAccounting !== '0' ||
            data.LineofService !== '0' ||
            data.Industry !== '0' ||
            data.EngagementStatus !== '0' ||
            data.IndependentPartnerReviewRequired !== '0' ||
            data.TechnicalPartnerReviewRequired !== '0' ||
            data.PCAOBConcurringPartnerReviewRequired !== '0' ||
            data.PCAOBReviewRequired !== '0' ||
            data.ForeignOperations !== '0' ||
            data.RealizationRateCY !== '' ||
            data.RealizationRatePY !== '' ||
            data.FeesCY !== '' ||
            data.FeesPY !== '') {
            return true;
        } else
            return false;
    },
    isKeyDatesPresent: function (data) {
        if (data.ReportDateCY !== '' ||
            data.PlanningBeginDateCY !== '' ||
            data.PlanningBeginDatePY !== '' ||
            data.PlanningEndDateCY !== '' ||
            data.PlanningEndDatePY !== '' ||
            data.FieldWorkBeginDateCY !== '' ||
            data.FieldWorkBeginDatePY !== '' ||
            data.FieldWorkEndDateCY !== '' ||
            data.FieldWorkEndDatePY !== '' ||
            data.InitialDraftReadyCY !== '' ||
            data.InitialDraftReadyPY !== '' ||
            data.DraftFinancialStatementDueDateCY !== '' ||
            data.DraftFinancialStatementDueDatePY !== '' ||
            data.FinalFinancialStatementDueDateCY !== '' ||
            data.FinalFinancialStatementDueDatePY !== '' ||
            data.ManagementLetterDueDateCY !== '' ||
            data.ManagementLetterDueDatePY !== '' ||
            data.DocumentationCompletionDate !== '1') {
            return true;
        } else {
            return false;
        }
    },
    isAcceptancePresent: function (data) {
        if (data.ClientRiskAssessmentRequired !== '0' ||
        data.ClientRiskAssessment !== '0' ||
        data.IndependenceRepresentation !== '0' ||
        data.RestrictedEntity !== '11') {
            return true;
        } else {
            return false;
        }
    },
    isRotationPresent: function (data) {
        if (data.EngagementPartner !== '0' ||
            data.EngagementPartnerDate !== '' ||
            data.EngagementPartnerComments !== '' ||
            data.ConcurringPartner !== '0' ||
            data.ConcurringPartnerDate !== '' ||
            data.ConcurringPartnerComments !== ''
            ) {
            return true;
        } else {
            return false;
        }
    }
});

module.exports = Views;
},{"../../../jst/workspace/engagementlayout-template.html":45,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],116:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function(options) {
        this.extinstruction = options.instructionmodel ? options.instructionmodel : Reqres.request('Task:Instruction:EmptyModel:Enities');
        this.taskids = options.taskids;

        this.layout = this.GetLayout(this.options.taskids);

        this.listenTo(this.layout, 'extension:save:instruction', this.saveInstruction);

        return this.show(this.layout);
    },
    saveInstruction: function(obj) {
        var self = this;
        this.extinstruction.set('extensionInstructionField', obj.view.ui.textarea.val());
        //Reqres.request('tasks:instructions:Update:entities', this.taskids, 'Extension', this.extinstruction).done(function () {
        //    obj.view.$el.modal('hide');
        //});
        Reqres.request('tasks:instructions:Update:entities', this.taskids, 'Extension', this.extinstruction);
        obj.view.$el.modal('hide');
    },
    GetLayout: function(taskids) {
        return new Views.Layout({
            model: this.options.instructionmodel
        });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":117}],117:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    addInstructionLayoutTemplate = require('../../../jst/workspace/extaddinstruction-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
	className: 'ui small scrolling modal transition',
    initialize: function() {
    },
    ui: {
    	textarea: '#extension_instructions'
    },
    triggers: {
    	'click #extSaveInstruction':'extension:save:instruction'
    },
    template: addInstructionLayoutTemplate,
    templateHelpers: function() {
    	if(!_.isUndefined(this.model)){
        	return this.model.toJSON();    		
    	} else {
    		return {
    			extensionInstructionField: ''
    		}
    	}
    }
});

module.exports = Views;

},{"../../../jst/workspace/extaddinstruction-template.html":46,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/layout":84}],118:[function(require,module,exports){
var application = require('../../../application'),
	BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        this.layout = this.GetLayout(options.userlist);
        //console.log('init...', options);

        this.listenTo(this.layout, 'extension:bulkapply:clicked', function (obj) {                
            //console.log(obj.view.query);
            Events.trigger('extension:bulkapply:clicked',  obj.view.getFormData());
            $('.ui.modal').modal('hide');

        }, this);

        return this.show(this.layout);
    },

    GetLayout: function (users) {
        return new Views.Layout({
            userlist: users,
            //statuslist: status
        })
    }
});
},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":119}],119:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutExtensionBulkEditTemplate = require('../../../jst/workspace/extensioneditbulk-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutExtensionBulkEditTemplate,
    className: 'ui small scrolling modal transition',
    initialize: function() {
        this.lookups = {
                filingmethod: {
                    "": "7",
                    "Paper": "0",
                    "eFile": "1",
                    "PBC": "2",
                    "Piggyback Fed": "3",
                    "EFT Sent": "4",
                    "No Filing Required": "5"
                },
                extprepmethod: {
                    "": "0",
                    "Use Withholding Amounts": "1",
                    "File With Zeros": "2",
                    "See Projections": "3"
                },
                paymentmethod: {
                    "": "0",
                    "Auto Withdrawal From Client Acct.": "1",
                    "Check Mailed by Client": "2",
                    "Check Mailed by Firm": "3",
                    "No Payment Due": "4",
                    "Payment via Tax Agency Website": "5"
                },
                filingOrNot: {
                    "Filing": "40",
                    "Not Filing": "54"
                }

            },

            this.query = {
                //extensionFiledOn: '', // moment(new Date()).format('MM/DD/YYYY'),
                whofiledextensionId: 0,
                //whofiledextension: '',
                //extensionfilingTypeId: '7',
                extensionfilingType: '',
                //extensionPrepMethodId: '0',
                extensionPrepMethod: '',
                //payMethodId: '0',
                payMethod: ''
            }
    },
    events: {},
    regions: {},
    templateHelpers: function() {
        var self = this;        
        return {
            canManageExtension: _.where(userContext.Result.Rights, {
                module_id: 13
            })[0].access === 0 ? false : true,
        }
    },
    triggers: {
        'click #applyextensionchanges': 'extension:bulkapply:clicked'
    },

    onDomRefresh: function() {
        var self = this;
        this.$('a[data-content]').popup({
            debug: false
        });
        $('#extfilingmtd').dropdown({
            onChange: function(value, text, $choice) {
                self.query.extensionfilingType = text;
            }
        });
        $('#extperpmtd').dropdown({
            onChange: function(value, text, $choice) {
                self.query.extensionPrepMethod = text;
            }
        });
        $('#paymethod').dropdown({
            onChange: function(value, text, $choice) {
                self.query.payMethod = text;
            }
        });


        var today = new Date();
        var datefield = new Pikaday({
            field: self.$('#dateextfiled')[0],
            format: 'MM/DD/YYYY',
            //defaultDate: self.today,
            //setDefaultDate: function () {
            //    self.query.extensionFiledOn = today.format('MM/DD/YYYY');
            //},
            onSelect: function() {
                self.query.extensionFiledOn = this.getMoment().format('MM/DD/YYYY');
                self.query.whofiledextensionId = loggedinuserid;
                self.query.whofiledextension = loggedinUser;
            }
        });

        var data = this.options.userlist.map(function(d) {
            d.title = d.fullName;
            return d;
        });
        $('#userlist').search({
            source: data,
            minCharacters: 0,
            maxResults: data.length,
            searchFields: ['title'],
            onSelect: function(result) {
                self.query.whofiledextensionId = result.Id;
            }
        });

    },

    getFormData: function() {
        //console.log(this.query);
    //    this.query.extensionDCN = $('#extdcn').val().trim(),
    //    this.query.payAmount = $('#payamount').val().trim(),
    //this.query.comments = $('#extcomments').val().trim();

        var formdata = this.$('.ui.form').form('get values');
        var fields = _.defaults(formdata, this.query);
        var changes = _.omit(fields, function (val, key) {
            return _.isEmpty(val.toString());
        });

        return changes;
    }
});

module.exports = Views;

},{"../../../jst/workspace/extensioneditbulk-template.html":48,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],120:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        extensiondetails = Reqres.request('Entities.Extensions.Details', options.taskids);
        this.layout = this.GetLayout(this.options.taskids);

        return this.show(this.layout);
    },
    GetLayout: function(taskids) {
        return new Views.Layout({
            taskids: taskids,
            extensiondetails: extensiondetails,
            clientinfo: this.options.clientinfo,
            contactdetails: this.options.contactdetails
        });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":121}],121:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutTemplate = require('../../../jst/workspace/extensiondetails-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutTemplate,
    className: 'ui large scrolling modal',
    initialize: function(options) {
        //console.log(this, options);
    },
    templateHelpers: function() {
        return {
            clientinfo: this.options.clientinfo,
            contactdetails: this.options.contactdetails
        }
    },
    triggers: {

    },
    regions: {

    },
    onRender: function() {
        var self = this;
        this.$('a[data-content]').popup({
            debug: false
        });
        _.each(this.options.extensiondetails, function(detail) {
            var row = '';
            if (_.has(detail, 'statusChangedFrom')) {
                row = '<tr>' + '<td>' + detail.statusChangedFrom + '</td>' + '<td>' + detail.statusChangedTo + '</td>' + '<td>' + detail.changedBy + '</td>' + '<td>' + moment(detail.changedOn).format('MM/DD/YYYY') + '</td>' + '<td>' + detail.assignedToName + '</td>' +
                    '</tr>';
                self.$('tbody').append(row);
            }
        });
    },
});

module.exports = Views;

},{"../../../jst/workspace/extensiondetails-template.html":47,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],122:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        extensionhistory = Reqres.request('Entities.Extensions.Details', options.taskids);
        this.layout = this.GetLayout(this.options.taskids);

        return this.show(this.layout);
    },
    GetLayout: function (taskids) {
        return new Views.Layout({
            taskids: taskids,
            extensionhistory: extensionhistory,
            clientinfo: this.options.clientinfo,
            contactdetails: this.options.contactdetails
        });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":123}],123:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutTemplate = require('../../../jst/workspace/extensionhistory-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutTemplate,
    className: 'ui large scrolling modal',
    initialize: function(options) {
        //console.log(this, options);
    },
    templateHelpers: function() {
        return {
            clientinfo: this.options.clientinfo,
            contactdetails: this.options.contactdetails
        }
    },
    triggers: {

    },
    regions: {

    },
    onRender: function() {
        var self = this;
        this.$('a[data-content]').popup({
            debug: false
        });
        _.each(this.options.extensionhistory, function(detail) {
            var row = '';
            if (_.has(detail, 'jurisdictionName')) {
                var extdate = moment(detail.dateExtFiled).format('MM/DD/YYYY');
                extdate = (extdate === '01/01/1900') ? '' : extdate;
                row = '<tr>' + '<td>' + detail.jurisdictionName + '</td>' + '<td>' + detail.exttype + '</td>' + '<td>' + detail.comments + '</td>' + '<td>' + detail.extendedBy + '</td>' + '<td>' + extdate + '</td>' + '<td>' + detail.payMethod + '</td>' + '<td>' + detail.payAmount + '</td>' +
                    '</tr>';
                self.$('tbody').append(row);
            }
        });
    },
});

module.exports = Views;

},{"../../../jst/workspace/extensionhistory-template.html":49,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],124:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
    var API = {};

    context.startWithParent = false;
    context.Show = require('./show/controller');
    context.Move = require('./move/controller');
    context.Details = require('./details/controller');
    context.History = require('./history/controller');
    context.BulkEdit = require('./bulkedit/controller');
    context.addinstruction = require('./addinstruction/controller');

    API = {
        show: function (options) {
            if (!_.isUndefined(this.showController)) {
                this.showController.destroy();
            }
            this.showController = new context.Show.Controller({
                region: options.region,
                collection: options.tasks,
                controlsheet: options.controlsheet,
                taskInstr: options.taskInstr,
                userAutoSuggest: options.userAutoSuggest,
                extCollection: options.extCollection
            });
        },

        move: function (ids, users) {
            return new context.Move.Controller({
                region: application.rootView.modalWindow,
                taskIds: ids,
                userslist: users
            });
        },

        details: function (ids, clientinfo, clientcontact) {
            return new context.Details.Controller({
                region: application.rootView.modalWindow,
                taskids: ids,
                clientinfo: clientinfo,
                contactdetails: clientcontact
            });
        },

        history: function (ids, clientinfo, clientcontact) {
            return new context.History.Controller({
                region: application.rootView.modalWindow,
                taskids: ids,
                clientinfo: clientinfo,
                contactdetails: clientcontact
            });
        },

        bulkedit: function (options) {
            return new context.BulkEdit.Controller({
                region: application.rootView.modalWindow,
                //statuslist: options.statuslist,
                userlist: options.userlist,
                //taskId: options.taskid
            });
        },

        addInstruction: function (options) {
            if (!_.isUndefined(this.addinstructioncontroller)) {
                this.addinstructioncontroller.destroy();
            }

            this.addinstructioncontroller = new context.addinstruction.Controller({
                region: application.rootView.modalWindow,
                instructionmodel: options.extInstructions,
                taskids: options.taskids
            });
        }
    };

    context.on('start', function (options) {
        return API.show(options);
        //below code if using postmessage...
        // if('tasks' in options){
        // 	return API.show(options);
        // } else {
        // 	// $(window).on('message', function (e){
        // 	// 	options.tasks = JSON.parse(e.originalEvent.data);
        // 	// 	API.show(options);
        // 	// });
        // }
    });

    Events.on('stop:info', function () {
        return context.stop();
    });

    Events.on('extension:move:clicked', function (taskids, userlist) {
        return API.move(taskids, userlist);
    });

    Events.on('extension:details:clicked', function (taskids, info, contactdetaisl) {
        return API.details(taskids, info, contactdetaisl);
    });

    Events.on('extension:history:clicked', function (taskids, info, contactdetaisl) {
        return API.history(taskids, info, contactdetaisl);
    });

    Events.on('extension:bulkedit:clicked', function (options) {
        return API.bulkedit(options);
    });

    Events.on('ext:addinstruction', function (options) {
        return API.addInstruction(options);
    });
};

},{"../../lib/config/events":68,"./addinstruction/controller":116,"./bulkedit/controller":118,"./details/controller":120,"./history/controller":122,"./move/controller":125,"./show/controller":127}],125:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        extensionstatus = Reqres.request('firmsettings:moveextensionstatus:entities');
        extensionworkflow = Reqres.request('firmsettings:extensionworkflow:entities', options.taskIds);
        //console.log(extensionstatus, extensionworkflow);
        this.layout = this.GetLayout(this.options.userslist, extensionworkflow, options.taskIds);

        this.listenTo(this.layout, 'move:extension:save:clicked', function (obj) {
            this.moveExtension(obj.view, this.layout.selected, options.taskIds);
        });
        return this.show(this.layout);
    },

    moveExtension: function (view, options, taskIds) {
        if (options.statusid !== 0) {
            //$.post(window.routemap + 'api/extensions/move/' + options.statusid + '/' + options.userid + '/' + taskIds)
            $.post(window.routemap + 'api/extensions/move/' + options.statusid + '/' + options.userid, { '': taskIds })
            .done(function (response) {
                if (response === 'success') {
                    $('.ui.modal').modal('hide');
                    Events.trigger('extension:moved');
                    Events.trigger('task:refresh:grid');
                }
            })
            .fail(function (response) { });
        }        
    },

    GetLayout: function (users, extensionworkflow, taskIds) {
        return new Views.Layout({
            userslist: users,
            statuslist: extensionstatus,
            extensionworkflow: extensionworkflow,
            taskIds: taskIds
        });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":126}],126:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutTemplate = require('../../../jst/workspace/moveextension-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutTemplate,
    className: 'ui small modal',
    triggers: {
        'click #savemove': 'move:extension:save:clicked',
    },
    regions: {

    },

    onRender: function () {
        this.selected = { userid: 0, statusid: 0 };
        var self = this;
        this.$el.find('.ui.checkbox').checkbox();
        this.$('a[data-content]').popup({
            debug: false
        });
        
        var users = this.options.userslist.map(function (user) {
            user.title = user.fullName;
            return user;
        });
        var status = this.options.statuslist.map(function (status) {
            status.Name = status.Name.trim();
            status.title = status.Name;
            return status;
        });

        this.$('#users').search({
            source: users,
            maxResults: 7,
            minCharacters: 1,
            onSelect: function (result) {
                console.log('select')
                _.delay(function () {
                    if (result.title === self.$('#users input').val()) {
                        self.selected.userid = result.Id;
                    } else {
                        self.selected.userid = _.where(users, {
                            'fullName': self.$('#users input').val()
                        })[0].Id;
                    }
                }, 200)
            },
            onResultsClose: function () {
                _.delay(function () {
                    var ele = self.$('#users input');
                    var value = _.where(users, { fullName: ele.val() });
                    if (value.length) {
                        console.log(self.selected.userid);
                        return;
                    }
                    ele.val("");
                    self.selected.userid = 0;

                    console.log(self.selected.userid);
                }, 200);
            }
        });

        this.$('#status').search({
            source: status,
            maxResults: status.length,
            minCharacters: 0,
            searchFullText: true,
            onSelect: function (result) {
                self.selected.statusid = result.id;
                if (result.id === 56) {
                    self.selected.userid = 0;
                    self.$('#usersblock').hide().find('input').val("");
                } else {
                    self.$('#usersblock').show();
                }
            }
        });
        
        if (this.options.taskIds.split(',').length === 1) {
            window.userslist = self.options.userslist;
            window.extensionworkflow = self.options.extensionworkflow.assignedUserId;
            console.log(_.where(self.options.userslist, { 'Id': 24041 }), _.where(self.options.userslist, { 'Id': 240411 }));

            if (this.options.extensionworkflow.toStatusId !== 0 && !_.isEmpty(_.where(self.options.statuslist, { 'id': self.options.extensionworkflow.toStatusId }))) {
                self.$('#status input').val(_.where(self.options.statuslist, { 'id': self.options.extensionworkflow.toStatusId })[0].Name);
                self.selected.statusid = self.options.extensionworkflow.toStatusId;
            }

            if (this.options.extensionworkflow.assignedUserId !== 0 && !_.isEmpty(_.where(self.options.userslist, { 'Id': self.options.extensionworkflow.assignedUserId }))) {
                self.$('#users input').val(_.where(self.options.userslist, { 'Id': self.options.extensionworkflow.assignedUserId })[0].fullName);
                self.selected.userid = self.options.extensionworkflow.assignedUserId;
                self.$('#status input').blur();
                self.$('#users div.results').removeClass('visible').addClass('hidden');
            }

            if (this.options.extensionworkflow.lockStatus) {
                self.$('#status input').prop('disabled', true);
            }
        }
    }
});

module.exports = Views;

},{"../../../jst/workspace/moveextension-template.html":54,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],127:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var taskids, extensions, assignedPersonList, tasksInstrctions, isSingleTask = false;
        if (options.controlsheet !== true) {
            taskids = _.isUndefined(options.collection) ? window.localStorage.getItem('extensions_TaskIds').toString() : _.pluck(options.collection, 'id').toString();

            extensions = Reqres.request('Entities.Extensions', taskids);
            var userlist = options.userAutoSuggest ? options.userAutoSuggest : Reqres.request('User:entities:AutoSuggest');

            if (window.localStorage.getItem('extension_clientinfo') !== null) {
                var clientInfo = window.localStorage.getItem('extension_clientinfo').split('_');
                var clientinfo = clientInfo[0];
                clientinfo = clientinfo + (clientInfo[1] === '' ? '' : ' (' + clientInfo[1] + ')');
                clientinfo = clientinfo + (clientInfo[6] === '' ? '' : ' | ' + clientInfo[6]);
                clientinfo = clientinfo + (clientInfo[3] === '' ? '' : ' | ' + clientInfo[3]);
                clientinfo = clientinfo + (clientInfo[5] === '' ? '' : ' | ' + clientInfo[5]);
                $('#clientinfo').text(clientinfo);
                var clientcontact = '';
                clientcontact = clientcontact + (clientInfo[4] === '' ? '' : ' E: ' + clientInfo[4]);
                clientcontact = clientcontact + (clientInfo[2] === '' ? '' : ' | P: ' + clientInfo[2]);
                $('#clientcontact').text(clientcontact);
            }

            assignedPersonList = _.map(userlist, function (obj) {
                return _.pick(obj, 'fullName', 'Id', 'branchName');
            });
        } else {
            var userlist = options.userAutoSuggest ? options.userAutoSuggest : Reqres.request('User:entities:AutoSuggest');
            assignedPersonList = _.map(userlist, function (obj) {
                return _.pick(obj, 'fullName', 'Id', 'branchName');
            });
            taskids = options.collection.get('id').toString();
            extensions = options.extCollection;
            tasksInstrctions = options.taskInstr;
        }

        window.taskids = taskids;
        isSingleTask = taskids.split(',').length === 1 ? true : false;

        if (isSingleTask && !options.controlsheet) {
            tasksInstrctions = Reqres.request('tasks:instructions:Get:entities', taskids.toString());
        }

        var userData = [];
        _.each(assignedPersonList, function (obj) {
            userData.push(
               { Id: obj.Id, fullName: firmContext.Result.Location.length > 1 ? obj.Id !== 0 ? obj.fullName + '  |  ' + obj.branchName : obj.fullName : obj.fullName, userName: obj.fullName }
            );
        });

        this.layout = this.GetLayout(isSingleTask, tasksInstrctions);
        if (!isSingleTask) {
            $('#clientinfoheader').hide();
            //$('#details').hide();
            //$('#history').hide();
        }

        this.listenTo(this.layout, 'show', (function (_this) {
            return function () {
                return _this.GetDataGrid(extensions, userData, isSingleTask);
            }
        }(this)));

        this.listenTo(this.layout, 'extension:create:clicked', function (obj) {
            var self = this;
            //Events.trigger('extension:bulkedit:clicked', {
            //    userlist: assignedPersonList,
            //});
            $('#loading > div > div').text('Creating....');
            $('#loading').show();
            $.post(window.routemap + 'api/extensions/create', { '': taskids.toString() })
                .done(function (response) {
                    if (response === 'success') {
                        extensions.fetch({
                            reset: true,
                            data: {
                                query: taskids.toString()
                            }
                        }).done(function () {
                           
 
                            $('#loading').hide();
                            self.GetDataGrid(extensions, userData, isSingleTask);
                        });
                    }
                }).fail(function (response) {
                    $('#loading').hide();
                });

        }, this);

        this.listenTo(this.layout, 'extensions:save:clicked', function () {
            $('#loading').show();
            extensions.saveAll({
                success: function () { },
                error: function () { }
            }).done(function () {
                extensions.fetch({
                    reset: true,
                    data: {
                        query: taskids.toString()
                    }
                }).done(function () {
                    $('#saveExtInfo')[0].innerText = 'Save';
                    $('#saveExtInfo').hide();
                    $('#loading').hide();
                    if (options.controlsheet) {                       
                        Events.trigger('jurisdiction:Add:Completed');
                    }
                });
            }).fail(function () {
                $('#saveExtInfo')[0].innerText = 'Save';
                $('#saveExtInfo').hide();
                $('#loading').hide();
            });
            this.deselectRecords(extensions);
        });

        this.listenTo(this.layout, 'extension:move:clicked', function (obj) {
            Events.trigger('extension:move:clicked', taskids, assignedPersonList);
        }, this);

        this.listenTo(this.layout, 'extension:details:clicked', function (obj) {
            Events.trigger('extension:details:clicked', taskids, clientinfo, clientcontact);
        }, this);

        this.listenTo(this.layout, 'extension:history:clicked', function (obj) {
            Events.trigger('extension:history:clicked', taskids, clientinfo, clientcontact);
        }, this);

        this.listenTo(Events, 'jurisdiction:change:extensions:refreshGrid', function () {
            extensions.fetch({
                reset: true,
                data: {
                    query: taskids.toString()
                }
            });
        }, this);

        this.listenTo(Events, 'extension:moved', function () {
            extensions.fetch({
                reset: true,
                data: {
                    query: taskids.toString()
                }
            });
        }, this);

        this.listenTo(this.layout, 'extension:undo:clicked', function (obj) {
            $('#loading').show();
            $.post(window.routemap + 'api/extensions/undo/' + _.pluck(extensions.selected, 'id').toString())
                .done(function (response) {
                    if (response === 'success') {
                        extensions.fetch({
                            reset: true,
                            data: {
                                query: taskids.toString()
                            }
                        }).done(function () {
                            if (options.controlsheet) {                              
                                Events.trigger('jurisdiction:Add:Completed');
                            }
                            $('#loading').hide();
                        });
                    }
                }).fail(function (response) {
                    $('#loading').hide();
                });
            this.deselectRecords(extensions);
        }, this);

        this.listenTo(this.layout, 'extension:closeextension:clicked', function (obj) {
            $('#loading').show();
            $.post(window.routemap + 'api/extensions/close/', { '': _.pluck(extensions.models, 'id').toString() })
                .done(function (response) {
                    if (response === 'success') {
                        extensions.fetch({
                            reset: true,
                            data: {
                                query: taskids.toString()
                            }
                        }).done(function () {
                            if (options.controlsheet) {                               
                                Events.trigger('jurisdiction:Add:Completed');
                            }
                            $('#loading').hide();
                        });
                    }
                }).fail(function (response) {
                    $('#loading').hide();
                });
            this.deselectRecords(extensions);
        }, this);

        this.listenTo(this.layout, 'extension:bulkedit:clicked', function (obj) {
            Events.trigger('extension:bulkedit:clicked', {
                userlist: assignedPersonList,
            });
        }, this);

        this.listenTo(Events, 'extension:bulkapply:clicked', function (options) {
            $('#loading').show();
            var cellEdited = [];
            _.each(extensions.selected, function (model) {
                //model.set(options, { silent: true });
                model.set(options);// if extensionFiledOn attribute changes Save and Extend button as to appear
                //model.deselect();
                _.mapObject(options, function (val, key) {
                    switch (key) {
                        case 'extensionFiledOn':
                            cellEdited.push({ 'colIndex': 10, 'taskId': model.get('taskId'), 'subtaskId': model.get('id') });
                            break;
                        case 'extensionfilingTypeId':
                            cellEdited.push({ 'colIndex': 9, 'taskId': model.get('taskId'), 'subtaskId': model.get('id') });
                            break;
                        case 'extensionPrepMethodId':
                            cellEdited.push({ 'colIndex': 5, 'taskId': model.get('taskId'), 'subtaskId': model.get('id') });
                            break;
                        case 'payMethodId':
                            cellEdited.push({ 'colIndex': 6, 'taskId': model.get('taskId'), 'subtaskId': model.get('id') });
                            break;
                        case 'extensionDCN':
                            cellEdited.push({ 'colIndex': 12, 'taskId': model.get('taskId'), 'subtaskId': model.get('id') });
                            break;
                        case 'payAmount':
                            cellEdited.push({ 'colIndex': 7, 'taskId': model.get('taskId'), 'subtaskId': model.get('id') });
                            break;
                        case 'comments':
                            cellEdited.push({ 'colIndex': 16, 'taskId': model.get('taskId'), 'subtaskId': model.get('id') });
                            break;
                        case 'whofiledextensionId':
                            cellEdited.push({ 'colIndex': 11, 'taskId': model.get('taskId'), 'subtaskId': model.get('id') });
                            break;
                    }
                });
            });

            Events.trigger('extensions:refreshGrid', cellEdited);
            $('#loading').hide();
            $('#saveExtInfo').show();
        });

        this.listenTo(this.layout, 'extension:extenddates:clicked', function (options) {
            $('#loading').show();
            _.each(extensions.selected, function (model) {
                model.set({
                    'extensionFiledOn': moment(new Date()).format('MM/DD/YYYY'),
                    'whofiledextensionId': loggedinuserid,
                    'whofiledextension': loggedinUser
                });
                model.deselect();
            });
            Events.trigger('extensions:refreshGrid');
            $('#loading').hide();
        });

        this.listenTo(this.layout, 'extension:piggyback:clicked', function (obj) {
            var vw = new Views.DataGrid();
            _.each(extensions.models, function (model) {
                if (model.get('isNotFiled') !== true && (model.get('stateName') === 'Federal' || model.get('extensionfilingTypeId') === 3)) {
                    if ($('#piggyback').checkbox('is checked')) {
                        model.select();
                        //model.set({
                        //    'Action': 'extend'
                        //});
                    } else {
                        model.deselect();
                        //model.set({
                        //    'Action': ''
                        //});
                    }
                }
            });
            //vw.saveAndExtend(extensions);
            Events.trigger('extensions:refreshGrid');
        });

        this.listenTo(this.layout, 'extension:addinstruction:clicked', function () {
            Events.trigger('ext:addinstruction', { extInstructions: tasksInstrctions, taskids: taskids });
        });

        return this.show(this.layout, {
            loading: true
        });
    },

    deselectRecords: function (collection) {
        _.each(collection.selected, function (model) {
            model.deselect();
        });
    },

    GetLayout: function (isSingleTask, taskinstructions) {
        return new Views.Layout({
            isSingleTask: isSingleTask,
            taskinstructions: taskinstructions,
            controlsheet: this.options.controlsheet
        });
    },

    GetDataGrid: function (extensionCollection, userlist, isSingleTask) {
        var dataGrid = new Views.DataGrid({
            collection: extensionCollection,
            userlist: userlist,
            isSingleTask: isSingleTask
        });
        return this.show(dataGrid, {
            loading: true,
            region: this.layout.gridData
        });
    },

    undoLastExtension: function (subtaskIds) {

    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":128}],128:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutExtensionTemplate = require('../../../jst/workspace/extensionlayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

var ColumnAttributes = function (attr, celltype, readonly, align, renderer) {
    var columnSettings;

    function colString(item, value) {
        // console.log('clad string');
        if (_.isUndefined(value)) return item.get(attr);
    };

    function colDate(item, value) {
        if (_.isUndefined(value)) {
            var year = moment(item.get(attr)).year();
            return (year != 1900 && year != 1901 && year != 1 ? moment(item.get(attr)).format('l') : '');
        }
    };

    function colBool(item, value) {
        if (_.isUndefined(value)) return _.isUndefined(item.selected) ? false : item.selected;
        return (value ? item.select() : item.deselect());
    }

    function colLink(item, value) {
        if (_.isUndefined(value)) {
            return '<a href="/routing" target="_blank">' + item.get(attr) + '</a>';
        } else {
            return;
        }
    }

    switch (celltype) {
        case 'html':
            columnSettings = {
                data: colLink,
                type: 'text',
                readOnly: readonly,
                className: 'htLeft',
                renderer: 'html'
            }
            break;
        case 'checkbox':
            columnSettings = {
                data: colBool,
                type: 'checkbox',
                readOnly: readonly,
                className: 'htCenter',
                // colWidths: 20
            }
            break;
        case 'numeric':
            columnSettings = {
                data: colString,
                readOnly: readonly,
                className: 'htCenter'
            }
            break;
        case 'date':
            columnSettings = {
                data: colDate,
                type: 'text',
                readOnly: readonly,
                className: 'htLeft',
                dateFormat: 'MM/DD/YYYY'
            }
            break;
        default:
            columnSettings = {
                data: colString,
                type: 'text',
                className: align,
                readOnly: readonly
            };
            break;
    }

    return columnSettings;
};

var titleColumnRenderer = function (instance, td, row, col, prop, value, cellProperties) {
    td.innerHTML = value;
    $(td).attr('title',value)
};

Views.DataGrid = ItemView.extend({
    template: false,
    lookups: {
        filingmethod: {
            "": "7",
            "Paper": "0",
            "eFile": "1",
            "PBC": "2",
            "Piggyback Fed": "3",
            "EFT Sent": "4",
            "No Filing Required": "5",
            "Filed by Client": "6"
        },
        extprepmethod: {
            "": "0",
            "Use Withholding Amounts": "1",
            "File With Zeros": "2",
            "See Projections": "3"
        },
        paymentmethod: {
            "": "0",
            "Auto Withdrawal From Client Acct.": "1",
            "Check Mailed by Client": "2",
            "Check Mailed by Firm": "3",
            "No Payment Due": "4",
            "Payment via Tax Agency Website": "5"
        },
        filingOrNot: {
            "Filing": "40",
            "Not Filing": "54"
        }

    },
    initialize: function () {
        var _this = this;
        this.listenTo(this.collection, 'reset', function () {
            this.isreset = true;
            this.refreshGrid();
        });
        this.listenTo(this.collection, 'change:isNotFiled', this.refreshGrid, this);
        this.listenTo(this.collection, 'change:extensionFiledOn', this.saveAndExtend, this);

        Events.on('extensions:refreshGrid', function (applycellEdited) {
            if (!_.isUndefined(applycellEdited)) {
                $.each(applycellEdited, function (index, ele) {
                    _.each(_this.collection.models, function (model) {
                        if (model.get('taskId') === ele['taskId'] && model.get('id') === ele['subtaskId'])
                            _this.cellEdited.push({ 'rowIndex': _.indexOf(_this.collection.models, model), 'colIndex': ele['colIndex'] });
                    });
                });
            }
            _this.refreshGrid();
        });
        this.listenTo(this.collection, 'selected', function () {
            //console.log('select');
            this.showHideOptions(true);
        });

        this.listenTo(this.collection, 'select:none', function () {
            //console.log('deselect');
            this.showHideOptions(false);
        });
        this.cellEdited = [];
        this.isreset = false;
    },

    events: {
        'click th[data-keyname]': 'sortextgrid'
    },

    sortextgrid: function (e) {
        this.collection.sortData(e.currentTarget.dataset.keyname);
    },

    getHeaderSettings: function () {
        var headers = [{
            displayName: '',
            keyName: '',
            fullName: '',
            colWidth: 1.5
        }, {
            displayName: 'Client',
            keyName: 'clientName',
            fullName: 'Client Name',
            colWidth: 8
        }, {
            displayName: 'Jurisdiction',
            keyName: 'stateName',
            fullName: 'Jurisdiction',
            colWidth: 8
        }, {
            displayName: 'Form',
            keyName: 'form',
            fullName: 'Form',
            colWidth: 4
        }, {
            displayName: 'Jur Date Completed',
            keyName: 'completed_on',
            fullName: 'Jur Date Completed',
            colWidth: 4.5
        }, {
            displayName: 'EXT Prep Method',
            keyName: 'extensionPrepMethod',
            fullName: 'EXT Prep Method',
            colWidth: 6
        }, {
            displayName: 'Pay Method',
            keyName: 'payMethod',
            fullName: 'Pay Method',
            colWidth: 6
        }, {
            displayName: 'Pay Amount',
            keyName: 'payAmount',
            fullName: 'Pay Amount',
            colWidth: 3
        }, {
            displayName: 'Not Filing',
            keyName: 'isNotFiled',
            fullName: 'Not Filing ',
            colWidth: 2
        }, {
            displayName: 'EXT Filing Method',
            keyName: 'extensionfilingType',
            fullName: 'EXT Filing Method',
            colWidth: 6
        }, {
            displayName: 'Date EXT Filed',
            keyName: 'extensionFiledOn',
            fullName: 'Date EXT Filed ',
            colWidth: 5
        }, {
            displayName: 'EXT Filed By',
            keyName: 'whofiledextension',
            fullName: 'EXT Filed By',
            colWidth: 8
        }, {
            displayName: 'Ext DCN',
            keyName: 'extensionDCN',
            fullName: 'Ext DCN',
            colWidth: 3
        }, {
            displayName: 'Original Due Date',
            keyName: 'original_due_on',
            fullName: 'Original Due Date',
            colWidth: 5
        }, {
            displayName: 'Current Due Date',
            keyName: 'current_due_on',
            fullName: 'Current Due Date',
            colWidth: 5
        }, {
            displayName: 'Next EXT Date',
            keyName: 'nextExtension_on',
            fullName: 'Next EXT Date',
            colWidth: 5
        }, {
            displayName: 'Comments',
            keyName: 'comments',
            fullName: 'Comments',
            colWidth: 6
        }];

        return headers;
    },

    saveAndExtend: function () {
        arguments[0].set('Action', 'extend');
        //console.log(arguments, arguments[0]);
        this.saveAndExtendText();
    },

    saveAndExtendText: function () {
        $('#saveExtInfo').text('Save and Extend');
        $('#saveExtInfo').show();
    },

    showHidePiggyBackOption: function () {
        var show = false;
        this.collection.each(function (model) {
            if (model.get('extensionfilingTypeId') === 3 && model.get('stateName') !== 'Federal') {
                if (model.get('isNotFiled') !== true && model.get('isNotFiled') !== true) {
                    show = true;
                }
            }
        });
        show ? $('#piggyoption').show() : $('#piggyoption').hide();
    },

    setExtensionStatus: function () {
        if (this.collection.length !== 0) {
            var model = _.filter(this.collection.models, function (model) {
                return model.get('form') !== 'none';
            })[0];
            $('#extstatus').text('EXT Status: ' + model.get('extensionStatus'));
            $('#extmovedto').text('Who Has EXT: ' + model.get('extended_moveto'));
        }
    },

    refreshGrid: function () {
        var grid = this.$el.handsontable('getInstance');
        if (!_.isUndefined(grid)) {
            this.showHidePiggyBackOption();
            this.setExtensionStatus();
            return grid.render();
        }
    },
    onDomRefresh: function () {
        var self = this;
        var headersettings = this.getHeaderSettings(),
            headers = _.pluck(headersettings, 'displayName');

        this.$el.css({
            'width': '100%',
        });

        $('.sprite.info').popup({
            debug: false
        });

        if (this.collection.length === 0) {
            if (this.options.isSingleTask) {
                $('#ui_grid_margin').addClass('hideItem');
                $('#createextension').removeClass('hideItem');
                if (!_.where(userContext.Result.Rights, {
                    module_id: 29
                })[0].access) {
                    $('#createext').text('You do not have rights to create Extension');
                    $('#createext').css({
                        'background-color': 'white',
                        'color': '#e07b53',
                        'pointer-events': 'none'
                    });
                }
            } else {
                this.$el.html("<b>No Records Found</b>");
            }
            return;
        } else {
            $('#ui_grid_margin').removeClass('hideItem');
            $('#createextension').addClass('hideItem');
            window.col = this.collection.models;
            //var model = _.filter(this.collection.models, function(model) {
            //    return model.get('form') !== 'none';
            //})[0];
            //$('#extstatus').text('EXT Status: ' + model.get('extensionStatus'));
            //$('#extmovedto').text('Who Has EXT: ' + model.get('extended_moveto'));
            this.setExtensionStatus();
        }

        this.$el.handsontable({
            data: this.collection,
            columns: [
                ColumnAttributes('', 'checkbox', false),
                ColumnAttributes('clientName', 'text', true),
                ColumnAttributes('stateName', 'text', true),
                ColumnAttributes('form', 'text', true),
                ColumnAttributes('completed_on', 'date', true), {
                    type: 'dropdown',
                    allowInvalid: false,
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('extensionPrepMethod');
                        } else {
                            model.set('extensionPrepMethodId', self.lookups.extprepmethod[value]);
                            model.set('extensionPrepMethod', value);
                            return model.get('extensionPrepMethod');
                        }
                    },
                    trimDropdown: false,
                    source: _.keys(this.lookups.extprepmethod),
                    strict: true,
                }, {
                    type: 'dropdown',
                    allowInvalid: false,
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('payMethod');
                        } else {
                            model.set('payMethodId', self.lookups.paymentmethod[value]);
                            model.set('payMethod', value);
                            return model.get('payMethod');
                        }
                    },
                    trimDropdown: false,
                    source: _.keys(this.lookups.paymentmethod),
                    strict: true,
                }, {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('payAmount');
                        } else {
                            model.set('payAmount', value);
                            return model.get('payAmount');
                        }
                    },
                    readOnly: false,
                    type: 'text'
                },
                //ColumnAttributes('', 'text', false),
                {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('isNotFiled');
                        } else {
                            //value === false ? model.set('status', 'In Process') : model.set('status', 'Not Filing');
                            return model.set('isNotFiled', value);
                        }
                    },
                    type: 'checkbox',
                    className: 'htCenter'
                }, {
                    type: 'dropdown',
                    allowInvalid: false,
                    strict: true,
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('extensionfilingType');
                        } else {
                            model.set('extensionfilingTypeId', self.lookups.filingmethod[value]);
                            model.set('extensionfilingType', value);
                            return model.get('extensionfilingType');
                        }
                    },
                    trimDropdown: false,
                    source: _.keys(this.lookups.filingmethod)
                }, {
                    type: 'date',
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            var year = moment(model.get('extensionFiledOn')).year();
                            return (year != 1900 && year != 1901 && year != 1 ? moment(model.get('extensionFiledOn')).format('l') : '');
                        } else {
                            var year = moment(model.get('extensionFiledOn')).year();
                            var selected = _.where(self.options.userlist, {
                                Id: loggedinuserid
                            })[0];
                            model.set('whofiledextensionId', selected.Id);
                            model.set('whofiledextension', selected.userName);
                            model.set('extensionFiledOn', value);
                            return value;
                        }
                    },
                    dateFormat: 'MM/DD/YYYY',
                    readOnly: false,
                    correctFormat: true,
                }, {
                    type: 'dropdown',
                    allowInvalid: false,
                    strict: true,
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('whofiledextension');
                        } else {
                            var result = _.where(self.options.userlist, {
                                'fullName': value.trim()
                            });
                            if (firmContext.Result.Location.length > 1 && result.length === 0) {
                                result = _.where(self.options.userlist, {
                                    'userName': value.trim()
                                });
                            }
                            result.length != 0 ? model.set('whofiledextensionId', result[0].Id) : model.set('whofiledextensionId', 0);
                            result.length != 0 ? model.set('whofiledextension', result[0].userName) : model.set('whofiledextension', '');
                            return model.get('whofiledextension');
                        }
                    },
                    trimDropdown: false,
                    source: _.pluck(self.options.userlist, 'fullName'),
                    validator: function (value, callback) {
                        callback(true);
                    }
                }, {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('extensionDCN');
                        } else {
                            model.set('extensionDCN', value);
                            return model.get('extensionDCN');
                        }
                    },
                    readOnly: false,
                    type: 'text'
                },
                ColumnAttributes('original_due_on', 'date', true),
                ColumnAttributes('current_due_on', 'date', true),
                //ColumnAttributes('nextExtension_on', 'date', true),
                {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            if (model.get('extensionFinished') === true || moment(model.get('nextExtension_on')).format('MM/DD/YYYY') === '01/01/1900') {
                                return '';
                            } else {
                                return moment(model.get('nextExtension_on')).format('MM/DD/YYYY');
                            }
                        }
                    },
                    type: 'text',
                    readOnly: true
                }, {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('comments');
                        } else {
                            model.set('comments', value);
                            return model.get('comments');
                        }
                    },
                    readOnly: false,
                    type: 'text',
                    className: 'comments'
                },
            ],
            colHeaders: headers,
            nestedHeaders: [
             [
               { label: '', colspan: 5 },
               { label: '<div title="Staff" class="ui divider roleindicator staff"></div>', colspan: 5 },
               { label: '<div title="Support Staff" class="ui divider roleindicator supportstaff"></div>', colspan: 3 },
               { label: '', colspan: 4 },
             ],
             headers
            ],
            colWidths: function (col) {
                var hot = self.$el.handsontable('getInstance'),
                    colname = hot.getColHeader(col),
                    totalwidth = document.documentElement.clientWidth,
                    columnwidth = _.where(headersettings, { displayName: colname })[0].colWidth;

                if (totalwidth < 2000) {
                    return ((totalwidth * columnwidth) / 100);
                }
            },
            // colHeaders: function(col) {
            //     switch (col) {
            //         case 0:
            //             return "";
            //         case 1:
            //             return '<div data-content="Client">Client</div>';
            //         case 2:
            //             return '<div data-content="Jurisdiction">Jurisdiction</div>';
            //         case 3:
            //             return '<div data-content="Form">Form</div>';
            //         case 4:
            //             return '<div data-content="Jur Date Completed">Jur Date Completed</div>';
            //         case 5:
            //             return '<div data-content="EXT Prep Method">EXT Prep Method</div>';
            //         case 6:
            //             return '<div data-content="Pay Method">Pay Method</div>';
            //         case 7:
            //             return '<div data-content="Pay Amount">Pay Amount</div>';
            //         case 8:
            //             return '<div data-content="Not Filing">Not Filing</div>';
            //         case 9:
            //             return '<div data-content="EXT Filing Method">EXT Filing Method</div>';
            //         case 10:
            //             return '<div data-content="Date EXT Filed">Date EXT Filed</div>';
            //         case 11:
            //             return '<div data-content="Who Filed EXT">Who Filed EXT</div>';
            //         case 12:
            //             return '<div data-content="Ext DCN">Ext DCN</div>';
            //         case 13:
            //             return '<div data-content="Original Due Date">Original Due Date</div>';
            //         case 14:
            //             return '<div data-content="Current Due Date">Current Due Date</div>';
            //         case 15:
            //             return '<div data-content="Next EXT Date">Next EXT Date</div>';
            //         case 16:
            //             return '<div data-content="Comments">Comments</div>';
            //     }
            // },
            afterGetColHeader: function (col, th) {

                if (!$(th).parent().index()) {
                    th.classList.add('roleindicatorheader');
                    return;
                }

                var header = this.getColHeader(col);

                var headerobj = _.where(headersettings, { displayName: header })[0];

                if (!("content" in th.dataset && col >= 0)) {
                    th.dataset.content = headerobj.fullName;
                    th.dataset.keyname = headerobj.keyName;
                }

                if (col === 5 || col === 6 || col === 7 || col === 8 || col === 9 || col === 10 || col === 11 || col === 12 || col === 16) {
                    th.classList.add('customBorder');
                }
            },
            afterRender: function () {
                self.$('th[data-content], th .roleindicator').popup({
                    debug: false
                });
                if (self.isreset) {
                    self.$el.find('.editedFileds').removeClass('editedFileds');
                    self.cellEdited = [];
                    self.isreset = false;
                } else {
                    $.each(self.cellEdited, function (index, ele) {
                        var td = self.$el.handsontable('getInstance').getCell(ele['rowIndex'], ele['colIndex']);
                        $(td).addClass('editedFileds');
                    });
                }
            },

            afterRenderer: function (td, row, col, prop, val, cellProperties) {
                //on randrom column number check if the model is 'not filing' or 'deleted'
                //and set that row to readonly and get the row(tr) node and assign the title
                //stating deleted or not-filing.                
                if (col === 0) {
                    var model = this.getSourceData().at(row);
                    var rowElement = this.getCell(row, col).parentElement;
                    //model.get('is_active') ? (model.get('status_id') === 1005 ? rowElement.title = 'Jurisdiction Not Filing' : '') : rowElement.title = "Deleted";
                    rowElement.title = model.get('is_active') ? (model.get('status_id') === 1005 ? 'Jurisdiction Not Filing' : '') : "Deleted";
                }
            },
            afterChange: function (changes, source) {
                if (changes != null) {
                    $('#saveExtInfo').show();
                    $.each(changes, function (index, change) {
                        var td = self.$el.handsontable('getInstance').getCell(change[0], self.$el.handsontable('getInstance').propToCol(change[1]));
                        $(td).addClass('editedFileds');
                        self.cellEdited.push({ 'rowIndex': change[0], 'colIndex': self.$el.handsontable('getInstance').propToCol(change[1]) });
                    });
                }
            },
            currentRowClassName: 'currentRow',
            currentColClassName: 'currentCol',
            cells: function (row, col, prop) {             
                var header = this.instance.getColHeader(col);
                if (header === "Comments") {
                    this.renderer = titleColumnRenderer;
                }              
                //this is to check the userrights and allow the user to make changes to the row
                if ((col === 10 || col === 11) && ((_.where(userContext.Result.Rights, {
                    module_id: 13
                })[0].access === 0))) {
                    return {
                        readOnly: true,
                        disableVisualSelection: true
                    };
                }

                if ((!this.instance.getSourceData().at(row).get('is_active')) || (this.instance.getSourceData().at(row).get('status_id') === 1005)) {
                    return {
                        readOnly: true,
                        disableVisualSelection: true
                    }
                }


                if (this.instance.getSourceData().at(row).get('isNotFiled')) {
                    return {
                        readOnly: true,
                        disableVisualSelection: true
                    }
                } else {
                    if (col === 0 || col == 5 || col === 6 || col === 7 || col === 8 || col === 9 || col === 10 || col === 11 || col === 12 || col === 16) {
                        return {
                            readOnly: false,
                            disableVisualSelection: false
                        }
                    }
                }
            },
            maxRows: this.collection.length,
            wordWrap: false,
            manualColumnFreeze: true,
            manualColumnResize: true,
            // colWidths: [100],
            fillHandle: 'vertical',
            stretchH: 'all',
        });

        $('.ui.checkbox').checkbox();
        this.$el.handsontable('getInstance').addHook('afterOnCellMouseDown', this.cellClicked);
        this.showHidePiggyBackOption();
    },

    cellClicked: function (event, coords, TD) {
        if (coords.col === 8) {
            var model = this.getSourceData().at(coords.row);
            if (model.get('status_id') === 1005 || !model.get('is_active')) {
                return false;
            }
            $('#saveExtInfo').show();
            model.set('isNotFiled', !model.get('isNotFiled'));
        }
    },

    showHideOptions: function (show) {
        if (show) {
            $('div#showhideoptions').removeClass('disableoption');
        } else {
            $('div#showhideoptions').addClass('disableoption');
        }
    }
});

Views.Layout = LayoutView.extend({
    template: LayoutExtensionTemplate,
    className: 'ui grid',
    initialize: function (options) {
        if (!_.isUndefined(this.options.taskinstructions)) {
            this.options.taskinstructions.on('change:extensionInstructionField', this.extinstructionUpdated, this)
        }
    },
    extinstructionUpdated: function (model, val) {
        if (this.options.isSingleTask) {
            if (this.ui.extinstruction.children().length) {
                this.ui.extinstruction.find('.label').html(val)
            } else {
                this.ui.extinstruction.append('<div class="sixteen wide column"><div class="ui large label">' + val + '</div></div>');
            }
        }
    },
    regions: {
        gridData: 'div#ext-grid',
    },
    ui: {
        extinstruction: 'div#extinstructions'
    },
    templateHelpers: function () {
        var self = this;
        // //console.log('canCreateExtension: ', _.where(userContext.Result.Rights, { module_id: 29 })[0].access === 0 ? false : true);
        // //console.log('canManageExtension: ', _.where(userContext.Result.Rights, { module_id: 13 })[0].access === 0 ? false : true);
        return {
            isControlSheet: _.isUndefined(this.options.controlsheet) ? false : true,
            isSingleTask: this.options.isSingleTask,
            canCreateExtension: _.where(userContext.Result.Rights, {
                module_id: 29
            })[0].access === 0 ? false : true,
            canManageExtension: _.where(userContext.Result.Rights, {
                module_id: 13
            })[0].access === 0 ? false : true,
            taskinstructions: _.isUndefined(this.options.taskinstructions) ? '' : this.options.taskinstructions.toJSON().extensionInstructionField,
        }
    },
    triggers: {
        'click #saveExtInfo': 'extensions:save:clicked',
        'click #taskMove': 'extension:move:clicked',
        'click #details': 'extension:details:clicked',
        'click #history': 'extension:history:clicked',
        'click #undolastext': 'extension:undo:clicked',
        'click #bulkeditext': 'extension:bulkedit:clicked',
        'click #extenddates': 'extension:extenddates:clicked',
        'click #closeext': 'extension:closeextension:clicked',
        //'click #createextension': 'extension:create:clicked'
        'click #createext': 'extension:create:clicked',
        'click #addextinstruction': 'extension:addinstruction:clicked',
        'click #piggyback': 'extension:piggyback:clicked'
    },

    onRender: function () {

    }
});

module.exports = Views;

},{"../../../jst/workspace/extensionlayout-template.html":50,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],129:[function(require,module,exports){
var application = require('../../../application'),
	BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var self = this, pedate, taskid, tasktypeID, _StateList, _tsjCollection;
        if (options.controlsheet !== true) {
            pedate = _.values(options.tasks)[0].get('periodEndDate');
            taskid = _.pluck(options.tasks, 'id').join(',');
            tasktypeID = _.values(options.tasks)[0].get('tasktypeId');
            _StateList = Reqres.request('Subtask:States:entities', tasktypeID, taskid.toString());
        } else {
            pedate = options.tasks.get('periodEndDateField');
            if (_.isUndefined(pedate)) {
                pedate = options.tasks.get('periodEndDate');
            }
            taskid = options.tasks.get('id');
            tasktypeID = options.tasks.get('tasktypeIdField');
            if (_.isUndefined(tasktypeID)) {
                tasktypeID = options.tasks.get('tasktypeId');
            }
            _StateList = Reqres.request('Subtask:States:entities', tasktypeID, taskid.toString());
        }

        _tsjCollection = Reqres.request('TaskSpecificAll:Jurisdiction:entities');

        this.layout = this.GetLayout();

        this.listenTo(this.layout, 'show', function () {
            this.GetJurisdictionGeneralView(_StateList);
            this.GetJurisdictionGeneralAutoSuggestView(_StateList);
            this.getSelectedFromList(_StateList);
        }, this);

        this.listenTo(_StateList, 'selected', function (model) {
            this.layout.$('#selectedlist').append(new Views.JurisdictionSelectedView({ model: model }).render().el);
        });

        this.listenTo(this.layout, 'SaveJurisdiction:Models:Selected', function (options) {
            //console.log(_StateList.selected, _tsjCollection.length);
            if (_.isEmpty(_StateList.selected) && _tsjCollection.length === 0) {
                $('#buttonSaveJurisdictions').popup({
                    hoverable: true,
                    debug: false,
                    position: 'left center'
                });
                return;
            }
            options.view.$el.modal('hide');
            $('#loading').show();
            options.selectedstates = _StateList.selected;
            var promisesTSJ = _tsjCollection.createSubtaskTSJs();
            var promises = this.options.subtasks.CreateSubtasks(options.selectedstates, taskid);
            if (!_.isEmpty(_StateList.selected) && _tsjCollection.length !== 0) {
                $.when.apply($, promises)
                .done(function () {
                    $.when.apply($, promisesTSJ)
              .done(function () {
                  Events.trigger('jurisdiction:Add:Completed');
                  Events.trigger('jurisdiction:change:extensions:refreshGrid');
                  Events.trigger('stop:ADDJurisdiction');
                  if (options.controlsheet)
                      Events.trigger('refresh:routing:pagedetails');
                  $('#loading').hide();
              })
              .progress(function (pr) {
              })
              .fail(function () {
                  $('#loading').hide();
              });
                })
                .progress(function (pr) {
                })
                .fail(function () {
                    $('#loading').hide();
                });
            } else if (_.isEmpty(_StateList.selected)) {
                $.when.apply($, promisesTSJ)
              .done(function () {
                  Events.trigger('jurisdiction:Add:Completed');
                  Events.trigger('jurisdiction:change:extensions:refreshGrid');
                  Events.trigger('stop:ADDJurisdiction');
                  if (options.controlsheet)
                      Events.trigger('refresh:routing:pagedetails');
                  $('#loading').hide();
              })
              .progress(function (pr) {
              })
              .fail(function () {
                  $('#loading').hide();
              });
            } else if (_tsjCollection.length === 0) {
                $.when.apply($, promises).done(function () {
                    Events.trigger('jurisdiction:Add:Completed');
                    Events.trigger('jurisdiction:change:extensions:refreshGrid');
                    Events.trigger('stop:ADDJurisdiction');
                    if (options.controlsheet)
                        Events.trigger('refresh:routing:pagedetails');
                    $('#loading').hide();
                }).progress(function (pr) {
                }).fail(function () {
                    $('#loading').hide();
                });
            }
        }, this);

        Events.on('TSJinputToADD:Jurisdiction', function (model) {
            if (_.isEmpty(model.get('state_name').trim())) {
                return;
            } else if (_.isEmpty(model.get('state_code').trim())) {
                return;
            }
            model.set('task_id', parseInt(taskid));
            model.set('task_typeid', tasktypeID);
            _tsjCollection.add(model.toJSON());
            self.layout.$('#selectedlist').append(new Views.JurisdictionSelectedFSJView({ model: model, collectionTSJ: _tsjCollection }).render().el);
            //Events.trigger('DisplayTSJForm:Jurisdiction:Add');
        });

        this.listenTo(this.layout, 'DisplayTSJForm:Jurisdiction:Add', function () {
            Events.trigger('DisplayTSJForm', this.layout.regionAddTSJ, pedate)
        }, this);

        this.listenTo(this.layout, 'AddJurisdiction:close:clicked', function () {
            Events.trigger('stop:ADDJurisdiction');
        });
        return this.show(this.layout);
    },

    getSelectedFromList: function (collection) {
        var self = this;
        this.layout.$('#buttonAddSuggest').on('click', function () {
            var name = self.layout.$('#AutoSuggestJur option:selected').text();
            var model = collection.where({ stateName: name });
            model[0].select();
        });
    },

    GetLayout: function () {
        return new Views.Layout;
    },
    GetJurisdictionGeneralView: function (collection) {
        console.log(collection);
        var jurview = new Views.JurisdictionListView({ collection: collection });
        return this.show(jurview, {
            region: this.layout.generalJuris
        });
    },
    GetJurisdictionGeneralAutoSuggestView: function (collection) {
        var jurautoview = new Views.JurisdictionListSuggestView({ collection: collection });
        return this.show(jurautoview, {
            region: this.layout.GeneralJurisSuggest
        });
    }
});
},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":130}],130:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutAddJurisdictionTemplate = require('../../../jst/workspace/addjurisdiction-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutAddJurisdictionTemplate,
    className: 'ui fullscreen scrolling modal transition',
    regions: {
        generalJuris: 'div#first-tab',
        GeneralJurisSuggest: '#AutoSuggestJur',
        jurisSelectedList: '#selectedlist',
        regionAddTSJ: 'div#injectTSJForm'
    },
    triggers: {
        'click div#buttonSaveJurisdictions': 'SaveJurisdiction:Models:Selected',
        'click #tabAddTSJ': 'DisplayTSJForm:Jurisdiction:Add',
        'click .close': 'AddJurisdiction:close:clicked'
    },
    onDomRefresh: function () {
        $('.ui.checkbox').checkbox();
        $('#tabAddJurisdiction .item').tab();
        this.$('a[data-content]').popup({
            debug: false
        });
    }
});
Views.JurisdictionItemView = ItemView.extend({
    initialize: function () {
        this.findtemplate();
    },
    events: {
        'click': 'SelectModel'
    },
    SelectModel: function () {
        this.model.select();
    },
    findtemplate: function () {
        var toCheck = parseInt(this.model.get('stateCode'));
        if (this.model.get('jurisdictionID') !== 0) {
            this.template = _.template('<%= stateName %>-<%= stateCode %><sup style="color: orange;font-size: 12px;font-weight: bold;">FSJ</sup>');
        } else {
            this.template = _.template('<%= stateName %>');
        }
    },
    className: 'column',
    id: 'JurisdictionListID'
});
Views.JurisdictionSuggestItemView = ItemView.extend({
    template: _.template('<%= stateName %>'),
    tagName: 'option'
});
Views.JurisdictionListView = CollectionView.extend({
    childView: Views.JurisdictionItemView,
    className: 'ui three column divided grid',
    id: "divGeneralJurisdictions"
});
Views.JurisdictionListSuggestView = CollectionView.extend({
    childView: Views.JurisdictionSuggestItemView,
    tagName: 'select',
    onDomRefresh: function () {
        this.$el.css('width', '100%');
        this.$el.prepend('<option>Type the first three letters for Auto Suggest</option>');
        this.$el.select2({ minimumInputLength: 2 });
    }
});
Views.JurisdictionSelectedView = ItemView.extend({
    tagName: 'li',
    checktemplate: function () {
        if (this.model.get('jurisdictionID') !== 0) {
            this.template = _.template('<%= stateName %>-<%= stateCode %><sup style="color: orange;font-size: 12px;font-weight: bold;">FSJ</sup><i style="float:right;" class="remove icon"></i>')
        } else {
            this.template = _.template('<%= stateName %><i style="float:right;" class="remove icon"></i>')
        }
    },

    initialize: function () {
        this.checktemplate();
    },
    events: {
        'click': 'deselectJurisdictionModel'
    },
    deselectJurisdictionModel: function () {
        this.model.deselect();
        this.remove();
        this.undelegateEvents();
    }
});
Views.JurisdictionSelectedFSJView = ItemView.extend({
    tagName: 'li',
    template: _.template('<%= state_name %><i style="float:right;" class="remove icon"></i>'),
    initialize: function () {
        // console.log(this.options.collectionTSJ);
    },
    events: {
        'click': 'deselectJurisdictionModel'
    },
    deselectJurisdictionModel: function () {
        //console.log(this.options.collectionTSJ);
        this.model.deselect();
        this.options.collectionTSJ.remove(this.model);
        this.remove();
        this.undelegateEvents();
        //console.log(this.options.collectionTSJ);
    }
});
module.exports = Views;

},{"../../../jst/workspace/addjurisdiction-template.html":26,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],131:[function(require,module,exports){
var application = require('../../../application'),
	BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var self = this;
        var promise;
        var _tsjModel, tasktypeID, JurisdictionName, formNumber, clientName, PeriodEndDate, taskId, subtaskID;
        if (options.subtaskModel.get('form') !== 'none' && options.subtaskModel.get('form') !== 'None') {
            promise = Reqres.request('GetTSJ:TaskSpecificJurisdiction:Entities', options.subtaskModel.get('taskId'), options.subtaskModel.get('id'));
            $('#loading').show();
            $('.ui.text.loader').html("Loading..");
            promise.done(function (_tsjModel) {
                $('#loading').hide();
                $('.ui.text.loader').html("Saving..");
                _tsjModel.set('dummyStateName', _tsjModel.get('state_name'));
                _tsjModel.set('dummyStateCode', _tsjModel.get('state_code'));
                self.layout = self.GetLayout(_tsjModel);
                return self.show(self.layout);
            });
        } else {
            _tsjModel = Reqres.request('TSJEmpty:Jurisdiction:entities');
            tasktypeID = options.subtaskModel.get('tasktypeId');
            JurisdictionName = options.subtaskModel.get('name');
            formNumber = options.subtaskModel.get('form');
            clientName = options.subtaskModel.get('clientName');
            PeriodEndDate = options.subtaskModel.get('periodEndDate');
            taskId = options.subtaskModel.get('taskId');
            subtaskID = options.subtaskModel.get('id');

            _tsjModel.set('task_typeid', tasktypeID);
            _tsjModel.set('state_name', JurisdictionName);
            _tsjModel.set('state_code', formNumber);
            _tsjModel.set('client_name', clientName);
            _tsjModel.set('period_end', PeriodEndDate);
            _tsjModel.set('task_id', taskId);
            _tsjModel.set('subTaskID', subtaskID);
            _tsjModel.set('dummyStateName', JurisdictionName);
            _tsjModel.set('dummyStateCode', formNumber);

            self.layout = self.GetLayout(_tsjModel);
            return self.show(self.layout);
        }
    },

    GetLayout: function (_tsjModel) {
        return new Views.Layout({ model: _tsjModel });
    }
});
},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":132}],132:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutEditTSJTemplate = require('../../../jst/workspace/edit-tsj-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = ItemView.extend({
    template: LayoutEditTSJTemplate,
    className: 'ui medium modal transition',
    initialize: function () {
    },
    templateHelpers: function () {
        var self = this;
        return {
            model: this.model.toJSON()
        }
    },
    triggers: {
        'click #tsjClose': 'TSJEditClose:close:clicked'
    },

    events: {
        'focusout input': 'onModelChange',
        'click #buttonEditAndSaveTSJ': 'SaveTSJModel',
        'change input#checkdueequaltopedate': 'checkoruncheck',
        'change input#checkduebasedonDays': 'checkoruncheckDays'
    },
    checkoruncheck: function () {
        if (this.$('#checkdueequaltopedate').is(':checked')) {
            $('#hideorunhide').hide();
            $('#hideorunhideday').hide();
        } else {
            $('#hideorunhide').show();
            $('#hideorunhideday').show();
        }
    },
    checkoruncheckDays: function () {
        if (this.$('#checkduebasedonDays').is(':checked')) {
            $('#hideMonthlabel').hide();
            $('#hideMonthinput').hide();
            $("#idOrignalDueDateOfDay").removeAttr("maxlength").attr("maxlength", '3');
            $("#idOrignalDueDateOfDay").removeAttr("placeholder").attr("placeholder", '1-180');
            //$("#idOrignalDueDateOfDay").val('');
        } else {
            $('#hideMonthlabel').show();
            $('#hideMonthinput').show();
            $("#idOrignalDueDateOfDay").removeAttr("maxlength").attr("maxlength", '2');
            $("#idOrignalDueDateOfDay").removeAttr("placeholder").attr("placeholder", '1-31');;
           // $("#idOrignalDueDateOfDay").val('');
        }
    },
    onModelChange: function (evt) {
        evt.stopPropagation();
        var key = this.$el.find(evt.currentTarget).data('tsj'); //check the condition
        this.model.set(key, this.$el.find(evt.currentTarget).val());
        if (this.$('#checkdueequaltopedate').is(':checked')) {
            this.model.set('isDueDateEqualToPeriodEndDate', true);
        } else {
            this.model.set('isDueDateEqualToPeriodEndDate', false);
        }
        if (this.$('#isSameMontPeriodenddate').is(':checked')) {
            this.model.set('isSameMontPeriodenddate', true);
        } else {
            this.model.set('isSameMontPeriodenddate', false);
        }
    },
    SaveTSJModel: function () {
        var self = this;
        this.model.set('mode', 'edit');
        if (this.model.get('optionsDueDates') === 'dynamic') {
            this.model.set('isBeforeOrAfter', $('#selectBeforeOrAfter').val());
        }
        //console.log(this.model.get('state_code').toUpperCase());
        if (this.model.get('state_code').toUpperCase() === 'NONE') {
            $('#TSJWarningMessage').html('For firm or task specific jurisdictions, the form number cannot be “none”');
            $('#divTSJWarningMessage').show();
            return;
        }
        if ((this.model.get('state_name').toUpperCase() === this.model.get('dummyStateName').toUpperCase() && this.model.get('dummyStateCode').toUpperCase() === 'NONE' && this.model.get('state_name').toUpperCase() !== 'GENERAL')) {
        //if (this.model.get('state_name').toUpperCase() === 'GENERAL' || (this.model.get('state_name').toUpperCase() === this.model.get('dummyStateName').toUpperCase() && this.model.get('dummyStateCode').toUpperCase() === 'NONE')) {
            $('#TSJWarningMessage').html('The initials of the state as the Jurisdiction name can not be used alone. We have reserved these initials for the statutory filings and can not be used again. Please expand the Jurisdiction Name (which can include the state initials) or spell out the state name.');
            $('#divTSJWarningMessage').show();
            return;
        }
        if (_.isEmpty(this.model.get('state_name').trim()) || _.isEmpty(this.model.get('state_code').trim())) {
            $('#TSJWarningMessage').html('Jurisdiction Name and Form Number Cannot be Empty.');
            $('#divTSJWarningMessage').show();
            return;
        }
        $('#loading').show();

        var tsjSave = Reqres.request('UpdateTSJ:TaskSpecificJurisdiction:Entities', this.model);
        self.$el.modal('hide');
        tsjSave.done(function () {
            Events.trigger('jurisdiction:Add:Completed');
            $('#loading').hide();
        });

    },
    onDomRefresh: function () {
        var self = this;
        $('.ui.checkbox').checkbox();
        $('.info.circle.icon').popup({
            debug: false
        });
        this.$('a[data-content]').popup({
            debug: false
        });
        this.$('#FlashTSJValidation').on('click', function () {
            $(this).parent().hide();
        });

        $('#radioJurisdictionGroup input[type="radio"]').on('change', function (e) {
            var id = e.currentTarget.id;
            switch (id) {
                case 'radioConfigureJurisdiction':
                    $('#fixedJurisdiction').hide();
                    $('#configureJurisdiction').show();
                    self.model.set('optionsDueDates', 'dynamic')
                    break;
                case 'radiofixedJurisdiction':
                    $('#configureJurisdiction').hide();
                    $('#fixedJurisdiction').show();
                    self.model.set('optionsDueDates', 'fixed')
                    break;
                case 'radioNoJurisdiction':
                    $('#fixedJurisdiction').hide();
                    $('#configureJurisdiction').hide();
                    self.model.set('optionsDueDates', 'none')
                    break;
            }
        });

        new Pikaday({
            field: this.$el.find('input.date')[0],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[1],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[2],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[3],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[4],
            format: 'MM/DD/YYYY'
        });
        switch (this.model.get('optionsDueDates')) {
            case 'dynamic':
                $('#fixedJurisdiction').hide();
                $('#configureJurisdiction').show();
                $('#radioConfigureJurisdiction').prop('checked', 'checked');
                if (self.model.get('isBeforeOrAfter') === 'APED') {
                    $('#selectBeforeOrAfter').val('APED');
                } else {
                    $('#selectBeforeOrAfter').val('BPED');
                }
                if (self.model.get('OrignalDueDateOfMonth') === 0 && !self.model.get('isDueDateEqualToPeriodEndDate')) {
                    $('#hideMonthinput').hide();
                    $('#hideMonthlabel').hide();
                    //$("#idOrignalDueDateOfDay").removeAttr("maxlength").attr("maxlength", '3');
                    //$("#idOrignalDueDateOfDay").removeAttr("placeholder").attr("placeholder", '1-180');
                    $('#hideorunhideday .ui.checkbox').checkbox('check')
                }
                if (self.model.get('isDueDateEqualToPeriodEndDate')) {
                    $('#hideorunhide').hide();
                    $('#hideorunhideday').hide();
                }
                break;
            case 'fixed':
                $('#configureJurisdiction').hide();
                $('#fixedJurisdiction').show();
                $('#radiofixedJurisdiction').prop('checked', 'checked');
                break;
            case 'none':
                $('#fixedJurisdiction').hide();
                $('#configureJurisdiction').hide();
                $('#radioNoJurisdiction').prop('checked', 'checked');
                break;
        }
    }
});

module.exports = Views;

},{"../../../jst/workspace/edit-tsj-template.html":39,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],133:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
    var API = {};

    context.startWithParent = false;
    context.Show = require('./show/controller');
    context.Add = require('./add/controller');
    context.AddTSJ = require('./tsj/controller');
    context.EditTSJ = require('./edittsj/controller');

    API = {
        show: function (options) {
            if (!_.isUndefined(this.JurisdictionShowController)) {
                this.JurisdictionShowController.destroy();
            }
            this.JurisdictionShowController = new context.Show.Controller({
                region: options.region,
                subtasks: options.subtasks,
                tasks: options.tasks,
                controlsheet: options.controlsheet
            });
        },
        add: function (options) {
            if (!_.isUndefined(this.JurisdictionAddController)) {
                this.JurisdictionAddController.destroy();
            }
            this.JurisdictionAddController = new context.Add.Controller({
                region: application.rootView.modalWindow,
                subtasks: options.subtasks,
                tasks: options.tasks,
                controlsheet: options.controlsheet
            });
        },
        editTSJ: function (model) {
            if (!_.isUndefined(this.JurisdictionEditTSJController)) {
                this.JurisdictionEditTSJController.destroy();
            }
            this.JurisdictionEditTSJController = new context.EditTSJ.Controller({
                region: application.rootView.modalWindow,
                subtaskModel: model
            });
        },
        addTSJ: function (region, pedate) {
            if (!_.isUndefined(this.JurisdictionAddTSJController)) {
                this.JurisdictionAddTSJController.destroy();
            }
            this.JurisdictionAddTSJController = new context.AddTSJ.Controller({
                region: region,
                showInTab: true,
                pedate: pedate
            });
        },
        addTSJMultipleTask: function (options) {
            if (!_.isUndefined(this.addTSJMultipleTaskController)) {
                this.addTSJMultipleTaskController.destroy();
            }
            this.addTSJMultipleTaskController = new context.AddTSJ.Controller({
                region: application.rootView.modalWindow,
                subtasks: options.subtasks,
                tasks: options.tasks,
                controlsheet: options.controlsheet,
                showInTab: false,
            });
        }
    };

    context.on('start', function (options) {
        return API.show(options);
    });
    Events.on('jurisdiction:Add:clicked', function (options) {
        var taskLength = _.keys(options.tasks).length;
        if (taskLength <= 1 || options.controlsheet === true) {
            return API.add(options);
        } else {
            return API.addTSJMultipleTask(options);
            return;
        }
    });
    Events.on('DisplayTSJForm', function (region, pedate) {
        return API.addTSJ(region, pedate);
    });

    Events.on('ADDTSJMODEL:Jurisdiction:saveList', function (model) {
        Events.trigger('TSJinputToADD:Jurisdiction', model);
    });

    Events.on('open:editorTSJ', function (model) {
        return API.editTSJ(model);
    });

    Events.on('stop:tsj', function () {
        return context.stop();
    });

    Events.on('stop:ADDJurisdiction', function () {
        return context.stop();
    });

    Events.on('stop:info', function () {
        return context.stop();
    });
};
},{"../../lib/config/events":68,"./add/controller":129,"./edittsj/controller":131,"./show/controller":134,"./tsj/controller":136}],134:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var taskids, isDiffrentTaskTypeCount;
        if (options.controlsheet !== true) {
            taskids = _.pluck(options.tasks, 'id');
            isDiffrentTaskTypeCount = _.uniq(_.pluck(_.toArray(_.map(options.tasks, function (model) { return model.toJSON() })), 'tasktypeId')).length;
        }
        else {
            var taskid = [];
            taskid.push(Number(options.tasks.get('id')));
            taskids = taskid;
        }

        this.layout = this.GetLayout(isDiffrentTaskTypeCount);

        this.listenTo(this.layout, 'show', (function (_this) {
            return function () {
                return _this.GetDataGrid(options.subtasks, options.tasks, options.controlsheet);
            }
        }(this)));

        this.listenTo(this.layout, 'jurisdiction:Add:clicked', function () {
            if (isDiffrentTaskTypeCount === 1 || options.controlsheet === true) {
                Events.trigger('jurisdiction:Add:clicked', options);
            }
        });

        this.listenTo(Events, 'jurisdiction:Add:Completed', function () {
            if (options.controlsheet !== true) {
                options.subtasks.fetch({ reset: true, data: { query: _.pluck(options.tasks, 'id').toString() } });
            } else {
                options.subtasks.fetch({ reset: true, data: { query: options.tasks.get('id') } }).done(function () {
                    Events.trigger('refresh:routing:pagedetails');
                }).fail(function () { });;
            }
        });
        this.listenTo(this.layout, 'jurisdiction:Save:clicked', function () {
            $('#loading').show();
            options.pageType = "Juris";
            var self = this;
            var promises = Reqres.request('Subtask:Save:entities', options);
            promises.done(function () {
                $('#buttonJurisdictionSave').hide();
                options.subtasks.fetch({ reset: true, data: { query: taskids.toString() } }).done(function () { $('#loading').hide(); }).fail(function () {
                    $('#loading').hide();
                });
                Events.trigger('jurisdiction:change:extensions:refreshGrid');
                if (options.controlsheet)
                    Events.trigger('refresh:routing:pagedetails');
            })
                .fail(function () {
                    $('#loading').hide();
                });
        });

        return this.show(this.layout, {
            loading: true
        });
    },

    GetLayout: function (isDiffrentTaskTypeCount) {
        return new Views.Layout({ isDiffrentTaskTypeCount: isDiffrentTaskTypeCount, controlsheet: this.options.controlsheet });
    },

    GetDataGrid: function (subtaskCollection, tasks, controlsheet) {
        var dataGrid = new Views.DataGrid({
            collection: subtaskCollection,
            tasks: tasks,
            iscontrolsheet: controlsheet,
        });
        return this.show(dataGrid, {
            loading: true,
            region: this.layout.gridData
        });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":135}],135:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutJurisdictionTemplate = require('../../../jst/workspace/jurisdictionlayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

var ColumnAttributes = function (attr, celltype, readonly, align, renderer) {
    var columnSettings;

    function colString(item, value) {
        if (_.isUndefined(value)) return item.get(attr);
    };

    function colDate(item, value) {

        if (_.isUndefined(value)) {
            var year = moment(item.get(attr)).year();
            return (year != 1900 && year != 1901 && year != 1 ? moment(item.get(attr)).format('l') : '');
        }
    };

    function colBool(item, value) {
        if (_.isUndefined(value)) return _.isUndefined(item.selected) ? false : item.selected;
        return (value ? item.select() : item.deselect());
    }

    switch (celltype) {
        case 'html':
            columnSettings = {
                data: colLink,
                type: 'text',
                readonly: readonly,
                className: 'htLeft',
                renderer: 'html',
                disableVisualSelection: true
            }
            break;
        case 'checkbox':
            columnSettings = {
                data: colBool,
                type: 'checkbox',
                readonly: readonly,
                className: 'htLeft',
                // colWidths: 20
            }
            break;
        case 'numeric':
            columnSettings = {
                data: colString,
                readOnly: readonly,
                className: 'htLeft',
            }
            break;
        case 'date':
            columnSettings = {
                data: colDate,
                type: 'text',
                readOnly: readonly,
                className: 'htLeft',
                dateFormat: 'MM/DD/YYYY',
                disableVisualSelection: true
            }
            break;
        default:
            columnSettings = {
                data: colString,
                type: 'text',
                className: align,
                readOnly: readonly,
                disableVisualSelection: true
            };
            break;
    }

    return columnSettings;
};

var statusColumnRenderer = function (instance, td, row, col, prop, value, cellProperties) {
    td.innerHTML = value;
    //if (value === 'Not Filing') {
    //    td.style.fontWeight = '900',
    //        td.style.fontStyle = 'italic',
    //        td.style.color = '#E27A13',
    //        td.style.fontWeight = 'bold'
    //} else if (value === 'Not Filed') {
    //    td.style.color = '#F0635C',
    //        td.style.fontWeight = '900',
    //        td.style.fontStyle = 'italic',
    //        td.style.fontWeight = 'bold'
    //} else if (value === 'Complete') {
    //    td.style.color = '#64943f',
    //        td.style.fontWeight = '900',
    //        td.style.fontStyle = 'italic',
    //        td.style.fontWeight = 'bold'
    //}    

    if (value === 'In Process') {
        td.style.color = '#64943f'
        //td.style.fontWeight = '900',
        //td.style.fontStyle = 'italic',
        td.style.fontWeight = 'bold'
    }

};

Views.DataGrid = ItemView.extend({
    template: false,
    initialize: function () {
        this.listenTo(this.collection, 'reset', function () {
            this.isreset = true;
            this.refreshGrid();
        });
        this.listenTo(this.collection, 'change:is_active', this.refreshGrid);
        this.listenTo(Events, 'jurisdiction:refresh:grid', this.refreshGrid);

        this.cellEdited = [];
        this.isreset = false;
        this.isTaskLocked = false;
    },

    refreshGrid: function () {
        $('#spanjurisdictionCount').text(this.collection.length);
        var grid = this.$el.handsontable('getInstance');
        if (!_.isUndefined(grid)) {
            //grid.updateSettings({
            //    maxRows: this.collection.length
            //});
            grid.render();
        }
    },

    events: {
        'click th[data-keyname]': 'sortGridData'
    },
    sortGridData: function (e) {
        this.collection.sortData(e.currentTarget.dataset.keyname);
    },

    getHeaderSettings: function () {
        var headers = [{
            displayName: 'Client',
            keyName: 'clientName',
            fullName: 'Client Name',
            colWidth: 9,
        }, {
            displayName: 'Jurisdiction',
            keyName: 'Jurisdiction',
            fullName: 'Jurisdiction',
            colWidth: 8,
        }, {
            displayName: 'Form',
            keyName: 'form',
            fullName: 'Form',
            colWidth: 5,
        }, {
            displayName: 'Filing Method',
            keyName: 'filing_type',
            fullName: 'Filing Type',
            colWidth: 4,
        }, {
            displayName: 'Period End',
            keyName: 'periodEndDate',
            fullName: 'Period End Date',
            colWidth: 5,
        }, {
            displayName: 'Ext Task Status',
            KeyName: 'ext_status',
            fullName: 'Extension Task Status',
            colWidth: 8,
        }, {
            displayName: 'Original Due Date',
            keyName: 'original_due_on',
            fullName: 'Original Due Date',
            colWidth: 5,
        }, {
            displayName: 'Current Due Date',
            keyName: 'current_due_on',
            fullName: 'Current Due Date',
            colWidth: 5,
        }, {
            displayName: 'Jur Date Comp',
            keyName: 'completed_on',
            fullName: 'Jurdiction Completed On',
            colWidth: 5,
        }, {
            displayName: 'Jur Task Status',
            keyName: 'status',
            fullName: 'Jurdiction Task Status',
            colWidth: 5,
        }, {
            displayName: 'Not Filing',
            keyName: 'is_filing',
            fullName: 'Not Filing ',
            colWidth: 2,
        }, {
            displayName: 'Delete',
            keyName: 'is_filing',
            fullName: 'Delete',
            colWidth: 2,
        },

        ];

        return headers;

    },

    onDomRefresh: function () {
        var headersettings = this.getHeaderSettings(),
            headers = _.pluck(headersettings, 'displayName');

        var self = this;
        $('#spanjurisdictionCount').text(this.collection.length);
        $('.sprite.info').popup({
            debug: false
        });
        var overrideCompleted = _.where(userContext.Result.Rights, {
            module_id: 31
        })[0];
        var status, statusId;
        if (_.pluck(this.options.tasks, 'id').length === 1 || this.options.iscontrolsheet === true) {
            if (this.options.iscontrolsheet === true) {
                status = self.options.tasks.get('currentStatus');
                statusId = self.options.tasks.get('statusId');
            } else {
                status = _.pluck(self.options.tasks, 'model')[0].get('currentStatus');
                statusId = _.pluck(self.options.tasks, 'model')[0].get('statusId');
            }

            if (statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !overrideCompleted.access) {
                $('div#buttonAddJurisdiction').addClass('disableoption');
            }
        }

        this.$el.handsontable({
            data: this.collection,
            columns: [
                ColumnAttributes('clientName', 'text', true), {
                    data: function (item, value) {
                        if (_.isUndefined(value)) {
                            if (item.get("state_type") === 'TSJ' || item.get("state_type") === 'GR' || item.get("state_type") === 'NODUE') {
                                return '<a>' + item.get('name') + '</a>';
                            } else {
                                return item.get('name');
                            }
                        }
                    },
                    type: 'text',
                    className: 'htLeft',
                    readOnly: true,
                    renderer: 'html'
                },
                ColumnAttributes('form', 'text', true),
                ColumnAttributes('filing_type', 'text', true),
                ColumnAttributes('periodEndDate', 'date', true),
                ColumnAttributes('ext_status', 'text', true),
                ColumnAttributes('original_due_on', 'date', true),
                ColumnAttributes('current_due_on', 'date', true),
                ColumnAttributes('completed_on', 'date', true),
                ColumnAttributes('status', 'text', true), {
                    data: function (item, value) {
                        if (_.isUndefined(value)) {
                            return item.get('is_filing');
                        }
                        value === false ? item.set('status', 'In Process') : item.set('status', 'Not Filing');
                        return item.set('is_filing', value);
                    },
                    type: 'checkbox',
                    className: 'htCenter'
                }, {
                    data: function (item, value) {
                        if (_.isUndefined(value)) {
                            switch (item.get('is_active')) {
                                case true:
                                    return '<i class="undo blue icon"></i>';
                                    break;
                                default:
                                    return '<i class="trash outline blue icon"></i>';
                                    break;
                            }
                        } else {
                            return;
                        }
                    },
                    renderer: "html",
                    //readonly: readonly,
                    className: 'htCenter',
                    editor: false
                }
                //ColumnAttributes('', 'text', true),
            ],
            // colHeaders: [
            //     'Client',
            //     'Jurisdiction',
            //     'Form',
            //     'Filing Method',
            //     'Period End',
            //     'Ext Task Status',
            //     'Original Due Date',
            //     'Current Due Date',
            //     'Jur Date Completed',
            //     'Jur Task Status',
            //     'Not Filing',
            //     'Delete'
            // ],
            colHeaders: headers,
            colWidths: function (col) {
                var hot = self.$el.handsontable('getInstance'),
                    colname = hot.getColHeader(col),
                    totalwidth = document.documentElement.clientWidth,
                    columnwidth = _.where(headersettings, { displayName: colname })[0].colWidth;

                if (totalwidth < 2000) {
                    return ((totalwidth * columnwidth) / 100);
                }
            },
            cells: function (row, col, prop) {
                if (col === 9) {
                    this.renderer = statusColumnRenderer;
                }

                if (firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !overrideCompleted.access) {
                    var taskstatusId = statusId || _.pluck(_.where(self.options.tasks, { 'id': this.instance.getSourceData().at(row).get('taskId') }), 'model')[0].get('statusId');
                    if (taskstatusId === 23) {
                        self.isTaskLocked = true;
                    }
                }

                if (col === 0 || col === 1 || col === 2 || col === 3 || col === 4 || col === 5 || col === 6 || col === 7 || col === 8 || col === 9 || self.isTaskLocked) {
                    return {
                        readOnly: true
                    }
                }

                if ((col === 10 && this.instance.getSourceData().at(row).get('status') === 'Not Filed') || self.isTaskLocked) {
                    return {
                        readOnly: true
                    }
                } else {
                    return {
                        readOnly: false
                    }
                }
            },
            //currentRowClassName: 'currentRow',
            //currentColClassName: 'currentCol',
            rowHeaders: false,
            maxRows: this.collection.length,
            manualColumnResize: true,
            stretchH: 'all',
            wordWrap: false,
            manualColumnFreeze: true,
            manualColumnResize: true,
            // height: 400,
            afterChange: function (changes, source) {
                if (changes != null) {
                    $.each(changes, function (index, change) {
                        if (self.$el.handsontable('getInstance').getSourceData().at(change[0]).hasChanged()) {
                            $('#buttonJurisdictionSave').show();
                            var td = self.$el.handsontable('getInstance').getCell(change[0], 9);
                            $(td).addClass('editedFileds');
                            self.cellEdited.push({ 'rowIndex': change[0], 'colIndex': 9 });
                        }
                    });
                }
            },
            afterGetColHeader: function (col, th) {
                var header = this.getColHeader(col);

                var headerobj = _.where(headersettings, { displayName: header })[0];

                if (!("content" in th.dataset && col >= 0)) {
                    th.dataset.content = headerobj.fullName;
                    th.dataset.keyname = headerobj.keyName;
                }

                if (col === 10 || col === 11) {
                    th.classList.add('customBorder');
                }
            },
            afterRender: function () {
                self.$('th[data-content]').popup({
                    debug: false
                });

                if (self.isreset) {
                    self.$el.find('.editedFileds').removeClass('editedFileds');
                    self.cellEdited = [];
                    self.isreset = false;
                } else {
                    $.each(self.cellEdited, function (index, ele) {
                        var td = self.$el.handsontable('getInstance').getCell(ele['rowIndex'], ele['colIndex']);
                        $(td).addClass('editedFileds');
                    });
                }
            },
            afterRenderer: function (td, row, col, prop, val, cellProperties) {
                if (col === 9) {
                    var model = this.getSourceData().at(row);
                    var rowElement = this.getCell(row, col);
                    rowElement.innerHTML = model.get('status') === 'Not Filed' ? "Deleted" : model.get('status');
                }
            },
        });
        if (!self.isTaskLocked)
            this.$el.handsontable('getInstance').addHook('afterOnCellMouseDown', this.cellClicked);
    },

    cellClicked: function (event, coords, TD) {
        var item = this.getSourceData().at(coords.row);
        var dataLength = this.getSourceData().length;
        switch (coords.col) {
            case 1:
                if (item.get('status') !== 'Not Filing' && item.get('status') !== 'Not Filed') {
                    if ((item.get("state_type") === 'TSJ' || item.get("state_type") === 'GR' || item.get("state_type") === 'NODUE') && item.get('status') !== 'Not Filed') {
                        Events.trigger('open:editorTSJ', this.getSourceData().at(coords.row));
                    }
                }
                break;
            case 11:
                var isJurisdictionDeleteRights = _.where(userContext.Result.Rights, {
                    module_id: 42
                })[0];
                if ((item.get("state_code") !== 'FD' && item.get("state_code") !== 'General') && item.get("state_code") !== 'GR' && item.get('status') !== 'Not Filed' && isJurisdictionDeleteRights.access || 'is_active' in item.changed) {
                    var model = this.getSourceData().at(coords.row);
                    //Need to change the varibale to global
                    var subtaskID = model.get('id');
                    var taskID = model.get('taskId');
                    var subCollection = model.collection;
                    var result = subCollection.where({ taskId: taskID });
                    var minModel = _.min(result, function (model) {
                        return model.get('id');
                    });
                    if (minModel.get('id') !== subtaskID) {
                        $('#buttonJurisdictionSave').show();
                        if (model.get('is_active')) {
                            model.set('status', 'In Process');
                            model.set('is_active', false);
                        } else {
                            model.set('status', 'Not Filed');
                            model.set('is_active', true);
                        }
                    } else {
                        $('#jurisdictionWarningMessage').html('Cannot delete Federal/General/Deleted Jurisdictions')
                            .closest('#divJurisdictionTaskWarningMessage')
                            .show()
                            .delay(5000)
                            .fadeOut();
                    }
                } else {
                    $('#jurisdictionWarningMessage').html('Cannot delete Federal/General/Deleted Jurisdictions')
                        .closest('#divJurisdictionTaskWarningMessage')
                        .show()
                        .delay(5000)
                        .fadeOut();
                }
                break;
        }
    }
});

Views.Layout = LayoutView.extend({
    // className: 'ui attached segment',
    className: 'ui grid',
    template: LayoutJurisdictionTemplate,
    templateHelpers: function () {
        return {
            isControlSheet: _.isUndefined(this.options.controlsheet) ? false : true
        }
    },
    regions: {
        gridData: 'div#jurisdiction-grid'
    },
    triggers: {
        'click #buttonAddJurisdiction': 'jurisdiction:Add:clicked',
        'click #buttonJurisdictionSave': 'jurisdiction:Save:clicked'
    },
    onDomRefresh: function () {
        if (!_.isUndefined(this.options.isDiffrentTaskTypeCount)) {
            if (this.options.isDiffrentTaskTypeCount !== 1) {
                $('#buttonAddJurisdiction').popup({
                    hoverable: true,
                    debug: false,
                    position: 'left center'
                });
            }
        }
    }
});

module.exports = Views;

},{"../../../jst/workspace/jurisdictionlayout-template.html":52,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],136:[function(require,module,exports){
var application = require('../../../application'),
	BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var _tsjModel, taskids, tasktypeID;
        if (this.options.showInTab) {
            _tsjModel = Reqres.request('TSJEmpty:Jurisdiction:entities');
            _tsjModel.set('period_end', this.options.pedate);
        } else {
            taskids = _.pluck(options.tasks, 'id');
            tasktypeID = _.values(options.tasks)[0].get('tasktypeId');
            _tsjModel = Reqres.request('TSJEmpty:Jurisdiction:entities');
            _tsjModel.set('task_ids', taskids.toString());
            _tsjModel.set('task_typeid', tasktypeID);
        }

        this.layout = this.GetLayout(_tsjModel);

        this.listenTo(this.layout, 'AddTSJToCollection:Jurisdiction:model', function (options) {
            var self = this;
            if (options.model.get('optionsDueDates') === 'dynamic') {
                options.model.set('isBeforeOrAfter', $('#selectBeforeOrAfter').val());
            }
            if (_.isEmpty(options.model.get('state_name').trim()) || _.isEmpty(options.model.get('state_code').trim())) {
                $('#TSJWarningMessage').html('Jurisdiction Name and Form Number Cannot be Empty.');
                $('#divTSJWarningMessage').show();
                return;
            }
            if (this.options.showInTab) {
                Events.trigger('ADDTSJMODEL:Jurisdiction:saveList', options.model);
            } else {
                this.layout.$el.modal('hide');
                $('#loading').show();
                var promise = [];
                var promisesTSJ = options.model.CreateSubtaskTsj(options.model);
                promise.push(promisesTSJ);
                $.when.apply($, promise).done(function () {
                    Events.trigger('jurisdiction:Add:Completed');
                    $('#loading').hide();
                }).fail(function () {
                    $('#loading').hide();
                });
            }
        });
        this.listenTo(this.layout, 'tsj:close:clicked', function () {
            Events.trigger('stop:tsj');
        });
        return this.show(this.layout);
    },

    GetLayout: function (_tsjModel) {
        return new Views.Layout({ showInTab: this.options.showInTab, model: _tsjModel });
    }
});
},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":137}],137:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutTSJAddorEditTemplate = require('../../../jst/workspace/jurisdictiontsj-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = ItemView.extend({
    template: LayoutTSJAddorEditTemplate,
    className: function () {
        if (this.options.showInTab) {
            return;
        }
        return 'ui medium modal transition';
    },
    initialize: function () {
    },
    templateHelpers: function () {
        var self = this;
        return {
            model: this.model.toJSON(),
            display: function () {
                if (self.options.showInTab) {
                    return 'none';
                } else {
                    return 'block';
                }
            },
            buttonText: function () {
                if (self.options.showInTab) {
                    return 'ADD';
                } else {
                    return 'SAVE';
                }
            }
        }
    },
    regions: {},
    triggers: {
        'click #buttonSaveTaskSpecificJur': 'AddTSJToCollection:Jurisdiction:model',
        'click .close': 'tsj:close:clicked'

    },

    events: {
        'focusout input': 'onModelChange',
        'click #buttonSaveTaskSpecificJur': 'SaveTSJModel',
        'change input#checkdueequaltopedate': 'checkoruncheck',
        'change input#checkduebasedonDays': 'checkoruncheckDays'
    },
    checkoruncheck: function () {
        if (this.$('#checkdueequaltopedate').is(':checked')) {
            $('#hideorunhide').hide();
            $('#hideorunhideday').hide();
        } else {
            $('#hideorunhide').show();
            $('#hideorunhideday').show();
        }
    },
    checkoruncheckDays: function () {
        if (this.$('#checkduebasedonDays').is(':checked')) {
            $('#hideMonthlabel').hide();
            $('#hideMonthinput').hide();
            $("#idOrignalDueDateOfDay").removeAttr("maxlength").attr("maxlength", '3');
            $("#idOrignalDueDateOfDay").removeAttr("placeholder").attr("placeholder", '1-180');
            $("#idOrignalDueDateOfDay").val('');
        } else {
            $('#hideMonthlabel').show();
            $('#hideMonthinput').show();
            $("#idOrignalDueDateOfDay").removeAttr("maxlength").attr("maxlength", '2');
            $("#idOrignalDueDateOfDay").removeAttr("placeholder").attr("placeholder", '1-31');;
            $("#idOrignalDueDateOfDay").val('');
        }
    },
    onModelChange: function (evt) {
        evt.stopPropagation();
        var key = this.$el.find(evt.currentTarget).data('tsj'); //check the condition
        this.model.set(key, this.$el.find(evt.currentTarget).val());
        if (this.$('#checkdueequaltopedate').is(':checked')) {
            this.model.set('isDueDateEqualToPeriodEndDate', true);
        } else {
            this.model.set('isDueDateEqualToPeriodEndDate', false);
        }
        if (this.$('#isSameMontPeriodenddate').is(':checked')) {
            this.model.set('isSameMontPeriodenddate', true);
        } else {
            this.model.set('isSameMontPeriodenddate', false);
        }
    },
    SaveTSJModel: function () {
    },
    onDomRefresh: function () {
        var self = this;
        $('.ui.checkbox').checkbox();
        $('.info.circle.icon').popup({
            debug: false
        });
        this.$('a[data-content]').popup({
            debug: false
        });
        $('#radioJurisdictionGroup input[type="radio"]').on('change', function (e) {
            var id = e.currentTarget.id;
            switch (id) {
                case 'radioConfigureJurisdiction':
                    $('#fixedJurisdiction').hide();
                    $('#configureJurisdiction').show();
                    self.model.set('optionsDueDates', 'dynamic');
                    break;
                case 'radiofixedJurisdiction':
                    $('#configureJurisdiction').hide();
                    $('#fixedJurisdiction').show();
                    self.model.set('optionsDueDates', 'fixed');
                    break;
                case 'radioNoJurisdiction':
                    $('#fixedJurisdiction').hide();
                    $('#configureJurisdiction').hide();
                    self.model.set('optionsDueDates', 'none');
                    break;
            }
        });

        new Pikaday({
            field: this.$el.find('input.date')[0],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[1],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[2],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[3],
            format: 'MM/DD/YYYY'
        });
        new Pikaday({
            field: this.$el.find('input.date')[4],
            format: 'MM/DD/YYYY'
        });
        if (this.$('#checkdueequaltopedate').is(':checked')) {
            $('#hideorunhide').hide();
        }
        if (!this.options.showInTab) {
            $('#hideforBulkPeDate').hide();
        }
    }
});

module.exports = Views;

},{"../../../jst/workspace/jurisdictiontsj-template.html":53,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],138:[function(require,module,exports){
var application = require('../../../application'),
    BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function(options) {
        var id = this.options.taskId;
        this.layout = this.GetLayout(options);

        this.listenTo(this.layout, 'save:bulk:points', function(obj) {
            if (!_.isEmpty(obj.view.editor.value())) {
                this.savePoint(this, this.layout.getFormData(), parseInt(id));
                this.layout.resetForm();
            }
        }, this);

        this.listenTo(this.layout, 'save:close:points', function(obj) {
            if (!_.isEmpty(obj.view.editor.value())) {
                this.savePoint(this, this.layout.getFormData(), parseInt(id));
                $('.ui.modal').modal('hide');
            }
        }, this);

        return this.show(this.layout);
    },

    savePoint: function(context, data, taskId) {
        $.post(window.routemap +'api/points/add/' + taskId, data).done(function (response) {
            if (response === 'success') {
                Events.trigger('points:new:added');
           }
         }).fail(function (response){
             console.log(response);
         });

        // Messenger().run({
        //     successMessage: 'Data saved, refreshing grid...',
        //     errorMessage: 'Error saving data',
        //     progressMessage: 'Saving data'
        // }, {
        //     url: window.routemap +'api/points/add/' + taskId,
        //     method: 'POST',
        //     data:data,
        //     success: function (){
        //         Events.trigger('points:new:added');
        //     }
        // });

    },

    GetLayout: function(opts) {
        return new Views.Layout(opts);
    }
});

},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":139}],139:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutAddPointsTemplate = require('../../../jst/workspace/addpoints-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutAddPointsTemplate,
    className: 'ui scrolling modal transition',
    events: {
        'focusout .wk-wysiwyg': 'checkEmpty',
        'keydown input[name="amount"]': 'checkforNumbersOnly'
    },

    checkforNumbersOnly: function(e) {
         // Allow: backspace, delete, tab, escape, enter ., and $
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190, 52, 188]) !== -1 ||
             // Allow: Ctrl+A, Ctrl+C, Ctrl+X, Ctrl+V
            (e.keyCode == 65 && ( e.ctrlKey === true || e.metaKey === true ) ) || 
            (e.keyCode == 67 && ( e.ctrlKey === true || e.metaKey === true ) ) || 
            (e.keyCode == 88 && ( e.ctrlKey === true || e.metaKey === true ) ) || 
            (e.keyCode == 86 && ( e.ctrlKey === true || e.metaKey === true ) ) || 
             // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
                 // let it happen, don't do anything
                 return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    },

    checkEmpty: function(e) {
        var element = this.$el.find('.wk-wysiwyg');
        if (element.is(':empty')) {
            element.css('border-color', '#dbb1b1');
        } else {
            element.css('border-color', 'gray');
        }
    },

    triggers: {
        'click #savepoints': 'save:bulk:points',
        'click #saveclosepoints': 'save:close:points'
    },
    getFormData: function() {
        //can be changed to use the semantic-ui get values by mapping keyname to appropriate form fields 
        window.getSelection().removeAllRanges();
        var arr = _.pluck(this.$('form').serializeArray(), 'value'),
            obj = {};
        obj.points = this.editor.value();
        obj.typeId = arr[0];
        obj.carryOver = arr[1];
        obj.priorYearAmount = arr[2];
        obj.reference = arr[3];
        obj.extensionType = this.$('form input[type="checkbox"]').is(':checked');

        return obj;
    },

    resetForm: function() {
        this.$('form').trigger('reset');
        this.editor.editable.innerHTML = '';
        if (this.options.activetab === 'tabQuePoints') {
            this.$('#questions').prop('checked', 'checked');
        } else if (this.options.activetab === 'tabRPPoints') {
            this.$('#reviewpts').prop('checked', 'checked');
        } else {
            this.$('#KI').prop('checked', 'checked');
        }
    },

    validateForm: function() {
        //method is not used
        this.$el.find('textarea#ipmarkdowneditor').val(this.$el.find('.wk-wysiwyg').text());
        this.checkEmpty();
        return this.$el.find('.ui.form').form('validate form');
    },

    onDomRefresh: function() {
        if (this.options.activetab === 'tabQuePoints') {
            this.$('#questions').prop('checked', 'checked');
        } else if (this.options.activetab === 'tabRPPoints') {
            this.$('#reviewpts').prop('checked', 'checked');
        } else {
            this.$('#KI').prop('checked', 'checked');
        }
        this.$('.ui.checkbox').checkbox();
        this.$('a[data-content]').popup({
            debug: false
        });
        this.editor = woofmark(this.$('#ipmarkdowneditor')[0], {
            parseHTML: domador,
            parseMarkdown: megamark,
            html: false,
            markdown: false,
            defaultMode: 'wysiwyg'
        });

        this.$el.find('.wk-wysiwyg').on('keydown', function(e) { e.stopPropagation(); });
        //this.formValidationRules();
    },

    formValidationRules: function() {
        // this cant be used cause use case vary amount can be empty but not alphabets or special character
        //which cannot be achieved by semantic-ui form validation
        this.validations = $('.ui.form.pointseditor')
            .form({
                amount: {
                    identifier: 'amount',
                    rules: [{
                        type: 'integer',
                        prompt: 'Amount should be a valid number'
                    }]
                },
                texteditor: {
                    identifier: 'texteditor',
                    rules: [{
                        type: 'empty',
                        prompt: 'Points cannot be empty'
                    }]
                }
            }, {
                // on: 'change',
                // inline: true
            });
    }
});

module.exports = Views;

},{"../../../jst/workspace/addpoints-template.html":27,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],140:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function(options) {
        this.layout = this.GetLayout(options.model);

        this.listenTo(this.layout, 'show', function() {
            this.layout.editor.editable.innerHTML = megamark(this.options.model.get(this.options.key));
        });

        this.listenTo(this.layout, 'save:edited:point', function(obj) {
            if (!_.isEmpty(obj.view.editor.value())) {
                this.saveData(obj.view)
            }
        }, this);

        this.listenTo(this.layout, 'saveandclose:edited:point', function(obj) {
            if (!_.isEmpty(obj.view.editor.value())) {
                this.options.model.set('status', 'Closed');
                this.saveData(obj.view);
            }
        }, this);

        this.listenTo(this.layout, 'saveandopen:edited:point', function(obj) {
            if (!_.isEmpty(obj.view.editor.value())) {
                this.options.model.set('status', 'Open');
                this.saveData(obj.view);
            }
        }, this);

        return this.show(this.layout);
    },

    saveData: function(view) {
        window.getSelection().removeAllRanges();
        this.options.model.set(this.options.key, view.editor.value());
        $('#savepoints').show();
        view.$el.modal('hide');
    },

    GetLayout: function(model) {
        var isResponseTemplate = this.options.key === 'response' ? true : false
        return new Views.Layout({
            isResponseTemplate: isResponseTemplate,
            model: model
        });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":141}],141:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    EditorTemplate = require('../../../jst/common/editpoint-template.html'),
    EditorResponseTemplate = require('../../../jst/common/editresponse-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    initialize: function() {
        this.checkTemplate();
    },
    checkTemplate: function() {
        if (this.options.isResponseTemplate) {
            this.template = EditorResponseTemplate
        } else {
            this.template = EditorTemplate;
        }
    },
    className: 'ui scrolling modal transition',
    events: {
        'focusout .wk-wysiwyg': 'checkEmpty'
    },
    templateHelpers: function() {
        if (this.options.isResponseTemplate) {
            return {
                showPoints: megamark(this.model.get('points')),
            }
        }
        return {
            name: 'Point'
        };
    },
    checkEmpty: function(e) {
        var element = this.$(e.currentTarget);
        if (element.is(':empty')) {
            element.css('border-color', '#e0b4b4');
        } else {
            element.css('border-color', 'gray');
        }
    },
    triggers: {
        'click #savepoint': 'save:edited:point',
        'click #saveandclose': 'saveandclose:edited:point',
        'click #saveandopen': 'saveandopen:edited:point'
    },
    onDomRefresh: function() {
        //this.$('.ui.modal').modal('hide dimmer');
        //this.$('.ui.dimmer').css('background-color', 'rgba(0,0,0,0)');
        //this.$('.ui.dimmer').parent().find('.ui.dimmer').css('background-color', 'rgba(0,0,0,0)');
        this.$('a[data-content]').popup({
            debug: false
        });
        this.editor = woofmark(this.$('#ipmarkdowneditor')[0], {
            parseHTML: domador,
            parseMarkdown: megamark,
            html: false,
            markdown: false
        });
        
        this.$el.find('.wk-wysiwyg').on('keydown', function (e) { e.stopPropagation(); });
    }
});

module.exports = Views;

},{"../../../jst/common/editpoint-template.html":20,"../../../jst/common/editresponse-template.html":21,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],142:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
    var API = {};

    context.startWithParent = false;
    context.Show = require('./show/controller');
    context.Add = require('./add/controller');
    context.Editor = require('./edit/controller');
    context.Tabs = require('./show/tabscontroller');
    context.Checklists = require('../checklists/show/controller');

    API = {
    	show: function (options) {
    		if (options.controlsheet || options.moveTask) {
    			options.pointstabregion = options.region
    		}    		
            if(!_.isUndefined(this.showController)){
                this.showController.destroy();
            }
            this.showController =  new context.Show.Controller({
                region: options.pointstabregion,
                tasksCollection: options.tasksCollection,
                controlsheet: options.controlsheet,
                moveTask:options.moveTask,
                tasks: options.tasks,
                tasksIds: options.tasksIds,
                priortasks: options.priortasks,
                userAutoSuggest: options.userAutoSuggest,
                pointsCollections: options.pointsCollections
            });            
        },
        add: function (options) {
            return new context.Add.Controller({
                region: application.rootView.modalWindow,
                taskId: options.taskid,
                activetab: options.activetab
            });
        },
        checklists: function (options) {
            return new context.Checklists.Controller({
                region: options.checklisttabregion,
                collection: options.tasksCollection
            });
        },
        showEditor: function (model, key){
            return new context.Editor.Controller({
                region: application.rootView.modalWindow,
                model: model,
                key: key
            });
        },

        showTabs: function (options){
            return new context.Tabs(options);
        }
    };

    context.on('start', function (options) {
    	// return API.show(options);
    	if (_.isUndefined(options.controlsheet) && _.isUndefined(options.moveTask)) {
    		API.showTabs(options);
    		if (_.isEmpty(window.location.hash)) {
    			return API.show(options);
    		} else {
    			$('#tabs .item').tab('change tab', 'second');
    			return API.checklists(options)
    		}
    	} else {
    		return API.show(options);
    	}
         
    });

    Events.on('points:Add:clicked', function (options) {    
        return API.add(options);
    });

    Events.on('checklists:clicked', function (collection) {
        return API.checklists({ collection: collection });
    });

    Events.on('stop:points', function () {
        return context.stop();
    });

    Events.on('stop:points', function () {
        return context.stop();
    });

    Events.on('start:points:module', function (options) {
        return API.show(options);
    });

    Events.on('stop:move', function () {
        return context.stop();
    });

      Events.on('start:checklist:module', function (options) {
        return API.checklists(options);
    });

    Events.on('open:editor', function (model, key) {
        return API.showEditor(model, key);
    });
};
},{"../../lib/config/events":68,"../checklists/show/controller":103,"./add/controller":138,"./edit/controller":140,"./show/controller":143,"./show/tabscontroller":144}],143:[function(require,module,exports){
var application = require('../../../application'),
    BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var taskids, points, pointsCopy, isPortalTask, prioryears_pts;
        if (!options.controlsheet) {
            taskids = options.tasksIds || window.localStorage.getItem('points_Taskids');
            if (!options.moveTask) {
                prioryears_pts = Reqres.request('task:prioryears', taskids);
                options.priortasks = prioryears_pts;
                var clientInfo = window.localStorage.getItem('points_clientinfo').split('_');
                var clientinfo = clientInfo[0];
                clientinfo = clientinfo + (clientInfo[1] === '' ? '' : ' (' + clientInfo[1] + ')');
                clientinfo = clientinfo + (clientInfo[6] === '' ? '' : ' | ' + clientInfo[6]);
                clientinfo = clientinfo + (clientInfo[3] === '' ? '' : ' | ' + clientInfo[3]);
                clientinfo = clientinfo + (clientInfo[5] === '' ? '' : ' | ' + clientInfo[5]);
                $('#clientinfo').text(clientinfo);
                var clientcontact = '';
                clientcontact = clientcontact + (clientInfo[4] === '' ? '' : ' E: ' + clientInfo[4]);
                clientcontact = clientcontact + (clientInfo[2] === '' ? '' : ' | P: ' + clientInfo[2]);
                isPortalTask = clientInfo[7].trim() === 'true' ? true : false;
                $('#clientcontact').text(clientcontact);
            }
            else
                options.priortasks = prioryears_pts = [];
            points = options.collection = Reqres.request('Points:entities', taskids, options.moveTask); //_.pluck(options.tasksCollection.selected, 'id').join());
            pointsCopy = points.models;

        } else {
            taskids = options.tasksIds || options.tasks.get('id');
            prioryears_pts = [];
            if (!options.moveTask) {
                points = options.collection = options.pointsCollections;
                prioryears_pts = options.priortasks; //prioryears = Reqres.request('task:prioryears', taskids);
            }
            else
                points = options.collection = Reqres.request('Points:entities', taskids, options.moveTask); //_.pluck(options.tasksCollection.selected, 'id').join());
            //options.prioryears = prioryears;
            pointsCopy = points.models;
            //isPortalTask = window.localStorage.getItem('points_clientinfo').split('_')[7].trim() === 'true' ? true : false;
            isPortalTask = options.tasks.get('isPortal') === '1' ? true : false;
        }

        this.layout = new Views.Layout(options);
        this.$loading = $('#loading');

        this.listenTo(this.layout, 'show', function () {
            this.GetAllDataGrid(points, prioryears_pts, taskids);
            var self = this;
        }, this);

        this.listenTo(this.layout, 'points:allpoints:clicked', function (obj) {
            this.filterbyAllPoints(obj.view, obj.collection);
        }, this);

        this.listenTo(this.layout, 'points:kwint:clicked', function (obj) {
            this.filterbyKnowledgeAndInstructions(obj.view, obj.collection);
        }, this);

        this.listenTo(this.layout, 'points:Que:clicked', function (obj) {
            this.filterbyQuestions(obj.view, obj.collection, isPortalTask);
        }, this);

        this.listenTo(this.layout, 'points:RP:clicked', function (obj) {
            this.filterbyReviewPoints(obj.view, obj.collection);
        }, this);

        this.listenTo(this.tabslayout, 'checklists:clicked', function () {
            return application.module('Workflow.Checklists').start({
                region: this.tabslayout.checklisttab,
                tasksIds: taskids
            });
        });

        this.listenTo(this.layout, 'points:save:clicked', function (obj) {
            this.onSavePoints(obj.view, obj.collection, taskids, this);
        }, this);

        this.listenTo(this.layout, 'points:addQuestionsToPortal:clicked', function (obj) {
            this.addorremovePointsFromPortal(obj.view, obj.collection, true, taskids, this);
        }, this);

        this.listenTo(this.layout, 'points:removeQuestionsFromPortal:clicked', function (obj) {
            this.addorremovePointsFromPortal(obj.view, obj.collection, false, taskids, this);
        }, this);

        this.listenTo(this.layout, 'points:Add:clicked', function () {
            Events.trigger('points:Add:clicked', {
                taskid: taskids,
                activetab: this.layout.$('a.active.orange').data('tab')
            });
        }, this);

        this.listenTo(Events, 'points:new:added', function (obj) {
            this.onAddNewPoints(points, taskids, this);
            // this.onAddNewPoints(obj.view, obj.collection, this)
        }, this);

        this.listenTo(this.layout, 'points:close:clicked', function () {
            Events.trigger('stop:points');
        });

        this.listenTo(Events, 'points:delete:clicked', function (options) {
            // options.set('deleted', !options.get('deleted'));
        });

        this.listenTo(this.layout, 'points:prior:clicked', function (obj) {
            this.showPriorPoints(obj.view, obj.collection, prioryears_pts, this);
        });

        this.listenTo(this.layout, 'points:current:clicked', function (obj) {
            this.showCurrentPoints(obj.view, obj.collection, prioryears_pts, taskids, this);
        });

        this.listenTo(this.layout, 'Export:Grid:Data:Points', function () {
            Events.trigger('Export:Grid:Data:Points:CSV');
        });

        this.listenTo(points, 'select:some', function (model) {
            this.layout.$('#gridoptions').removeClass('disableoption');
        }, this);

        this.listenTo(points, 'select:all', function (model) {
            this.layout.$('#gridoptions').removeClass('disableoption');
        }, this);

        this.listenTo(this.layout, 'Create:Email:Points', function (model) {
            if (options.controlsheet) {
                var clientinfo = this.options.tasks.toJSON();
                this.sendEmail(this.layout, model.collection, clientinfo.clientName, clientinfo.clientAccountNumber, clientinfo.taskType, clientinfo.clientEmail, userContext.Result.UserContext[0].phoneNumber);
            } else {
                this.sendEmail(this.layout, model.collection, clientInfo[0], clientInfo[1], clientInfo[6], clientInfo[4], userContext.Result.UserContext[0].phoneNumber);
            }
        }, this);

        this.listenTo(points, 'select:none', function () {
            this.layout.$('#email-link').prop({
                'href': 'javascript:void(0)'
            });
            this.layout.$('#gridoptions').addClass('disableoption');
        }, this);

        return this.show(this.layout, {
            loading: true
        });
    },

    sendEmail: function (view, collection, name, accno, type, mailid, phno) {
        var link = view.$('#email-link'),
            body = '',
            _clipBoardText = '',
             from = userContext.Result.UserContext[0].firstName !== '' ? userContext.Result.UserContext[0].firstName + ' ' + userContext.Result.UserContext[0].lastName : userContext.Result.UserContext[0].lastName, //window.loggedinUser,
             outlookApp;
        var _clientName = name.split(',');
        name = _clientName.length >= 2 ? (_clientName[1].trim() !== '' ? _clientName[1].trim() + ' ' + _clientName[0].trim() : _clientName[0].trim()) : _clientName[0].trim();
        try {
            outlookApp = new ActiveXObject("Outlook.Application");
        }
        catch (ex) {

        }
        if (outlookApp == "Outlook") {
            var strbody1 = name + "<br/>" + "<br/>" + "The following questions and issues were raised during the performance of our work. Please provide responses to the following items.",
             strbody2 = "Please email me with your responses at your earliest convenience.",
             Phone = !_.isEmpty(phno) ? Phone = "Tel: " + phno : ''
            strContent = this.createPointsforOutlookEmail(collection);

            var nameSpace = outlookApp.getNameSpace("MAPI");
            mailFolder = nameSpace.getDefaultFolder(6);
            mailItem = mailFolder.Items.add('IPM.Note');
            if (accno != '')
                mailItem.Subject = "Open Items regarding Form - " + type + ", Client Number - " + accno;
            else
                mailItem.Subject = "Open Items regarding Form - " + type;
            mailItem.To = mailid;
            mailItem.HTMLBody = strbody1 + "<br/>" + "<br/>" + strContent + " " + strbody2 + "<br/><br/>" + from + "<br/>" + Phone;
            mailItem.display(0);
        } else {
            body += name + "\n\n";
            body += "The following questions and issues were raised during the performance of our work. Please provide responses to the following items. \n\n";

            _clipBoardText = this.createPointsforEmail(collection);
            if (_clipBoardText.length > 1200) {
                body += "[[[Points could not be automatically inserted based on your browser's limitations. XCM has copied the data you selected into your clipboard. Please highlight this text and press (Ctrl + V) to paste the points in this email.]]] \n\n";
                this.copyToClipboard(_clipBoardText);
            } else {
                body += _clipBoardText;
            }

            body += "Please email me with your responses at your earliest convenience. \n\n";
            body += " " + from + "\n";
            !_.isEmpty(phno) ? body += "Tel: " + phno : '';
            if (accno != '') {
                link[0].href = "mailto:" + mailid + "?subject=Open Items regarding Form - " + type + ", Client Number - " + accno + "&body=" + encodeURIComponent(body)
            } else {
                link[0].href = "mailto:" + mailid + "?subject=Open Items regarding Form - " + type + "&body=" + encodeURIComponent(body)
            }
            return true;
        }
    },

    copyToClipboard: function (_clipBoardText) {
        // Creating hidden id storing content
        var targetId = "_hiddenCopyText_";
        target = document.getElementById(targetId);
        if (!target) {
            var target = document.createElement("textarea");
            target.id = targetId;
            document.body.appendChild(target);
        }

        ///Start Selecting balank before copying to clipboard
        target.textContent = "";
        target.select();
        document.execCommand("copy");
        ///Start Selecting balank before copying to clipboard

        target.textContent = _clipBoardText;
        // Highlight its content
        target.select();

        // Copy the highlighted text
        document.execCommand("copy");

        // Remove it from the body
        document.body.removeChild(target);
    },

    createPointsforEmail: function (_collection) {
        var pointsText = "",
              counter = 1;
        _.each(_collection.models, function (model, index) {
            if (model.selected) {
                prioryramt = _.isEmpty(model.get('priorYearAmount')) ? '' : ' The Prior year amount was ' + model.get('priorYearAmount') + ".";
                pointsText += counter + ") " + domador(model.get('points')) + "." + prioryramt + "\n \n";
                counter++;
            }
        }, this);
        pointsText = pointsText.replace(/(<\?[a-z]*(\s[^>]*)?\?(>|$)|<!\[[a-z]*\[|\]\]>|<!DOCTYPE[^>]*?(>|$)|<!--[\s\S]*?(-->|$)|<[a-z?!\/]([a-z0-9_:.])*(\s[^>]*)?(>|$))/gi, '').replace(/&nbsp;/g, ' ').replace(/\\/g, '').replace(/_/g, '').replace(/#/g, '').replace(/\**/g, '');
        return pointsText;
    },

    createPointsforOutlookEmail: function (_collection) {
        var pointsText = "",
              counter = 1;
        _.each(_collection.models, function (model, index) {
            if (model.selected) {
                prioryramt = _.isEmpty(model.get('priorYearAmount')) ? '' : ' The Prior year amount was $ ' + model.get('priorYearAmount') + ".";
                pointsText += counter + ") " + domador(model.get('points')) + "." + prioryramt + "<br/><br/>";
                counter++;
            }
        }, this);
        pointsText = pointsText.replace(/\\/g, '').replace(/_/g, '').replace(/#/g, '').replace(/\**/g, '');
        return pointsText;
    },

    showPriorPoints: function (view, collection, prioryears_pts, ctx) {

        this.$loading.show();
        if (_.isUndefined(_.where(prioryears_pts, {
            selected: true
        })[0])) {
            _.where(prioryears_pts, {
                id: 1
            })[0].selected = true;
        } else {
            var selectedyear = _.where(prioryears_pts, {
                selected: true
            })[0];
            _.where(prioryears_pts, {
                id: (selectedyear.id + 1)
            })[0].selected = true;
            _.where(prioryears_pts, {
                id: selectedyear.id
            })[0].selected = false;
        }

        collection.fetch({
            silent: true,
            data: {
                query: _.where(prioryears_pts, {
                    selected: true
                })[0].taskId.toString()
            }
        }).done(function (data) {
            collection.originalModels = collection.models.slice();
            var id = ctx.layout.$('#tabIssuesPoints .item.active').attr('data-typeid');
            if (id === "1,2") {
                data = _.filter(collection.originalModels, function (model) {
                    return model.get('typeId') === 1 || model.get('typeId') === 2;
                });
            } else if (id === "0") {
                data = collection.originalModels;
            } else {
                data = _.filter(collection.originalModels, function (model) {
                    return model.get('typeId') === parseInt(id);
                });
            }
            collection.reset(data);
            ctx.$loading.hide();
        }).fail(function () {
            ctx.$loading.hide();
        });

        //$('#bulkeditchecklist').addClass('hideItem');
        this.layout.$('#addPointsButton').hide();
        this.layout.$('#questionsViaPortal').hide();
        this.layout.$('#removequestionsFromPortal').hide();

        if (_.where(prioryears_pts, {
            selected: true
        })[0].id === prioryears_pts.length) {
            this.layout.$('#priorpoints').hide();
        }
    },

    showCurrentPoints: function (view, collection, prioryears_pts, ids, ctx) {
        this.$loading.show();
        if (!_.isUndefined(_.where(prioryears_pts, {
            selected: true
        })[0])) {
            _.where(prioryears_pts, {
                selected: true
            })[0].selected = false;
        }

        collection.fetch({
            silent: true,
            data: {
                query: ids.toString()
            }
        }).done(function () {
            collection.originalModels = collection.models.slice();
            var id = ctx.layout.$('#tabIssuesPoints .item.active').attr('data-typeid');
            if (id === "1,2") {
                data = _.filter(collection.originalModels, function (model) {
                    return model.get('typeId') === 1 || model.get('typeId') === 2;
                });
            } else if (id === "0") {
                data = collection.originalModels;
            } else {
                data = _.filter(collection.originalModels, function (model) {
                    return model.get('typeId') === parseInt(id);
                });
            }
            collection.reset(data);
            ctx.$loading.hide();
            //Events.trigger('checklists:refreshGrid');
        }).fail(function () {
            ctx.$loading.hide();
        });

        this.layout.$('#priorpoints').show();
        this.layout.$('#addPointsButton').show();
        this.layout.$('#questionsViaPortal').show();
        this.layout.$('#removequestionsFromPortal').show();
    },

    addorremovePointsFromPortal: function (view, collection, opt, ids, ctx) {
        var questionselected = _.filter(collection.selected, function (model) {
            return model.get('typeId') === 3 && model.selected === true;
        });
        $.post(window.routemap + 'api/points/portal/' + opt + '/' + ids + '/' + _.pluck(questionselected, 'id').toString())
            .done(function (response) {
                if (response === 'success') {
                    _.each(collection.selected, function (model) {
                        model.deselect();
                    });
                    collection.fetch({
                        data: {
                            query: ids.toString()
                        }
                    })
                        .done(function () {
                            collection.originalModels = collection.models.slice();
                            var id = ctx.layout.$('#tabIssuesPoints .item.active').attr('data-typeid');
                            if (id === "1,2") {
                                data = _.filter(collection.originalModels, function (model) {
                                    return model.get('typeId') === 1 || model.get('typeId') === 2;
                                });
                            } else if (id === "0") {
                                data = collection.originalModels;
                            } else {
                                data = _.filter(collection.originalModels, function (model) {
                                    return model.get('typeId') === parseInt(id);
                                });
                            }
                            collection.reset(data);
                        });
                }
            }).fail(function (response) { });
    },

    onSavePoints: function (view, collection, ids, ctx) {
        //view.$('#savepoints').addClass('loading');
        $('#loading').show();
        collection.saveAll({
            success: function () { },
            error: function () { }
        }).done(function () {
            $('#savepoints').hide();
            collection.fetch({
                //reset: true,
                data: {
                    query: ids.toString()
                }
            }).done(function () {
                collection.originalModels = collection.models.slice();
                var id = ctx.layout.$('#tabIssuesPoints .item.active').attr('data-typeid');
                if (id === "1,2") {
                    data = _.filter(collection.originalModels, function (model) {
                        return model.get('typeId') === 1 || model.get('typeId') === 2;
                    });
                } else if (id === "0") {
                    data = collection.originalModels;
                } else {
                    data = _.filter(collection.originalModels, function (model) {
                        return model.get('typeId') === parseInt(id);
                    });
                }
                collection.reset(data);
            });
            //view.$('#savepoints').removeClass('loading');
            $('#loading').hide();
        });
    },

    onAddNewPoints: function (collection, ids, ctx) {
        var data;
        collection.fetch({
            data: {
                query: ids.toString()
            }
        }).done(function () {
            collection.originalModels = collection.models.slice();
            var id = ctx.layout.$('#tabIssuesPoints .item.active').attr('data-typeid');
            if (id === "1,2") {
                data = _.filter(collection.originalModels, function (model) {
                    return model.get('typeId') === 1 || model.get('typeId') === 2;
                });
            } else if (id === "0") {
                data = collection.originalModels;
            } else {
                data = _.filter(collection.originalModels, function (model) {
                    return model.get('typeId') === parseInt(id);
                });
            }
            collection.reset(data);
        });
    },

    filterbyAllPoints: function (view, collection) {
        view.$('.active.orange.item').removeClass('active');
        view.$('#tabAllPointsClick').addClass('active');
        view.$('[data-action]').each(function (ind, ele) {
            $(this).hide();
        });

        collection.reset(collection.originalModels);
    },

    filterbyKnowledgeAndInstructions: function (view, collection) {
        view.$('.active.orange.item').removeClass('active');
        view.$('#tabKIClick').addClass('active');
        view.$('[data-action]').each(function (ind, ele) {
            $(this).hide();
        });

        var data = _.filter(collection.originalModels, function (value) {
            return value.get('typeId') === 1 || value.get('typeId') === 2;
        });

        collection.reset(data);
    },

    filterbyQuestions: function (view, collection, isPortal) {
        view.$('.active.orange.item').removeClass('active');
        view.$('#tabQueClick').addClass('active');
        if (isPortal) {
            view.$('[data-action]').each(function (ind, ele) {
                $(this).show();
            });
        }

        var data = _.filter(collection.originalModels, function (model) {
            return model.get('typeId') === 3;
        });
        collection.reset(data);
    },

    filterbyReviewPoints: function (view, collection) {
        view.$('.active.orange.item').removeClass('active');
        view.$('#tabRPClick').addClass('active');
        view.$('[data-action]').each(function (ind, ele) {
            $(this).hide();
        });

        var data = _.filter(collection.originalModels, function (model) {
            return model.get('typeId') === 4;
        });

        collection.reset(data);
    },

    GetAllDataGrid: function (pointsCollection, prioryears_pts, ids) {
        var dataGrid = new Views.DataGrid({
            collection: pointsCollection,
            actcollection: pointsCollection,
            gridarea: 'all',
            prioryears: prioryears_pts,
            currentTaskId: ids,
            moveTask: this.options.moveTask
        });

        return this.show(dataGrid, {
            loading: true,
            region: this.layout.gridAllData
        });
    },
});

},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":145}],144:[function(require,module,exports){
var application = require('../../../application'),
    BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports = BaseController.extend({
    initialize: function(options) {
        this.tabslayout = new Views.TabLayout();
        options.pointstabregion = this.tabslayout.pointstab;
        options.checklisttabregion = this.tabslayout.checklisttab; 

         this.listenTo(this.tabslayout, 'points:clicked', function (obj) {
            // Backbone.history.navigate("/", {trigger: true, replace: true});
            Events.trigger('start:points:module', options);
        });

        this.listenTo(this.tabslayout, 'checklists:clicked', function (obj) {
            // Backbone.history.navigate("/#checklist", {trigger: true, replace: true});
            Events.trigger('start:checklist:module', options);
        });

        return this.show(this.tabslayout, {
            loading: true
        });
    }
});

},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":145}],145:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CompositeView = require('../../../lib/views/composite'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutPointsTemplate = require('../../../jst/workspace/pointslayout-template.html'),
    ItemPointsTemplate = require('../../../jst/workspace/pointsitem-template.html'),
    TabTemplate = require('../../../jst/common/issuepoint&checlist-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

var ColumnAttributes = function (attr, celltype, readonly, align, renderer, source, strict) {
    var columnSettings;

    function colString(item, value) {
        if (_.isUndefined(value)) {
            return item.get(attr);
        } else {
            item.set(attr, value);
        }
    };

    function colDate(item, value) {
        if (_.isUndefined(value)) {
            var year = moment(item.get(attr)).year();
            return (year != 1900 ? moment(item.get(attr)).format('l') : '');
        }
    };

    function colBool(item, value) {
        if (_.isUndefined(value)) return _.isUndefined(item.selected) ? false : item.selected;
        return (value ? item.select() : item.deselect());
    }

    function colLink(item, value) {
        if (_.isUndefined(value)) {
            return '<a href="/routing" target="_blank">' + item.get(attr) + '</a>';
        } else {
            return;
        }
    }

    function colAutocomplete(item, value) {
        if (_.isUndefined(value)) {
            return item.get(attr);
        } else {
            item.set(attr, value);
        }
    };

    switch (celltype) {
        case 'html':
            columnSettings = {
                data: colLink,
                type: 'text',
                readonly: readonly,
                className: 'htLeft',
                renderer: 'html'
            }
            break;
        case 'checkbox':
            columnSettings = {
                data: colBool,
                type: 'checkbox',
                readonly: readonly,
                className: 'htCenter',
                colWidths: 20
            }
            break;
        case 'numeric':
            columnSettings = {
                data: colString,
                readOnly: readonly,
                className: 'htCenter'
            }
            break;
        case 'date':
            columnSettings = {
                data: colDate,
                type: 'text',
                readOnly: readonly,
                className: 'htLeft',
                dateFormat: 'MM/DD/YYYY'
            }
            break;
        case 'dropdown':
            columnSettings = {
                data: colAutocomplete,
                type: 'dropdown',
                className: align,
                source: source,
                strict: strict
            }
            break;
        default:
            columnSettings = {
                data: colString,
                type: 'text',
                className: align,
                readOnly: readonly
            };
            break;
    }

    return columnSettings;
};

function statuscolumnRenderer(instance, td, row, col, prop, value, cellProperties) {
    td.innerHTML = value;
    td.style.fontWeight = 'bold'
    if (value.trim() === 'Open') {
        td.style.color = '#64943f';
    }
    //else {
    //    td.style.color = '#FF3300';
    //}
}

var cellEdited = [];
var isreset = false;
var isLockedTask = false;

Views.DataGrid = ItemView.extend({
    template: false,
    lookups: {
        carryOver: {
            "Current Period End": "C",
            "Next Period End": "N",
            "Current & Next Period End": "CN",
            "Permanent": "P"
        },
        pointsType: {
            "Knowledge": "1",
            "Instruction": "2",
            "Questions": "3",
            "Review Points": "4"
        }
    },
    initialize: function () {
        this.$tab = $('#tabIssuesPoints');
        this.currentTaskId = this.options.currentTaskId;
        this.listenTo(this.collection, 'change:points', this.refreshGrid);
        this.listenTo(this.collection, 'change:response', this.refreshGrid);
        this.listenTo(this.collection, 'change:status', this.refreshGrid);
        this.listenTo(this.collection, 'reset', function () {
            isreset = true;
            this.refreshGrid();
        });
        this.listenTo(this.collection, 'change:deleted', this.refreshGrid);
        this.listenTo(Events, 'Export:Grid:Data:Points:CSV', function () {
            var temp = this.exportPlugin.exportAsString('csv', {
                exportHiddenRows: true,
                exportHiddenColumns: true,
                columnHeaders: true,
                rowHeaders: true
            }).replace(/(<([^>]+)>)|(false)/ig, '');

            this.exportToCsv('Points-Items.csv', temp);
        }, this);
    },
    events: {
        'click th[data-keyname]': 'sortGridData'
    },
    exportToCsv: function (filename, content) {
        var blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
        if (navigator.msSaveBlob) { // IE 10+
            navigator.msSaveBlob(blob, filename);
        } else {
            var link = document.createElement("a");
            if (link.download !== undefined) { // feature detection
                // Browsers that support HTML5 download attribute
                var url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", filename);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    },
    sortGridData: function (e) {
        this.collection.sortData(e.currentTarget.dataset.keyname);
    },

    refreshGrid: function () {
        this.updateCount();

        if (!this.collection.length) {
            this.$el.hide().siblings('#msg').show();
            $('.ui.tab.active .ui.grid  div.row').first().hide();
            return;
        }
        else {
            $('.ui.tab.active .ui.grid  div.row').first().show();
        }
        

        var grid = this.$el.handsontable('getInstance');
        this.$el.show().siblings('#msg').hide();
        if (!_.isUndefined(grid)) {
            grid.updateSettings({
                maxRows: this.collection.length
            });
            grid.render();
        } else {
            this.$el.empty();
            this.initializeGrid();
        }
    },
    onDomRefresh: function () {
        $('<div id="msg" style="display:none;">No records found</div>').insertAfter(this.$el);
        this.$el.css({
            'width': '100%',
            // 'height': '400px',
            // 'overflow': 'auto'
        });
        $('.ui.menu .item').tab();

        if (!this.collection.length) {
            // this.$el.html("No Records Found");
            this.$el.siblings('#msg').show();
            $('.ui.tab.active .ui.grid  div.row').first().hide();
            return;
        }



        this.initializeGrid();
        this.updateCount();
    },

    getColumnSettings: function () {
        var self = this;
        var columns = [
            ColumnAttributes('', 'checkbox', true), {
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        if (model.get('actions') === 'M' || model.get('actions') === 'P')
                            return model.get('actions');
                        else
                            return '';
                    } else {
                        return model.get('actions');
                    }
                },
                readOnly: true,
                type: 'text'
            },
            ColumnAttributes('clientName', 'text', true), {
                type: 'dropdown',
                strict: true,
                allowInvalid: false,
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        return model.get('type');
                    } else {
                        model.set('type', value);
                        model.set('typeId', self.lookups.pointsType[value]);
                        return model.get('type');
                    }
                },
                source: _.keys(this.lookups.pointsType)
            },
            //ColumnAttributes('', 'text', true), //numbers based on point type
            ColumnAttributes('pointsBy', 'text', true), {
                data: function (item, val) {
                    if (_.isUndefined(val)) {
                        var year = moment(item.get('pointsOn')).year();
                        return (year != 1900 ? moment(item.get('pointsOn')).format('l') : '');
                    } else {
                        return;
                    }
                },
                readonly: true,
                type: 'text'
            }, {
                data: function (item, val) {
                    if (_.isUndefined(val)) {
                        return megamark(item.get('points'))
                        // return megamark(item.get('points')).trim().split("<br/>").join('');
                    } else {
                        return;
                    }
                },
                editor: false,
                renderer: "html",
            }, {
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        return model.get('reference');
                    } else {
                        return model.set('reference', value.length > 10 ? value.substring(0, 10) : value);
                    }
                },
                readOnly: false,
                type: 'text',
                //validator: function (value, callback) {
                //    if (value.length > 10) {
                //        this.instance.setDataAtCell(this.row, this.col, value.substring(0, 10));
                //    }
                //    callback(true);
                //}
            }, {
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        return model.get('priorYearAmount');
                    } else {                       
                        return model.set('priorYearAmount', value.length > 50 ? value.substring(0, 50) : value);
                    }
                },
                readOnly: false,
                type: 'text'
            }, {
                data: function (item, val) {
                    if (_.isUndefined(val)) {
                        return megamark(item.get('response'))
                        // return megamark(item.get('response')).trim().split("<br/>").join('');
                    } else {
                        return;
                    }
                },
                editor: false,
                renderer: "html"
            }, {
                type: 'dropdown',
                strict: true,
                allowInvalid: false,
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        return model.get('status');
                    } else {
                        model.set('status', value);
                        return model.get('status');
                    }
                },
                trimDropdown: false,
                source: ['Open', 'Closed']
            },
            ColumnAttributes('responseBy', 'text', true), {
                type: 'dropdown',
                strict: true,
                allowInvalid: false,
                data: function (model, value) {
                    if (_.isUndefined(value)) {
                        //return model.get('carryOver');
                        switch (model.get('carryOver').trim()) {
                            case 'C':
                                return 'Current Period End';
                                break;
                            case 'N':
                                return 'Next Period End';
                                break;
                            case 'CN':
                                return 'Current & Next Period End';
                                break;
                            case 'P':
                                return 'Permanent';
                                break;
                        }
                    } else {
                        model.set('carryOver', self.lookups.carryOver[value]);
                        return model.get('carryOver');
                    }
                },
                trimDropdown: false,
                source: _.keys(this.lookups.carryOver)
            }, {
                data: function (item, value) {
                    if (_.isUndefined(value)) {
                        switch (item.get('deleted')) {
                            case true:
                                return '<i class="undo blue icon"></i>';
                                break;
                            default:
                                return '<i class="trash outline blue icon"></i>';
                                break;
                        }
                    } else {
                        return;
                    }
                },

                renderer: "html",
                className: 'htCenter',
                editor: false

            }
        ];

        if (this.options.moveTask) {
            return columns;
        } else {
            return columns.filter(function (val, ind) {
                return ind !== 2;
            });
        }
    },

    getHeaderSettings: function () {
        var headers = this.headers = [{
            displayName: '',
            keyName: '',
            fullName: '',
            colWidth: 2
        }, {
            displayName: 'Actions',
            keyName: 'actions',
            fullName: 'Actions',
            colWidth: 2
        }, {
            displayName: 'Client',
            keyName: 'clientName',
            fullName: 'Client Name',
            colWidth: 8
        }, {
            displayName: 'Type',
            keyName: 'type',
            fullName: 'Points Type',
            colWidth: 7
        },
            /* {
                displayName: '#',
                keyName:'',
                fullName:'',
                colWidth: 
            } , */
            {
                displayName: 'By Whom',
                keyName: 'pointsBy',
                fullName: 'By Whom',
                colWidth: 8
            }, {
                displayName: 'Date',
                keyName: 'pointsOn',
                fullName: 'Points On',
                colWidth: 5
            }, {
                displayName: 'Points',
                keyName: 'points',
                fullName: 'Points',
                colWidth: 14
            }, {
                displayName: 'Reference',
                keyName: 'reference',
                fullName: 'Reference',
                colWidth: 4
            }, {
                displayName: 'P/Y Amt',
                keyName: 'priorYearAmount',
                fullName: 'Prior Year Amount',
                colWidth: 3
            }, {
                displayName: 'Response',
                keyName: 'response',
                fullName: 'Response',
                colWidth: 14
            }, {
                displayName: 'Status',
                keyName: 'status',
                fullName: 'Status',
                colWidth: 4
            }, {
                displayName: 'By Whom',
                keyName: 'responseBy',
                fullName: 'Response By',
                colWidth: 8
            }, {
                displayName: 'C/O',
                keyName: 'carryOver',
                fullName: 'Carry Over',
                colWidth: 9
            }, {
                displayName: 'Delete',
                keyName: 'deleted',
                fullName: 'Deleted',
                colWidth: 2
            }
        ];

        if (this.options.moveTask) {
            return {
                displaynames: _.pluck(headers, 'displayName'),
                keynames: _.pluck(headers, 'keyName'),
                fullnames: _.pluck(headers, 'fullName'),
                colwidths: _.pluck(headers, 'colWidth')
            }
        } else {
            var arr = _.pluck(headers, 'colWidth');
            arr.splice(2, 1);
            return {
                displaynames: _.without(_.pluck(headers, 'displayName'), 'Client'),
                keynames: _.without(_.pluck(headers, 'keyName'), 'clientName'),
                fullnames: _.without(_.pluck(headers, 'fullName'), 'Client Name'),
                colwidths: arr
            }
        }
    },

    initializeGrid: function () {
        var self = this,
            headerinfo = this.getHeaderSettings();

        this.$el.handsontable({
            data: this.collection,
            toCheck: this.currentTaskId,
            isMoveTask: this.options.moveTask,
            columns: this.getColumnSettings(),
            colHeaders: headerinfo.displaynames,
            colWidths: function (col) {
                var hot = self.$el.handsontable('getInstance'),
                    colname = hot.getColHeader(col),
                    totalwidth = document.documentElement.clientWidth,
                    columnwidth = headerinfo.colwidths[col];

                if (totalwidth < 2000) {
                    return ((totalwidth * columnwidth) / 100);
                }
            },
            cells: function (row, col, prop) {
                var header = this.instance.getColHeader(col);

                //check if not move task and if navigated to prior then set readonly, as the prior tasks 
                //cannot be modified.
                if ((_.isUndefined(self.options.moveTask) && self.collection.length && (parseInt(self.currentTaskId) !== parseInt(this.instance.getSourceData().at(0).get('taskid')))) || isLockedTask) {
                    return {
                        readOnly: true
                    };
                }
                if (col === 1 || header === "By Whom" || header === "Date" || header === 'Client') {
                    return {
                        readOnly: true
                    };
                }
                if (header === 'Status') {
                    this.renderer = statuscolumnRenderer;
                }
                //if (col === 11 && this.instance.getData().at(row).get('deleted')) {
                //    console.log('deleted row...', row);
                //    if (this.instance.getData().at(row).get('deleted')) {
                //        return { readOnly: true };
                //    } else {
                //        return { readOnly: false };
                //    }
                //}

                //toggle readonly on row on delete and undelete
                if (row >= 0 && this.instance.getSourceData().length) {
                    if (this.instance.getSourceData().at(row).get('deleted')) {
                        return {
                            readOnly: true,
                            disableVisualSelection: true
                        };
                    } else {
                        return {
                            readOnly: false,
                            disableVisualSelection: false
                        };
                    }
                }
            },
            afterGetColHeader: function (col, th) {
                var header = this.getColHeader(col);

                if (!("content" in th.dataset) && col >= 0) {
                    th.dataset.content = headerinfo.fullnames[col];
                    th.dataset.keyname = headerinfo.keynames[col];
                }

                if (header === "Type" || header === "Points" || header === "Reference" || header === "P/Y Amt" || header === "Response" || header === "Status" || header === "C/O" || header === "Delete") {
                    th.classList.add('customBorder');
                }
            },

            afterRender: function () {
                $('th[data-content]').popup({
                    debug: false
                });

                if (isreset) {
                    self.$el.find('.editedFileds').removeClass('editedFileds');
                    cellEdited = [];
                    isreset = false;
                } else {
                    $.each(cellEdited, function (index, ele) {
                        var td = self.$el.handsontable('getInstance').getCell(ele['rowIndex'], ele['colIndex']);
                        $(td).addClass('editedFileds');
                    });
                }
            },
            maxRows: this.collection.length,
            fillHandle: 'vertical',
            rowHeaders: true,
            // wordWrap: false,
            manualColumnFreeze: true,
            manualColumnResize: true,
            // colWidths: this.options.moveTask ? [20, 20, 80, 100, 80, 80, 120, 70, 30, 120, 50, 80, 100, 30] : [20, 20, 100, 80, 80, 120, 70, 30, 120, 50, 80, 100, 30],
            // height: this.collection.length > 10 ? 395 : '',
            afterChange: function (changes, source) {
                if (changes != null) {
                    if (!isLockedTask)
                        $('#savepoints').show();
                    $.each(changes, function (index, change) {
                        var td = self.$el.handsontable('getInstance').getCell(change[0], self.$el.handsontable('getInstance').propToCol(change[1]));
                        $(td).addClass('editedFileds');
                        cellEdited.push({ 'rowIndex': change[0], 'colIndex': self.$el.handsontable('getInstance').propToCol(change[1]) });
                    });
                }
            },        
            stretchH: 'all'
        });

        var hot = this.$el.handsontable('getInstance');
        this.$el.handsontable('getInstance').addHook('afterOnCellMouseDown', this.cellClicked);
        this.hotInstance = this.$el.handsontable('getInstance');

        this.exportPlugin = this.hotInstance.getPlugin('exportFile');
        // var reset = false;
        // setInterval(function() {
        //     var editor = hot.getActiveEditor();
        //     if (editor && !reset) {
        //         reset = true;
        //         editor.htContainer.scrollIntoView(false);
        //     } else
        //         reset = false;
        // }, 100);
    },

    updateCount: function () {
        var totalpoints = this.collection.originalModels.length,
            openpoints = _.filter(this.collection.originalModels, function (model) {
                return model.get('isClosed') === false;
            }).length,
            totalKI = _.filter(this.collection.originalModels, function (model) {
                return model.get('typeId') === 1 || model.get('typeId') === 2
            }).length,
            openKI = _.filter(this.collection.originalModels, function (model) {
                return (model.get('typeId') === 1 || model.get('typeId') === 2) && model.get('isClosed') === false
            }).length,
            totalQue = _.filter(this.collection.originalModels, function (model) {
                return model.get('typeId') === 3
            }).length,
            openQue = _.filter(this.collection.originalModels, function (model) {
                return model.get('typeId') === 3 && model.get('isClosed') === false
            }).length,
            totalRp = _.filter(this.collection.originalModels, function (model) {
                return model.get('typeId') === 4
            }).length,
            openRp = _.filter(this.collection.originalModels, function (model) {
                return model.get('typeId') === 4 && model.get('isClosed') === false
            }).length;

        this.$tab.find('span#all_filter_count').html('(' + openpoints + '/' + totalpoints + ')');
        this.$tab.find('span#ki_filter_count').html('(' + openKI + '/' + totalKI + ')');
        this.$tab.find('span#que_filter_count').html('(' + openQue + '/' + totalQue + ')');
        this.$tab.find('span#rp_filter_count').html('(' + openRp + '/' + totalRp + ')');

    },

    cellClicked: function (event, coords, TD) {
        var settings = this.getSettings().__proto__;
        //ideally not correct way of doing better would be to get the columnsettings of the column and then
        //check if the column is readonly enable or not and then act up on it.        
        if ((!_.isUndefined(settings.isMoveTask) && coords.row >= 0) || ((coords.row >= 0) && (settings.data.length !== 0) && (parseInt(settings.toCheck) === parseInt(settings.data.collection.at(0).get('taskid'))))) {
            var header = this.getColHeader(coords.col);
            switch (header) {
                case "Delete":
                    var model = this.getSourceData().at(coords.row),
                        ele = TD.parentElement;
                    model.set('deleted', !model.get('deleted'));
                    if (model.selected) {
                        model.deselect();
                        this.render();
                    }
                    if (!isLockedTask)
                        $('#savepoints').show();
                    if (model.get('deleted')) {
                        ele.classList.add('deletedrow');
                    } else {
                        ele.classList.remove('deletedrow');
                    }
                    // Events.trigger('points:delete:clicked', this.getData().at(coords.row));
                    break;
                case "Points":
                    if (!this.getSourceData().at(coords.row).get('deleted')) {
                        Events.trigger('open:editor', this.getSourceData().at(coords.row), 'points');
                        cellEdited.push({ 'rowIndex': coords.row, 'colIndex': coords.col });
                    }
                    break;
                case "Response":
                    if (!this.getSourceData().at(coords.row).get('deleted')) {
                        Events.trigger('open:editor', this.getSourceData().at(coords.row), 'response');
                        cellEdited.push({ 'rowIndex': coords.row, 'colIndex': coords.col });
                    }
                    break;
            }
        }

    }

});

Views.TabLayout = LayoutView.extend({
    className: 'ui padded grid',
    template: TabTemplate,
    regions: {
        pointstab: 'div#tabpoints',
        checklisttab: 'div#tabChecklists'
    },
    triggers: {
        'click #points': 'points:clicked',
        'click #checklist': 'checklists:clicked'
    },
    onDomRefresh: function () {
        this.$('#tabs .item').tab();
    }
});

Views.Layout = LayoutView.extend({
    className: 'ui grid',
    // className:'ui grid tabs',
    template: LayoutPointsTemplate,
    regions: {
        gridAllData: 'div#all-grid',
        gridKIData: 'div#ki-grid',
        gridQUEData: 'div#que-grid',
        gridRPData: 'div#rp-grid',
        gridChecklistsData: 'div#tabChecklists'
    },
    templateHelpers: function () {
        return {
            prior: this.options.priortasks !== null ? 'inline-block' : 'none',
            movetask: _.isUndefined(this.options.moveTask) ? 'block' : 'none',
            isMoveTask: _.isUndefined(this.options.moveTask) ? false : true,
            hasPriorTasks: _.isNull(this.options.priortasks) || !this.options.priortasks.length ? false : true,
            isControlSheet: _.isUndefined(this.options.controlsheet) ? false : true
        }
    },
    initialize: function (options) {
        this.on('points:save:clicked', function () {
            var ele = this.$el.find('tr.deletedrow');
            if (ele.length) {
                ele.removeClass('deletedrow');
            }
        }, this);

        this.on('points:prior:clicked', function () {
            this.$('#currentpoints').removeClass('active')
            this.$('#priorpoints').addClass('active');
        });
        this.isTaskLocked = false;

        this.on('points:current:clicked', function () {
            this.$('#priorpoints').removeClass('active')
            this.$('#currentpoints').addClass('active');
        });
    },

    triggers: {
        'click .close': 'points:close:clicked',
        'click #tabAllPointsClick': 'points:allpoints:clicked',
        'click #tabKIClick': 'points:kwint:clicked',
        'click #tabQueClick': 'points:Que:clicked',
        'click #tabRPClick': 'points:RP:clicked',
        'click #tabChkClick': 'checklists:clicked',
        'click #addPointsButton': 'points:Add:clicked',
        'click #savepoints': 'points:save:clicked',
        'click #savepointski': 'points:save:clicked',
        'click #savepointsq': 'points:save:clicked',
        'click #savepointsrp': 'points:save:clicked',
        'click #questionsViaPortal': 'points:addQuestionsToPortal:clicked',
        'click #removequestionsFromPortal': 'points:removeQuestionsFromPortal:clicked',
        'click #priorpoints': 'points:prior:clicked',
        'click #currentpoints': 'points:current:clicked',
        // 'click #email-link':'points:sendemail:clicked'
        'click div#exportPointsItems': 'Export:Grid:Data:Points',
        'click a#email-link': {
            event: 'Create:Email:Points',
            preventDefault: false,
            stopPropagation: false
        }
    },

    onDomRefresh: function () {
        this.$('a[data-content]').popup({
            debug: false
        });

        var overrideCompleted = _.where(userContext.Result.Rights, {
            module_id: 31
        })[0];
        var statusId;
        if (this.options.controlsheet === true) {
            statusId = this.options.tasks.get('statusId');
        }
        else {
            statusId = Number(window.localStorage.getItem('points_statusId'));
        }
        if (statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !overrideCompleted.access) {
            $('div#addPointsButton').addClass('disableoption');
            $('div#questionsViaPortal').addClass('disableoption');
            $('div#removequestionsFromPortal').addClass('disableoption');
            $('div#gridoptions').addClass('disableoption');
            this.$el.find('#savepoints').hide();
            isLockedTask = this.isTaskLocked = true;
        }
    }
});

module.exports = Views;

},{"../../../jst/common/issuepoint&checlist-template.html":22,"../../../jst/workspace/pointsitem-template.html":57,"../../../jst/workspace/pointslayout-template.html":58,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/composite":82,"../../../lib/views/item":83,"../../../lib/views/layout":84}],146:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');
module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        this.layout = this.GetLayout(options.users, options.shippingRights);

        this.listenTo(this.layout, 'Apply:edited:ShippingDetails', function () {
            if (_.keys(options.subtasks).length != 0) {
                var cellEdited = [];
                _.each(options.subtasks, function (subTask) {
                    if (subTask.selected) {
                        if (subTask.get('findelivery_methidid') !== Number($('#selectDeliverable').val()))
                            cellEdited.push({ 'colIndex': 5, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                        if (options.shippingRights) {
                            if (subTask.get('who_deliveredId') !== Number($('#who_delivered_row').val()))
                                cellEdited.push({ 'colIndex': 9, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                            if (subTask.get('delivery_methodId') !== Number($('#selectDeliveryMethod').val()))
                                cellEdited.push({ 'colIndex': 6, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                            if (subTask.get('tracking_number') !== $('#tracking_numbertext').val())
                                cellEdited.push({ 'colIndex': 7, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                            if (subTask.get('delivered_on') !== $('#date_delivered').val())
                                cellEdited.push({ 'colIndex': 8, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });
                            if (subTask.get('shipping_comments') !== $('#date_delivered').val() && $('#shippingcomments_row').val() != '')
                                cellEdited.push({ 'colIndex': 12, 'taskId': subTask.get('taskId'), 'subtaskId': subTask.get('id') });

                            subTask.set({
                                'findelivery_methidid': Number($('#selectDeliverable').val()) !== 0 ? Number($('#selectDeliverable').val()) : Number(subTask.get('findelivery_methidid')),
                                'findelivery_method': Number($('#selectDeliverable').val()) !== 0 ? $('#selectDeliverable  option:selected').text() : subTask.get('findelivery_method'),
                                'who_deliveredId': Number($('#who_delivered_row').val()) !== 0 ? Number($('#who_delivered_row').val()) : Number(subTask.get('who_deliveredId')),
                                'who_delivered': Number($('#who_delivered_row').val()) !== 0 ? $('#who_delivered').val() : subTask.get('who_delivered'),
                                'delivery_methodId': Number($('#selectDeliveryMethod').val()),
                                'delivery_method': $('#selectDeliveryMethod option:selected').text(),
                                'tracking_number': $('#tracking_numbertext').val() !== '' ? $('#tracking_numbertext').val() : subTask.get('tracking_number'),
                                'delivered_on': $('#date_delivered').val() != '' ? $('#date_delivered').val() : new Date("1/1/1900"),
                                'shipping_comments': $('#shippingcomments_row').val() != '' ? subTask.get('shipping_comments') + ' ' + $('#shippingcomments_row').val() : subTask.get('shipping_comments')
                            });
                        }
                        else {
                            subTask.set({
                                'findelivery_methidid': Number($('#selectDeliverable').val()) !== 0 ? Number($('#selectDeliverable').val()) : Number(subTask.get('findelivery_methidid'))
                            });
                        }
                    }
                });
                Events.trigger('Apply:grid:ShippingDetails', cellEdited);
            }
        });

        return this.show(this.layout);
    },

    GetLayout: function (users, shippingRights) {
        return new Views.Layout({ users: users, shippingRights: shippingRights });;
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":147}],147:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    EditShippingTemplate = require('../../../jst/workspace/editshipping-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: EditShippingTemplate,
    className: 'ui small scrolling modal transition',
    initialize: function (options) {
        this.users = options.users;
        this.users = _.map(this.users, function (user) {
            return {
                title: user.fullName,
                Id: user.Id,
                branchName: user.branchName
            }
        })
    },
    events: {

    },
    templateHelpers: {

    },
    triggers: {
        'click #ApplyToShippingGrid': 'Apply:edited:ShippingDetails'
    },
    onDomRefresh: function () {
        var self = this;
        this.$('a[data-content]').popup({
            debug: false
        });
        if (firmContext.Result.FirmSettingsContext[0].defaultshipping !== 0) {
            $('#selectDeliverable').val(firmContext.Result.FirmSettingsContext[0].defaultshipping);
        }
        //else
        //    $('#selectDeliverable').val(2);

        if (this.options.shippingRights) {
            $('#who_delivered').val(loggedinUser.trim());
            $('#who_delivered_row').val(loggedinuserid);
            if (firmContext.Result.FirmSettingsContext[0].defaultshipping !== 0) {
                $('#selectDeliveryMethod').val(firmContext.Result.FirmSettingsContext[0].defaultshipping);
            }
            //else
            //    $('#selectDeliveryMethod').val(2);

            new Pikaday({
                field: this.$el.find('input.date')[0],
                format: 'MM/DD/YYYY'
            });
            $('#date_delivered').val(moment(new Date()).format('MM/DD/YYYY'))
            //this.$el.find('.ui.search')
            //    .search({
            //        source: self.users,
            //        searchFields: ['title'],
            //        searchFullText: true,
            //        onSelect: function (result) {
            //            $('#who_delivered_row').val(result.id);
            //        }
            //    });
            this.$el.find('.ui.search').search({
                source: self.users,
                maxResults: 10,
                minCharacters: 0,
                searchFullText: true,
                onSelect: function (result) {
                    _.delay(function () {
                        if (result.title === $('#who_delivered').val()) {
                            $('#who_delivered_row').val(result.Id);
                            $('#who_delivered').val(result.title);
                        } else {
                            var getuser = _.where(self.users, {
                                'fullName': $('#who_delivered').val()
                            })[0];
                            $('#who_delivered_row').val(getuser.Id);
                            $('#who_delivered').val(getuser.fullName);
                        }
                    }, 200);
                },
                searchFields: ['title'],
                templates: {
                    standard: function (response) {
                        var html = '';
                        var users = response.results;
                        if (users !== 'undefined') {
                            $.each(users, function (index, result) {
                                var branchname = result.Id === 0 ? '' : result.branchName;
                                html += '<div class="result"><div class="content"><div class="title qsusername" style="float:left;">' + result.title + '</div><div class="description qsbranch" style="float:right;">' + branchname + '</div></div></div>';
                            });
                            return html;
                        }
                    }
                }
            });
        }
        else
        {
            $('#selectDeliveryMethod').addClass('disableoption');
            $('#who_delivered').addClass('disableoption');
            $('#tracking_numbertext').addClass('disableoption'); 
            $('#date_delivered').addClass('disableoption'); 
            $('#shippingcomments_row').addClass('disableoption'); 
        }
    },
    onRender: function () {
        this.$el.css('width', '450');
    }
});

module.exports = Views;

},{"../../../jst/workspace/editshipping-template.html":43,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],148:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
    var API = {};

    context.startWithParent = false;
    context.Show = require('./show/controller');
    context.Edit = require('./edit/controller');
    context.AddInstruction = require('./instruction/controller');

    API = {
        show: function (options) {
            if (!_.isUndefined(this.ShowShippingController)) {
                this.ShowShippingController.destroy();
            }
            this.ShowShippingController = new context.Show.Controller({
                region: options.region,
                subtasks: options.subtasks,
                tasks: options.tasks,
                userAutoSuggest: options.userAutoSuggest,
                controlsheet: options.controlsheet,
                priortasks: options.priortasks,
                taskInstr: options.taskInstr,
                taskAttach:options.taskAttach,
                movefeedback: options.movefeedback
            });
        },
        edit: function (subtaskCollection, userAutoSuggest, shippingRights) {
            if (!_.isUndefined(this.EditShippingDetails)) {
                this.EditShippingDetails.destroy();
            }
            this.EditShippingDetails = new context.Edit.Controller({
                region: application.rootView.modalWindow,
                subtasks: subtaskCollection,
                users: userAutoSuggest,
                shippingRights: shippingRights
            });
        },
        addInstruction: function (tasks, controlsheet, taskInstrModel, shippingRights) {
            if (!_.isUndefined(this.AddShippingInstruction)) {
                this.AddShippingInstruction.destroy();
            }
            this.AddShippingInstruction = new context.AddInstruction.Controller({
                region: application.rootView.modalWindow,
                tasks: tasks,
                controlsheet: controlsheet,
                taskInstrModel: taskInstrModel,
                shippingRights: shippingRights
            });
        }
    };

    context.on('start', function (options) {
        return API.show(options);
    });
    Events.on('BulkEdit:shipping:click', function (subtaskCollection, userAutoSuggest, shippingRights) {
        return API.edit(subtaskCollection, userAutoSuggest, shippingRights);
    });
    Events.on('AddInstruction:shipping:click', function (tasks, controlsheet, taskInstrModel, shippingRights) {
        return API.addInstruction(tasks, controlsheet, taskInstrModel, shippingRights);
    });
    Events.on('stop:info', function () {
        return context.stop();
    });

    Events.on('stop:move', function () {
        return context.stop();
    });
};
},{"../../lib/config/events":68,"./edit/controller":146,"./instruction/controller":149,"./show/controller":151}],149:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');
module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var taskids, taskInstrModel;
        if (options.controlsheet !== true) {
            taskids = _.pluck(options.tasks, 'id');
        }
        else {
            taskids = options.tasks.get('id');
        }
        this.layout = this.GetLayout(options.taskInstrModel, options.shippingRights);

        this.listenTo(this.layout, 'Save:Instructions:Shipping', function () {
            if (_.isUndefined(options.taskInstrModel)) {
                taskInstrModel = Reqres.request('Task:Instruction:EmptyModel:Enities');
            } else {
                taskInstrModel = options.taskInstrModel;
            }
            taskInstrModel.set('mailToField', $('#textatraMailTo').val());
            taskInstrModel.set('specialInstructionsField', $('#textareaSpecialInstruction').val());
            if (options.shippingRights)
                taskInstrModel.set('shippingInstructionField', $('#textareaGeneralShippingInstruction').val());
            taskInstrModel.set('deliveryMethodinstructionField', $('#selectDeliveryMethod').val());
            taskInstrModel.set('shippingDeliveryText', $("#selectDeliveryMethod option:selected").text());

            Reqres.request('tasks:instructions:Update:entities', taskids, 'Shipping', taskInstrModel);
            Events.trigger('Set:Updated:Shipping:instruction', taskInstrModel);
        });
        return this.show(this.layout);
    },

    GetLayout: function (tasksInstrctions, shippingRights) {
        return new Views.Layout({ tasksInstrctions: tasksInstrctions, shippingRights: shippingRights });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":150}],150:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    ShippingInstructionTemplate = require('../../../jst/workspace/shippinginstruction-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: ShippingInstructionTemplate,
    className: 'ui small scrolling modal transition',
    initialize: function (options) { },
    events: {

    },

    templateHelpers: {

    },
    triggers: {
        'click #buttonSaveShippingInstruction': 'Save:Instructions:Shipping'
    },
    onDomRefresh: function () {
        var self = this;
        this.$('a[data-content]').popup({
            debug: false
        });
        if (!this.options.shippingRights)
            $('#textareaGeneralShippingInstruction').addClass('disableoption');
        if (!_.isUndefined(this.options.tasksInstrctions)) {
            $('#textatraMailTo').val(self.options.tasksInstrctions.get('mailToField'));
            $('#textareaSpecialInstruction').val(self.options.tasksInstrctions.get('specialInstructionsField'));
            $('#textareaGeneralShippingInstruction').val(self.options.tasksInstrctions.get('shippingInstructionField'));
            if (!_.isEmpty(self.options.tasksInstrctions.get('deliveryMethodinstructionField'))) {
                if (_.isNaN(parseInt(self.options.tasksInstrctions.get('deliveryMethodinstructionField')))) {
                    $("#selectDeliveryMethod option:contains(" + self.options.tasksInstrctions.get('deliveryMethodinstructionField') + ")").attr('selected', 'selected');
                } else {
                    $("#selectDeliveryMethod option:contains(" + self.options.tasksInstrctions.get('shippingDeliveryText') + ")").attr('selected', 'selected');
                }
            }
        }
    },
    onRender: function () { }
});

module.exports = Views;

},{"../../../jst/workspace/shippinginstruction-template.html":59,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],151:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var taskids, taskInstrModel, taskAttachments;
        this.taskInstrModel_copy;
        this.taskAttachments_copy
        var userAutoSuggest = options.userAutoSuggest;
        if (options.controlsheet !== true) {
            taskids = _.pluck(options.tasks, 'id');
            if (_.keys(options.tasks).length === 1) {
                taskInstrModel = Reqres.request('tasks:instructions:Get:entities', parseInt(taskids.toString()));
                taskAttachments = Reqres.request('tasks:Attachments:Get:entities', parseInt(taskids.toString()));
                this.taskInstrModel_copy = taskInstrModel;
                this.taskAttachments_copy = taskAttachments;
            }
        }
        else {
            var taskid = [];
            taskid.push(Number(options.tasks.get('id')));
            taskids = taskid;
            taskInstrModel = options.taskInstr; //taskInstrModel = Reqres.request('tasks:instructions:Get:entities', parseInt(taskids.toString()));
            taskAttachments = options.taskAttach;
            this.taskInstrModel_copy = taskInstrModel;
            this.taskAttachments_copy = taskAttachments;
        }

        this.changeStatusName(this, options, taskids, 'init');
        var userData = [];
        _.each(userAutoSuggest, function (obj) {
            userData.push(
               { Id: obj.Id, fullName: firmContext.Result.Location.length > 1 ? obj.Id !== 0 ? obj.fullName + '  |  ' + obj.branchName : obj.fullName : obj.fullName, userName: obj.fullName }
            );
        });
        this.layout = this.GetLayout(taskInstrModel, this.options.movefeedback);
        var _that = this;

        this.listenTo(this.layout, 'show', (function (_this) {
            return function () {
                return _this.GetDataGrid(options.subtasks, options.tasks, userData, options.controlsheet, options.priortasks);
            }
        }(this)));

        this.listenTo(this.layout, 'shippingSave:clicked', function () {
            $('#warningMsg').hide();
            $('#successMsg').hide();
            $('#loading').show();
            options.pageType = "Shipping";
            var self = this;
            var promises = Reqres.request('Subtask:Save:entities', options);
            promises.done(function () {
                self.changeStatusName(self, options, taskids);
                options.subtasks.fetch({
                    reset: true, data: { query: taskids.toString() }
                }).done(function () {
                    $('#shippingsave').hide();
                    $('#successMsg').show();
                    $('#successMsglbl').html('Save Shipping Details is done');
                    $('#loading').hide();
                }).fail(function () {
                    $('#loading').hide();
                });
                _.each(options.subtasks.selected, function (model) {
                    model.deselect();
                });
            })
                .fail(function () {
                    $('#loading').hide();
                });
        });

        this.listenTo(this.layout, 'BulkEdit:shipping:click', function () {
            var shippingRight = _.where(userContext.Result.Rights, {
                module_id: 12
            })[0];
            Events.trigger('BulkEdit:shipping:click', options.subtasks.selected, userAutoSuggest, shippingRight.access)
        }, this);

        this.listenTo(this.layout, 'AddInstruction:shipping:click', function () {
            var shippingRight = _.where(userContext.Result.Rights, {
                module_id: 12
            })[0];
            Events.trigger('AddInstruction:shipping:click', options.tasks, options.controlsheet, taskInstrModel, shippingRight.access)
        }, this);

        this.listenTo(this.layout, 'shipping:prior:clicked', function (obj) {
            this.showPriorSubtasks(obj.view, options.subtasks, options.priortasks, this);
        });

        this.listenTo(this.layout, 'shipping:current:clicked', function (obj) {
            this.showCurrentSubtasks(obj.view, options.subtasks, options.priortasks, taskids, this);
        });

        this.listenTo(this.layout, 'movetoCompleted:shipping:click', function () {
            $('#warningMsg').hide();
            $('#successMsg').hide();
            $('#loading').show();
            var self = this;

            var promises = Reqres.request('Subtask:MovetoCompleted:entities', taskids, 'Shipping');

            $.when.apply($, promises)
                 .done(function (data) {
                     if (data.message.Success == 'OK') {
                         self.changeStatusName(self, options, taskids);
                         options.subtasks.fetch({
                             reset: true, data: { query: taskids.toString() }
                         }).done(function () {
                             $('#loading').hide();
                         });
                         $('#successMsglbl').html('Task is Moved to Completed');
                         $('#successMsg').show();
                     }
                     else if (!_.isUndefined(data.message.mandatory)) {
                         $('#warningMsglbl').html(data.message.mandatory);
                         $('#warningMsg').show();
                     }
                     else if (!_.isUndefined(data.message.confirm)) {
                         $('#confMsglbl').html(data.message.confirm);
                         $('#confshipping').modal({
                             closable: false,
                             onDeny: function () {
                                 //return false;
                             },
                             onApprove: function () {
                                 if (!_.isUndefined(data.message.delete_Juris)) {
                                     self.deleteorconfirmPromt(data.message.delete_Juris, options, true, taskids);
                                 }
                                 else
                                     self.movetocompletedValidated(options, false, taskids);
                             }
                         }).modal('show');

                     }
                     else if (!_.isUndefined(data.message.delete_Juris)) {
                         $('#confMsglbl').html(data.message.delete_Juris);
                         $('#confshipping').modal({
                             closable: false,
                             onDeny: function () {
                                 self.movetocompletedValidated(options, false, taskids);
                             },
                             onApprove: function () {
                                 self.movetocompletedValidated(options, true, taskids);
                             }
                         }).modal('show');

                     }
                     $('#loading').hide();
                 })
                .fail(function () {
                    $('#loading').hide();
                    $('.ui.text.loader').html("Saving..");
                    console.log(arguments);
                });
        });

        this.listenTo(this.layout, 'clearHistory:shipping:click', function () {
            $('#warningMsg').hide();
            $('#successMsg').hide();
            $('#loading').show();
            var self = this;

            var promises = Reqres.request('Subtask:shipping:clearHistory', _.pluck(options.subtasks.selected, 'id'));

            $.when.apply($, promises)
                .done(function (data) {
                    self.changeStatusName(self, options);
                    options.subtasks.fetch({
                        reset: true, data: { query: taskids.toString() }
                    }).done(function () {
                        $('#loading').hide();
                    });
                    if (data.message) {
                        $('#successMsg').show();
                        $('#successMsglbl').html('Clear History is done');
                    }
                    _.each(options.subtasks.selected, function (model) {
                        model.deselect();
                    });
                    $('#loading').hide();
                })
                .fail(function () {
                    $('#loading').hide();
                    $('.ui.text.loader').html("Saving..");
                    console.log(arguments);
                });
        });

        this.listenTo(this.layout, 'copyfromprior:shipping:click', function () {
            $('#warningMsg').hide();
            $('#successMsg').hide();
            $('#loading').show();
            var self = this;

            var promises = Reqres.request('Subtask:shipping:copyfromprior', taskids);

            $.when.apply($, promises)
                .done(function (data) {
                    if (data.message) {
                        $('#successMsg').show();
                        $('#successMsglbl').html('Copy From Prior is done');
                    }
                    $('#loading').hide();
                })
                .fail(function () {
                    $('#loading').hide();
                    $('.ui.text.loader').html("Saving..");
                    console.log(arguments);
                });
        });

        this.listenTo(this.layout, 'completeeFile:shipping:click', function () {
            $('#warningMsg').hide();
            $('#successMsg').hide();
            $('#loading').show();
            var self = this;

            var promises = Reqres.request('Subtask:completeeFile:entities', taskids);

            $.when.apply($, promises)
                 .done(function (data) {
                     options.subtasks.fetch({
                         reset: true, data: { query: taskids.toString() }
                     }).done(function () {
                         $('#loading').hide();
                     });
                     if (data.message) {
                         $('#successMsg').show();
                         $('#successMsglbl').html('Complete eFile is done');
                     }
                     $('#loading').hide();
                 })
                .fail(function () {
                    $('#loading').hide();
                    $('.ui.text.loader').html("Saving..");
                    console.log(arguments);
                });
        });
        Events.on('Set:Updated:Shipping:instruction', function (model) {
            taskInstrModel = this.taskInstrModel_copy = model;
            $('#GeneralShipping_instruction').text('General Shipping Instructions : ' + model.get('shippingInstructionField'));
            $('#SpecialShipping_instruction').text('Special Instructions : ' + model.get('specialInstructionsField'));
            $('#mailToShipping_instruction').text('Mail To : ' + model.get('mailToField'));
            $('#deliveryMethodShipping_instruction').text('Delivery Method : ' + model.get('shippingDeliveryText'));
            if (_.isEmpty(model.get('shippingInstructionField'))) {
                $('#GeneralShipping_instruction').hide();
            } else {
                $('#GeneralShipping_instruction').show();
            }
            if (_.isEmpty(model.get('specialInstructionsField'))) {
                $('#SpecialShipping_instruction').hide();
            } else {
                $('#SpecialShipping_instruction').show();
            }
            if (_.isEmpty(model.get('mailToField'))) {
                $('#mailToShipping_instruction').hide();
            } else {
                $('#mailToShipping_instruction').show();
            }
            if (_.isEmpty(model.get('shippingDeliveryText')) || model.get('deliveryMethodinstructionField') === '0') {
                $('#deliveryMethodShipping_instruction').hide();
            } else {
                $('#deliveryMethodShipping_instruction').show();
            }
        });
        return this.show(this.layout, {
            loading: true
        });
    },

    GetLayout: function (taskInstrModel, movefeedback) {
        return new Views.Layout({ taskInstrModel: taskInstrModel, movefeedback: movefeedback, controlsheet: this.options.controlsheet });
    },

    deleteorconfirmPromt: function (delete_Juris, options, deleting, taskids) {
        var self = this;
        $('#deleteMsglbl').html(delete_Juris);
        $('#deleteshippingModal').modal({
            closable: false,
            onDeny: function () {
                self.movetocompletedValidated(options, false, taskids);
            },
            onApprove: function () {
                self.movetocompletedValidated(options, true, taskids);
            }
        }).modal('show');
    },

    movetocompletedValidated: function (options, deleting, taskids) {
        var self = this;

        $('#loading').show();
        var promises = Reqres.request('Subtask:task_movetoCompletedValidated:entities', taskids, deleting, 'Shipping');

        $.when.apply($, promises)
             .done(function (data) {
                 if (data.message == 'OK') {
                     self.changeStatusName(self, options, taskids);
                     options.subtasks.fetch({
                         reset: true, data: { query: taskids.toString() }
                     }).done(function () {
                         $('#successMsg').show();
                         $('#successMsglbl').html('Task is Moved to Completed');
                         $('#loading').hide();
                     });
                     //$('#successMsg').show();
                 }
                 else if (!_.isUndefined(data.message.mandatory)) {
                     $('#warningMsglbl').html(data.message.mandatory);
                     $('#warningMsg').show();
                 }
                 else {
                     $('#warningMsglbl').html(data.message);
                     $('#warningMsg').show();
                 }
                 $('#loading').hide();
             })
            .fail(function () {
                $('#loading').hide();
                $('.ui.text.loader').html("Saving..");
            });
    },

    changeStatusName: function (self, options, taskids, type) {
        if (options.controlsheet === true && type !== 'init') {
            self.options.tasks.fetch({ reset: true }).done(function (data) {
                Events.trigger('refresh:routing:move', data.currentStatusField, 'Shipping');
            });
            //self.prioryears = Reqres.request('task:prioryears', taskids);
        }
        else if (_.pluck(options.tasks, 'id').length === 1 && type !== 'init') {
            //Events.trigger('movetoCompleted:shipping:after');
            _.filter(self.options.tasks, function (model) {
                model.fetch({ reset: true }).done(function (data) {
                    $('#taskstatus').text('Current Status : ' + data.currentStatusField)
                });
            });
            //self.prioryears = Reqres.request('task:prioryears', taskids);
        }
    },

    GetDataGrid: function (subtaskCollection, tasks, userAutoSuggest, controlsheet, prioryears) {
        var dataGrid = new Views.DataGrid({
            collection: subtaskCollection,
            users: userAutoSuggest,
            tasks: tasks,
            iscontrolsheet: controlsheet,
            prioryears: prioryears
        });
        return this.show(dataGrid, {
            loading: true,
            region: this.layout.gridData
        });
    },

    showPriorSubtasks: function (view, subtasks, prioryears) {
        $('#priorshipping, #priorassembly').addClass('active');
        $('#currentshipping, #currentassembly').removeClass('active');
        $('#loading').show();
        $('.ui.text.loader').html("Loading..");
        if (_.isUndefined(_.where(prioryears, { selected: true })[0])) {
            _.where(prioryears, { id: 1 })[0].selected = true;
        } else {
            var selectedyear = _.where(prioryears, { selected: true })[0];
            _.where(prioryears, { id: (selectedyear.id + 1) })[0].selected = true;
            _.where(prioryears, { id: selectedyear.id })[0].selected = false;
        }

        var _priorsubtasks = Reqres.request('Subtask:entities', _.where(prioryears, { selected: true })[0].taskId.toString());
        taskInstrModel = Reqres.request('tasks:instructions:Get:entities', parseInt(_.where(prioryears, { selected: true })[0].taskId.toString()));
        taskAttachments = Reqres.request('tasks:Attachments:Get:entities', _.where(prioryears, { selected: true })[0].taskId.toString());

        _.delay(function () {
            Events.trigger('prior:shipping:click', _priorsubtasks, 'prior', taskInstrModel, taskAttachments);
            $('#loading').hide();
        }, 5000);

        this.layout.$('div#buttonshippingbulkedit').addClass('disableoption');
        this.layout.$('div#buttonShippingInstruction').addClass('disableoption');
        this.layout.$('div#copyfromPrior').addClass('disableoption');
        this.layout.$('div#movetoCompleted').addClass('disableoption');
        this.layout.$('div#buttonClearHistory').addClass('disableoption');
        this.layout.$('div#completeeFile').addClass('disableoption');

        if (_.where(prioryears, { selected: true })[0].id === prioryears.length) {
            this.layout.$('#priorshipping').hide();
        }
    },

    showCurrentSubtasks: function (view, subtasks, prioryears, ids, ctx) {
        $('#priorshipping, #priorassembly').removeClass('active');
        $('#currentshipping, #currentassembly').addClass('active');
        //this.layout.$('#shipping_actions_row').find('div').removeClass('disableoption');
        if (!_.isUndefined(_.where(prioryears, { selected: true })[0])) {
            _.where(prioryears, { selected: true })[0].selected = false;
        }
        Events.trigger('prior:shipping:click', subtasks, 'current', this.taskInstrModel_copy, this.taskAttachments_copy);
        this.layout.$('#priorshipping').show();
        this.layout.$('div#buttonshippingbulkedit').addClass('disableoption');
        this.layout.$('div#buttonClearHistory').addClass('disableoption');
        this.layout.$('div#buttonShippingInstruction').removeClass('disableoption');
        this.layout.$('div#copyfromPrior').removeClass('disableoption');
        var shippingRight = _.where(userContext.Result.Rights, {
            module_id: 12
        })[0];
        if (shippingRight.access) {
            //this.layout.$('div#buttonShippingInstruction').removeClass('disableoption');
            this.layout.$('div#copyfromPrior').removeClass('disableoption');
            this.layout.$('div#movetoCompleted').removeClass('disableoption');
            this.layout.$('div#completeeFile').removeClass('disableoption');
        }
        else {
            //this.layout.$('div#buttonShippingInstruction').addClass('disableoption');
            //this.layout.$('div#copyfromPrior').addClass('disableoption');
            this.layout.$('div#movetoCompleted').addClass('disableoption');
            this.layout.$('div#completeeFile').addClass('disableoption');
        }
    },


});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":152}],152:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutShippingTemplate = require('../../../jst/workspace/shippinglayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

var ColumnAttributes = function (attr, celltype, readonly, align, renderer, firmUsers, source, strict) {

    var columnSettings;

    function colString(item, value) {
        if (_.isUndefined(value)) {
            return item.get(attr);
        } else {
            item.set(attr, value);
        }
    };

    function colDate(item, value) {
        if (_.isUndefined(value)) {
            var year = moment(item.get(attr)).year();
            return (year != 1900 && year != 1 ? moment(item.get(attr)).format('l') : '');
        } else {
            return !_.isNaN(moment(value).year()) ? item.set(attr, value) : item.set(attr, '1/1/1900');
        }
    };

    function colBool(item, value) {
        if (_.isUndefined(value)) return _.isUndefined(item.selected) ? false : item.selected;
        return (value ? item.select() : item.deselect());
    }

    function colAutocomplete(item, value) {
        if (_.isUndefined(value)) {
            return item.get(attr);
        } else {
            item.set('delivery_methodId', value);
            item.set(attr, value);
        }
    };

    function colAutocompleteUsers(item, value) {

        if (_.isUndefined(value)) {
            if (item.get('who_deliveredId') !== 0) {
                var result = _.where(firmUsers, {
                    'Id': item.get('who_deliveredId')
                });
                return result.length != 0 ? result[0].fullName : '';
            } else {
                return '';
            }
        } else {
            var result = _.where(firmUsers, {
                'fullName': value.trim()
            });
            result.length != 0 ? item.set('who_deliveredId', result[0].Id) : item.set('who_deliveredId', 0);
            result.length != 0 ? item.set(attr, result[0].fullName) : item.set(attr, '');
            item.set(attr, result[0].fullName);
        }
    };

    switch (celltype) {
        case 'html':
            columnSettings = {
                data: colLink,
                type: 'text',
                readonly: readonly,
                className: 'htLeft',
                renderer: 'html'
            }
            break;
        case 'checkbox':
            columnSettings = {
                data: colBool,
                type: 'checkbox',
                readonly: readonly,
                className: 'htCenter',
                // colWidths: 20
            }
            break;
        case 'numeric':
            columnSettings = {
                data: colString,
                readOnly: readonly,
                className: 'htCenter'
            }
            break;
        case 'date':
            columnSettings = {
                data: colDate,
                type: 'date',
                readOnly: readonly,
                className: 'htLeft',
                dateFormat: 'MM/DD/YYYY',
                correctFormat: true,
                //defaultDate: '01/01/1900'
            }
            break;
        case 'autocompleteUsers':
            columnSettings = {
                data: colAutocompleteUsers,
                type: 'dropdown',
                className: align,
                source: function (query, process) {
                    return process(_.pluck(firmUsers, 'fullName'));
                },
                strict: true
            }
            break;
        case 'dropdown':
            columnSettings = {
                data: colAutocomplete,
                type: 'dropdown',
                className: align,
                source: source,
                strict: strict
            }
            break;
        default:
            columnSettings = {
                data: colString,
                type: 'text',
                className: align,
                readOnly: readonly
            };
            break;
    }

    return columnSettings;
};

var customrenderer = function (instance, td, row, col, prop, value, cellProperties) {
    var args = arguments;
    td.innerHTML = value;

    //if (value === 'Not Filing' || value === 'Not Filed' || value === 'Complete') {
    //    td.style.fontWeight = '900',
    //        td.style.fontStyle = 'italic',
    //    //td.style.color = '#E27A13',
    //        td.style.fontWeight = 'bold'
    //}
    //else if (value === 'Not Filed') {
    //    td.style.color = '#F0635C',
    //        td.style.fontWeight = '900',
    //        td.style.fontStyle = 'italic',
    //        td.style.fontWeight = 'bold'
    //}
    //else if (value === 'Complete') {
    //    td.style.color = '#64943f',
    //        td.style.fontWeight = '900',
    //        td.style.fontStyle = 'italic',
    //        td.style.fontWeight = 'bold'
    //}
    if (value === 'In Process') {
        td.style.color = '#64943f'
        //td.style.fontWeight = '900',
        //td.style.fontStyle = 'italic',
        td.style.fontWeight = 'bold'
    }
    if (col === 12) {
        $(td).attr('title', value);
    }

    Handsontable.TextCell.renderer.apply(this, arguments);
};

Views.DataGrid = ItemView.extend({
    template: false,

    initialize: function () {
        var _this = this;
        this.cellEdited = [];
        this.isreset = false;
        this.issortdata = false;
        this.listenTo(Events, 'Apply:grid:ShippingDetails', function (applycellEdited) {
            if (!_.isUndefined(applycellEdited)) {
                $.each(applycellEdited, function (index, ele) {
                    _.each(_this.collection.models, function (model) {
                        if (model.get('taskId') === ele['taskId'] && model.get('id') === ele['subtaskId'])
                            _this.cellEdited.push({ 'rowIndex': _.indexOf(_this.collection.models, model), 'colIndex': ele['colIndex'] });
                    });
                });
            }
            this.refreshGrid('apply');
        });
        //this.listenTo(Events, 'movetoCompleted:shipping:after', this.refreshStatus);
        this.listenTo(this.collection, 'reset', function () {
            var type = this.issortdata ? 'sortdata' : 'reset';
            this.isreset = true; //Remove this and fix for keep the edited fields while sorting
            this.issortdata ? this.issortdata = false : this.isreset = true;
            this.refreshGrid(type);
        });
        //this.listenTo(Events, 'Reset:grid:ShippingDetails', this.refreshGrid('reset'));
        this.listenTo(this.collection, 'selected', function () {
            this.showHideOptions(true);
        });
        this.listenTo(this.collection, 'select:none', function () {
            this.showHideOptions(false);
        });
        this.listenTo(Events, 'prior:shipping:click', function (_priorsubtasks, type, taskInstrModel) {
            this.refreshGrid('prior', _priorsubtasks, type, taskInstrModel);
        });

        this.listenTo(Events, 'shipping:refresh:grid', function () {
            var grid = this.$el.handsontable('getInstance');
            grid.render();
        }, this);
    },

    events: {
        'click th[data-keyname] ': 'sortshippinggrid'
    },
    sortshippinggrid: function (e) {
        this.collection.sortData(e.currentTarget.dataset.keyname);
    },

    getHeaderSettings: function () {
        var headers = [{
            displayName: '',
            keyName: '',
            fullName: '',
            colWidth: 2,
        }, {
            displayName: 'Client',
            keyName: 'clientName',
            fullName: 'Client Name',
            colWidth: 8,
        }, {
            displayName: 'Deliverable',
            keyName: 'name',
            fullName: 'Deliverable',
            colWidth: 8,
        }, {
            displayName: 'Form',
            keyName: 'form',
            fullName: 'Form',
            colWidth: 5,
        }, {
            displayName: 'Filing Type',
            keyName: 'filing_type',
            fullName: 'Filling Type',
            colWidth: 3,
        }, {
            displayName: 'Del Delivery Method',
            keyName: 'delivery_methodId',
            fullName: 'Deliverable Delivery Method',
            colWidth: 7,
        }, {
            displayName: 'Method Delivered',
            keyName: 'delivery_method',
            fullName: 'Method Delivered',
            colWidth: 7,
        }, {
            displayName: 'Tracking Number',
            keyName: 'tracking_number',
            fullName: 'Tracking Number ',
            colWidth: 3.5,
        }, {
            displayName: 'Date Delivered',
            keyName: 'delivered_on',
            fullName: 'Date Delivered ',
            colWidth: 5,
        }, {
            displayName: 'Who Delivered',
            keyName: 'who_delivered',
            fullName: 'Who Delivered',
            colWidth: 8,
        }, {
            displayName: 'Del Date Completed',
            keyName: 'completed_on',
            fullName: 'Deliverable Date Completed ',
            colWidth: 4,
        }, {
            displayName: 'Del Status',
            keyName: 'status',
            fullName: 'Deliverable Status',
            colWidth: 4.5,
        }, {
            displayName: 'Comments',
            keyName: 'shipping_comments',
            fullName: 'Comments',
            colWidth: 6,
        }, ];
        return headers;
    },

    refreshGrid: function (type, _priorsubtasks, pctype, taskInstrModel) {
        var grid = this.$el.handsontable('getInstance');
        pctype === 'prior' ? this.options.type = 'prior' : this.options.type = 'current';
        if (!_.isUndefined(grid)) {
            if (type == 'apply')
                $('#shippingsave').show();
            if (type == 'prior') {
                grid.loadData(_priorsubtasks);
                $('div#buttonshippingbulkedit').addClass('disableoption');
                $('div#buttonShippingInstruction').addClass('disableoption');
                $('div#copyfromPrior').addClass('disableoption');
                $('div#movetoCompleted').addClass('disableoption');
                $('div#buttonClearHistory').addClass('disableoption');
                $('div#completeeFile').addClass('disableoption');
                $('#priorYearlabelShipping').css('color', 'red');
                $('div#shippingInstructionSection').show();
                $('div#prioryearMessage').show();
                if (pctype !== 'current') {
                    if (_.where(this.options.prioryears, { selected: true })[0].id === this.options.prioryears.length) {
                        $('#priorshipping').hide();
                    }
                }
                //$('#shippingsave').hide();
            }
            if (pctype == 'current') {
                var shippingRight = _.where(userContext.Result.Rights, {
                    module_id: 12
                })[0];
                $('#shipping_actions_row').find('div').removeClass('disableoption');
                $('div#buttonshippingbulkedit').addClass('disableoption');
                $('div#buttonClearHistory').addClass('disableoption');
                $('div#buttonShippingInstruction').removeClass('disableoption');
                $('div#copyfromPrior').removeClass('disableoption');
                if (shippingRight.access) {
                    //$('div#buttonShippingInstruction').removeClass('disableoption');
                    $('div#copyfromPrior').removeClass('disableoption');
                    $('div#movetoCompleted').removeClass('disableoption');
                    $('div#completeeFile').removeClass('disableoption');
                } else {
                    //$('div#buttonShippingInstruction').addClass('disableoption');
                    //$('div#copyfromPrior').addClass('disableoption');
                    $('div#movetoCompleted').addClass('disableoption');
                    $('div#completeeFile').addClass('disableoption');
                }
                $('#priorYearlabelShipping').css('color', 'black');
                $('div#shippingInstructionSection').show();
                $('div#prioryearMessage').hide();
                $('#priorshipping').show();
            }
            //grid.updateSettings({ data: _priorsubtasks });
            grid.updateSettings({
                maxRows: this.collection.length
                //afterRenderer: type === 'apply' ? aftercustomrenderer : ''
            });
            grid.render();
        }
        if (type === 'prior') {
            if (this.options.type == 'prior' || this.options.type == 'current') {
                if (!_.isUndefined(taskInstrModel)) {
                    $('#GeneralShipping_instruction').show();
                    $('#SpecialShipping_instruction').show();
                    $('#deliveryMethodShipping_instruction').show();
                    $('#mailToShipping_instruction').show();
                    $('#GeneralShipping_instruction').text('General Shipping Instructions : ' + taskInstrModel.get('shippingInstructionField'));
                    $('#SpecialShipping_instruction').text('Special Instructions : ' + taskInstrModel.get('specialInstructionsField'));
                    $('#mailToShipping_instruction').text('Mail To : ' + taskInstrModel.get('mailToField'));
                    $('#deliveryMethodShipping_instruction').text('Delivery Method : ' + taskInstrModel.get('deliveryMethodinstructionField'));
                    if (_.isEmpty(taskInstrModel.get('shippingInstructionField'))) {
                        $('#GeneralShipping_instruction').hide();
                    }
                    if (_.isEmpty(taskInstrModel.get('specialInstructionsField'))) {
                        $('#SpecialShipping_instruction').hide();
                    }
                    if (_.isEmpty(taskInstrModel.get('deliveryMethodinstructionField'))) {
                        $('#deliveryMethodShipping_instruction').hide();
                    }
                    if (_.isEmpty(taskInstrModel.get('mailToField'))) {
                        $('#mailToShipping_instruction').hide();
                    }

                } else {
                    $('#GeneralShipping_instruction').hide();
                    $('#SpecialShipping_instruction').hide();
                    $('#deliveryMethodShipping_instruction').hide();
                    $('#mailToShipping_instruction').hide();
                }
            }
        }

        if (type !== 'apply' && type !== 'sortdata')
            $('#shippingsave').hide();
    },

    onDomRefresh: function () {
        var headersettings = this.getHeaderSettings(),
            headers = _.pluck(headersettings, 'displayName');

        this.$el.css({
            'width': '100%',
            // 'overflow': 'hidden'
        });
        $('#successClose').on('click', function () {
            $(this)
                .closest('.message')
                .hide();
        });
        $('#warningClose').on('click', function () {
            $(this)
                .closest('.message')
                .hide();
        });
        //$('#tabTaskInfo .item').tab('change tab', 'tabShipping'); //Check this
        var self = this;

        if (this.options.prioryears === null || _.isUndefined(this.options.prioryears) || this.options.prioryears.length === 0) {
            $('#priorshipping').hide();
            $('#currentshipping').hide();
        } else {
            $('#priorshipping').show();
            $('#currentshipping').show();
        }

        var shippingRight = _.where(userContext.Result.Rights, {
            module_id: 12
        })[0];
        if (shippingRight.access || userContext.Result.UserContext[0].roleId === 8) {
            $('div#movetoCompleted').removeClass('disableoption');
            $('div#copyfromPrior').removeClass('disableoption');
            //$('div#buttonClearHistory').removeClass('disableoption');
            $('div#completeeFile').removeClass('disableoption');

        }

        if (this.options.prioryears === null || _.isUndefined(this.options.prioryears) || this.options.prioryears.length === 0) {
            $('#priorshipping').hide();
            $('#currentshipping').hide();
            $('div#copyfromPrior').addClass('disableoption');
        }
        else {
            $('#priorshipping').show();
            $('#currentshipping').show();
            $('div#copyfromPrior').removeClass('disableoption');
        }

        var categoryId = 0;
        completemove = false;
        var subtaskCompleted = _.filter(this.collection.models, function (model) {
            categoryId = model.get('categoryId');
            if (model.get('status_id') === 1003)
                return true;
        });
        var isefiletype = _.filter(this.collection.models, function (model) {
            if (model.get('filing_typeId') === 2)
                return true;
        });
        isefiletype.length === 0 ? $('div#completeeFile').addClass('disableoption') : '';

        var taskinstatus = _.filter(this.options.tasks, function (model) {
            if (self.options.iscontrolsheet !== true) {
                if (model.get('statusId') === 19 || model.get('statusId') === 20 || model.get('statusId') === 21 || model.get('statusId') === 22)
                    return true;
            } else {
                if (self.options.tasks.get('statusId') === 19 || self.options.tasks.get('statusId') === 20 || self.options.tasks.get('statusId') === 21 || self.options.tasks.get('statusId') === 22)
                    return true;
            }
        });

        if ((subtaskCompleted.length > 0 || taskinstatus.length > 0) || completemove == true || categoryId === 2) {
            if (shippingRight.access) {
                $('div#movetoCompleted').removeClass('disableoption');
            }
        } else {
            if (!shippingRight.access) {
                $('div#movetoCompleted').addClass('disableoption');
            }
        }

        var overrideCompleted = _.where(userContext.Result.Rights, {
            module_id: 31
        })[0];
        var status, statusId;
        if (_.pluck(this.options.tasks, 'id').length === 1 || this.options.iscontrolsheet === true) {
            if (this.options.iscontrolsheet === true) {
                status = self.options.tasks.get('currentStatus');
                statusId = self.options.tasks.get('statusId');
            } else {
                status = _.pluck(self.options.tasks, 'model')[0].get('currentStatus');
                statusId = _.pluck(self.options.tasks, 'model')[0].get('statusId');
            }
            //this.options.iscontrolsheet !== true ? $('#taskstatus').text('Current Status: ' + status) : $('#taskstatus').text('');            
            if (statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !overrideCompleted.access) { //check
                $('div#movetoCompleted').addClass('disableoption');
                $('div#copyfromPrior').addClass('disableoption');
                $('div#buttonClearHistory').addClass('disableoption');
                $('div#completeeFile').addClass('disableoption');
                $('div#buttonShippingInstruction').addClass('disableoption');
            }

            if (this.options.prioryears !== null && !_.isUndefined(this.options.prioryears) && this.options.prioryears.length !== 0) {
                //if (!priortask) {               
                $('div#copyfromPrior').removeClass('disableoption');
                //$('div#completeeFile').removeClass('disableoption');
                //}
            } else {
                $('div#copyfromPrior').addClass('disableoption');
                //$('div#completeeFile').addClass('disableoption');
            }
        }

        var delivery_method = Reqres.request('Subtask:delivery_method:entities');
        var defaultmethod = 2;
        firmContext.Result.FirmSettingsContext[0].defaultshipping !== 0 ? defaultmethod = firmContext.Result.FirmSettingsContext[0].defaultshipping : '';

        if (!shippingRight.access) {
            $('div#movetoCompleted').addClass('disableoption');
            $('div#completeeFile').addClass('disableoption');
            //$('div#buttonShippingInstruction').addClass('disableoption');
        }
        this.$el.handsontable({
            data: this.collection,
            columns: [
                ColumnAttributes('', 'checkbox', true),
                ColumnAttributes('clientName', 'text', true),
                ColumnAttributes('name', 'text', true),
                ColumnAttributes('form', 'text', true),
                ColumnAttributes('filing_type', 'text', true), {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            var result = _.where(delivery_method, {
                                'id': model.get('findelivery_methidid')
                            });
                            //if (result.length === 0 && defaultmethod !== 0) {
                            //    result = _.where(delivery_method, {
                            //        'id': defaultmethod
                            //    });                                
                            //}
                            return result.length != 0 ? result[0].name : ''
                        } else {
                            var result = _.where(delivery_method, {
                                'name': value
                            });
                            //if (result.length === 0 && defaultmethod !== 0) {
                            //    result = _.where(delivery_method, {
                            //        'id': defaultmethod
                            //    });
                            //}
                            return result.length != 0 ? model.set('findelivery_methidid', result[0].id) : model.set('findelivery_methidid', defaultmethod);
                        }
                    },
                    type: 'dropdown',
                    source: _.pluck(delivery_method, 'name'),
                    trimDropdown: false,
                    strict: false
                }, {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            var result;
                            //if (model.get('delivery_methodId') === 0 && defaultmethod !== 0) {
                            //    result = _.where(delivery_method, {
                            //        'id': defaultmethod
                            //    });                               
                            //}
                            return model.get('delivery_methodId') !== 0 && model.get('delivery_methodId') !== 15 ? model.get('delivery_method') : !_.isUndefined(result) ? result.length != 0 ? result[0].name : '' : '';
                        } else {
                            var result = _.where(delivery_method, {
                                'name': value
                            });
                            //if (result.length === 0 && defaultmethod !== 0) {
                            //    result = _.where(delivery_method, {
                            //        'id': defaultmethod
                            //    });
                            //}                         
                            result.length != 0 ? model.set('delivery_methodId', result[0].id) : model.set('delivery_methodId', 0);
                            return result.length != 0 ? model.set('delivery_method', result[0].name) : model.set('delivery_method', '');
                        }

                    },
                    type: 'dropdown',
                    source: _.pluck(delivery_method, 'name'),
                    trimDropdown: false,
                    strict: false
                },
                ColumnAttributes('tracking_number', 'text', false),
                ColumnAttributes('delivered_on', 'date', false), {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('who_delivered');
                        } else {
                            var result = _.where(self.options.users, {
                                'fullName': value.trim()
                            });
                            if (firmContext.Result.Location.length > 1 && result.length === 0) {
                                result = _.where(self.options.users, {
                                    'userName': value.trim()
                                });
                            }
                            result.length != 0 ? model.set('who_deliveredId', result[0].Id) : model.set('who_deliveredId', 0);
                            return result.length != 0 ? model.set('who_delivered', result[0].userName) : model.set('who_delivered', '');
                        }
                    },
                    type: 'dropdown',
                    source: function (query, process) {
                        return process(_.pluck(self.options.users, 'fullName'));
                    },
                    trimDropdown: false,
                    strict: false,
                    validator: function (value, callback) {
                        callback(true);
                    }
                },
                ColumnAttributes('completed_on', 'date', true),
                ColumnAttributes('status', 'text', true),
                ColumnAttributes('shipping_comments', 'text', false, 'comments')
            ],
            // colHeaders: [
            //     '',
            //     'Client',
            //     'Deliverable',
            //     'Form',
            //     'Filing Method',
            //     'Deliverable Delivery Method',
            //     'Method Delivered',
            //     'Tracking Number',
            //     'Date Delivered',
            //     'Who Delivered',
            //     'Del Date Completed',
            //     'Deliverable Status',
            //     'Comments'
            // ],
            colHeaders: headers,
            nestedHeaders: [
             [
              { label: '', colspan: 5 },
              { label: '<div title="Staff" class="ui divider roleindicator staff"></div>', colspan: 1 },
              { label: '<div title="Support Staff" class="ui divider roleindicator supportstaff" ></div>', colspan: 4 },
              { label: '', colspan: 3 },
             ],
             headers
            ],
            colWidths: function (col) {
                var hot = self.$el.handsontable('getInstance'),
                    colname = hot.getColHeader(col),
                    totalwidth = document.documentElement.clientWidth,
                    columnwidth = _.where(headersettings, { displayName: colname })[0].colWidth;

                if (totalwidth < 2000) {
                    return ((totalwidth * columnwidth) / 100);
                }
            },
            cells: function (row, col, prop) {
                if (col != 0) {
                    this.renderer = customrenderer;
                }

                var isTaskLocked = false;
                if (firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !overrideCompleted.access) {
                    var taskstatusId = statusId || _.pluck(_.where(self.options.tasks, { 'id': this.instance.getSourceData().at(row).get('taskId') }), 'model')[0].get('statusId');
                    if (taskstatusId === 23) {
                        isTaskLocked = true;
                    }
                }

                if (this.instance.getSourceData().at(row).get('status') === 'Not Filing' || this.instance.getSourceData().at(row).get('status') === 'Not Filed' || self.options.type === 'prior' || (!shippingRight.access && (col != 0 && col != 5)) || isTaskLocked) {
                    return {
                        readOnly: true,
                        disableVisualSelection: true
                    }
                }
            },
            //currentRowClassName: 'currentRow',
            //currentColClassName: 'currentCol',
            rowHeaders: false,
            maxRows: this.collection.length,
            fillHandle: 'vertical',
            manualColumnResize: true,
            stretchH: 'all',
            wordWrap: false,
            manualColumnFreeze: true,
            manualColumnResize: true,
            // colWidths: [100],
            // height: 400,
            afterChange: function (changes, source) {
                if (changes != null) {
                    $.each(changes, function (index, change) {
                        if (self.$el.handsontable('getInstance').getSourceData().at(change[0]).hasChanged()) {
                            $('#shippingsave').show();
                            var td = self.$el.handsontable('getInstance').getCell(change[0], self.$el.handsontable('getInstance').propToCol(change[1]));
                            $(td).addClass('editedFileds');
                            //self.$el.handsontable('getInstance').setCellMeta(change[0], self.$el.handsontable('getInstance').propToCol(change[1]), 'edited', true);
                            self.cellEdited.push({ 'rowIndex': change[0], 'colIndex': self.$el.handsontable('getInstance').propToCol(change[1]) });
                        }
                    });
                }
            },
            afterGetColHeader: function (col, th) {

                if (!$(th).parent().index()) {
                    th.classList.add('roleindicatorheader');
                    return;
                }

                var header = this.getColHeader(col);

                var headerobj = _.where(headersettings, { displayName: header })[0];

                if (!("content" in th.dataset && col >= 0)) {
                    th.dataset.content = headerobj.fullName;
                    th.dataset.keyname = headerobj.keyName;
                }

                if (col === 5 || col === 6 || col === 7 || col === 8 || col === 9 || col === 12) {
                    th.classList.add('customBorder');
                }
            },
            afterRender: function (col, th) {
                self.$('th[data-content], th .roleindicator').popup({
                    debug: false
                });

                if (self.isreset) {
                    self.$el.find('.editedFileds').removeClass('editedFileds');
                    self.cellEdited = [];
                    self.isreset = false;
                } else {
                    $.each(self.cellEdited, function (index, ele) {
                        var td = self.$el.handsontable('getInstance').getCell(ele['rowIndex'], ele['colIndex']);
                        $(td).addClass('editedFileds');
                    });
                }
            },
            afterRenderer: function (td, row, col, prop, val, cellProperties) {
                if (col === 11) {
                    var model = this.getSourceData().at(row);
                    var rowElement = this.getCell(row, col);
                    rowElement.innerHTML = model.get('status') === 'Not Filed' ? "Deleted" : model.get('status');
                }
            },
        });
    },

    showHideOptions: function (show) {
        var shippingRight = _.where(userContext.Result.Rights, {
            module_id: 12
        })[0];
        if (show) {
            $('div#buttonshippingbulkedit').removeClass('disableoption');
            if (shippingRight.access)
                $('div#buttonClearHistory').removeClass('disableoption');
        } else {
            $('div#buttonshippingbulkedit').addClass('disableoption');
            $('div#buttonClearHistory').addClass('disableoption');
        }
    },

});

Views.Layout = LayoutView.extend({
    template: LayoutShippingTemplate,
    // className: 'ui attached segment',
    className: 'ui grid',
    regions: {
        gridData: 'div#shipping-grid'
    },
    templateHelpers: function () {
        return {
            isControlSheet: _.isUndefined(this.options.controlsheet) ? false : true
            // ship_prior: this.options.ship_prioryears !== null ? 'inline-block' : 'none'
        }
    },
    triggers: {
        'click #shippingsave': 'shippingSave:clicked',
        'click #buttonshippingbulkedit': 'BulkEdit:shipping:click',
        'click #buttonShippingInstruction': 'AddInstruction:shipping:click',
        'click #movetoCompleted': 'movetoCompleted:shipping:click',
        'click #buttonClearHistory': 'clearHistory:shipping:click',
        'click #copyfromPrior': 'copyfromprior:shipping:click',
        'click #completeeFile': 'completeeFile:shipping:click',
        'click #priorshipping': 'shipping:prior:clicked',
        'click #currentshipping': 'shipping:current:clicked'
    },
    onDomRefresh: function () {
        $('.info.circle.icon').popup({
            debug: false
        });
        this.$('a[data-content]').popup({
            debug: false
        });
        var self = this;
        if (!_.isUndefined(this.options.taskInstrModel)) {
            _.delay(function () {
                $('#GeneralShipping_instruction').text('General Shipping Instructions : ' + self.options.taskInstrModel.get('shippingInstructionField'));
                $('#SpecialShipping_instruction').text('Special Instructions : ' + self.options.taskInstrModel.get('specialInstructionsField'));
                $('#mailToShipping_instruction').text('Mail To : ' + self.options.taskInstrModel.get('mailToField'));
                $('#deliveryMethodShipping_instruction').text('Delivery Method : ' + self.options.taskInstrModel.get('deliveryMethodinstructionField'));
                if (_.isEmpty(self.options.taskInstrModel.get('shippingInstructionField'))) {
                    $('#GeneralShipping_instruction').hide();
                }
                if (_.isEmpty(self.options.taskInstrModel.get('specialInstructionsField'))) {
                    $('#SpecialShipping_instruction').hide();
                }
                if (_.isEmpty(self.options.taskInstrModel.get('deliveryMethodinstructionField'))) {
                    $('#deliveryMethodShipping_instruction').hide();
                }
                if (_.isEmpty(self.options.taskInstrModel.get('mailToField'))) {
                    $('#mailToShipping_instruction').hide();
                }
            }, 5000);
        } else {
            $('#GeneralShipping_instruction').hide();
            $('#SpecialShipping_instruction').hide();
            $('#deliveryMethodShipping_instruction').hide();
            $('#mailToShipping_instruction').hide();
        }

        $('#completestatusMsg').show();
        if (!_.isUndefined(this.options.movefeedback)) {
            if (this.options.movefeedback.isCompleteStatus.length !== 0) {
                $('#completestatusMsg').show();
                $('#completestatusMsglbl').show();
                $('#changestatusMsglbl').hide();
            }
        }
    }
});

module.exports = Views;

},{"../../../jst/workspace/shippinglayout-template.html":60,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],153:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
	var API = {};

	context.startWithParent = false;
	context.Show = require('./show/controller');

	API = {
		show: function (options) {
			
			return new context.Show.Controller({
				region: options.region,
				tasks: options.tasks,
				controlsheet: options.controlsheet,
				userAutoSuggest: options.userAutoSuggest,
				_signoffCollection: options._signoffCollection
			});
		}
	};

	context.on('start', function (options) {
		return API.show(options);
	});

	Events.on('stop:info', function () {
		return context.stop();
	});
};
},{"../../lib/config/events":68,"./show/controller":154}],154:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var signOffs, userAutoSuggest, taskIDs, categoryID, taskTypeId, queryParms, promise;
        var self = this;
        if (options.controlsheet) {
            taskIDs = options.tasks.get('id');
            categoryID = options.tasks.get('categoryId');
            taskTypeId = 1; //dummy for single task           
            //promise = Reqres.request('Signoff:entities', taskIDs, categoryID, taskTypeId);
            signOffs = options._signoffCollection;
        } else {
            taskIDs = _.pluck(options.tasks, 'id');
            switch (_.values(options.tasks)[0].get('categoryId')) {
                case 'TX': categoryID = 1; break
                case 'FS': categoryID = 2; break
                case 'BK': categoryID = 3; break
                case 'OT': categoryID = 4; break
            }
            taskTypeId = _.values(options.tasks)[0].get('tasktypeId');
            $('#loading').show();
            $('.ui.text.loader').html("Loading..");
            promise = Reqres.request('Signoff:entities', taskIDs, categoryID, taskTypeId);
        }
        //Need to rewrite below Lines
        if (options.controlsheet) {
            signOffs.options.users = options.userAutoSuggest;
            self.layout = self.GetLayout(signOffs);
            self.listenTo(self.layout, 'Signoff:saveSignoffModels', function () {
                $('#loading').show();
                signOffs.saveAll({
                    success: function () { },
                    error: function () { }
                }).done(function () {
                    queryParms = 'taskIds=' + taskIDs.toString() + '?categoryID =' + categoryID + '?taskTypeId=' + taskTypeId;
                    if (options.controlsheet) {
                        signOffs.fetch({ reset: true, data: { query: queryParms } });
                        self.region.$el.find('.editedFileds').removeClass('editedFileds');
                        //Events.trigger('refresh:routing:move', options.tasks.get('currentStatusField'), 'Signoffs'); //Verify this after single move task separate window
                    } else {
                        signOffs.fetch({ reset: true, data: { query: queryParms } });
                    }
                    $('#loading').hide();
                }).fail(function () { console.log('fail...'); $('#loading').hide(); });
            });

            self.listenTo(Events, 'refresh:routing:move', function (model, page) {
                if (options.controlsheet && page === 'Move') {
                    queryParms = 'taskIds=' + taskIDs.toString() + '?categoryID =' + categoryID + '?taskTypeId=' + taskTypeId;
                    signOffs.fetch({ reset: true, data: { query: queryParms } });
                }
            });

            return self.show(self.layout);
        } else {
            promise.done(function (signoff) {
                signOffs = signoff;
                //signOffs.comparator = 'signoffOrder';
                //signOffs.sort();
                $('#loading').hide();
                $('.ui.text.loader').html("Saving..");
                signOffs.options.users = options.userAutoSuggest;
                self.layout = self.GetLayout(signOffs);
                self.listenTo(self.layout, 'Signoff:saveSignoffModels', function () {
                    $('#loading').show();
                   signOffs.saveAll({
                        success: function () { },
                        error: function () { }
                    }).done(function () {                     
                        queryParms = 'taskIds=' + taskIDs.toString() + '?categoryID =' + categoryID + '?taskTypeId=' + taskTypeId;
                        if (options.controlsheet) {
                            signOffs.fetch({ reset: true, data: { query: queryParms } });
                            //Events.trigger('refresh:routing:move', options.tasks.get('currentStatusField'), 'Signoffs'); //Verify this after single move task separate window
                        } else {
                            signOffs.fetch({ reset: true, data: { query: queryParms } });
                        }
                        self.region.$el.find('.editedFileds').removeClass('editedFileds');
                        $('#loading').hide();
                    }).fail(function () { console.log('fail...'); $('#loading').hide(); });
                });
                return self.show(self.layout);
            });
        }
    },

    GetLayout: function (signoffs) {
        return new Views.Layout({ collection: signoffs, controlsheet: this.options.controlsheet, tasks: this.options.tasks });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":155}],155:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CompositeView = require('../../../lib/views/composite'),
    LayoutSignoffTemplate = require('../../../jst/workspace/signofflayout-template.html'),
	ItemSignoffTemplate = require('../../../jst/workspace/signoffpartial-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.signoffChildView = ItemView.extend({
    tagName: 'tr',
    template: ItemSignoffTemplate,
    events: {
        'click .ui.checkboxSignoff': 'onCheckedSignoff',
        'click .ui.checkboxRequiredSignoff': 'onRequiredSignoffCheck',
        'focusout input': 'onModelChange'
    },
    onModelChange: function (evt) {
        evt.stopPropagation();
        var key = this.$el.find(evt.currentTarget).data('signnoff');
        if (!_.isUndefined(key)) {
            this.model.set(key, this.$el.find(evt.currentTarget).val());
            this.$el.find(evt.currentTarget).addClass("editedFileds");
        }
    },

    onRequiredSignoffCheck: function () {
        if (this.model.get('promptChecked')) {
            this.model.set('promptChecked', false);
        } else {
            this.model.set('promptChecked', true);
        }
    },

    onCheckedSignoff: function (e) {
        var label = this.$el.find('#labelSignoffBy'),
		 date = this.$el.find('#dateSignoffOn'),
		 isCheckOrUncheck = this.$el.find(e.currentTarget).find('input.checkSignoff').prop('checked');
        label.addClass("editedFileds");
        date.addClass("editedFileds");
        this.$el.find(e.currentTarget).find('input.checkSignoff').addClass("editedFileds");
        var CurrentDate = new Date();
        if (isCheckOrUncheck) {
            label.text(loggedinUser);
            date.val(moment(CurrentDate).format('MM/DD/YYYY'));
            this.model.set('signOffBy', loggedinUser);
            this.model.set('signOffById', loggedinuserid);
            this.model.set('signOffOn', moment(CurrentDate).format('MM/DD/YYYY'));
        } else {
            label.text("");
            this.model.set('signOffBy', '');
            this.model.set('signOffById', 0);
            this.model.set('signOffOn', '1/1/1900');
            date.val("");
        }

    },
    initialize: function () {
        this.users = this.model.collection.options.users;
        this.users = _.map(this.users, function (user) {
            return {
                title: user.fullName,
                id: user.Id,
                branchName: user.branchName
            }
        });
    },
    templateHelpers: function () {
        var self = this;
        return {
            model: this.model.toJSON()
        };
    },
    onDomRefresh: function () {
        $('.ui.checkbox').checkbox();
        if (this.model.get('task_id') === 0) {
            $('#thPrompt').hide();
        }
        var self = this;
        var _signOffOn = new Pikaday({
            field: this.$el.find('input.date')[0],
            format: 'MM/DD/YYYY',
            onSelect: function (date) {
                self.model.set('signOffOn', _signOffOn.toString());
                self.$el.find('#dateSignoffOn').addClass("editedFileds");
            }
        });
        var _reqSignOffOn = new Pikaday({
            field: this.$el.find('input.date')[1],
            format: 'MM/DD/YYYY',
            onSelect: function (date) {
                self.model.set('requiredSignOffOn', _reqSignOffOn.toString());
                $(self.$el.find('input.date')[1]).addClass("editedFileds");
            }
        });
        this.$el.find('.ui.search')
			.search({
			    source: self.users, searchFields: ['title'], searchFullText: false,
			    onSelect: function (result) {
			        self.model.set('requiredSignOffBy', result.title);
			        self.model.set('requiredSignOffById', result.id);
			        self.$el.find('.prompt').addClass("editedFileds");
			    },
			    templates: {
			        standard: function (response) {
			            var html = '';
			            var users = response.results;
			            if (users !== 'undefined') {
			                $.each(users, function (index, result) {
			                    var branchname = firmContext.Result.Location.length > 1 ? result.id !== 0 ? result.branchName : '' : '';
			                    html += '<div class="result"><div class="content"><div class="title qsusername" style="float:left;">' + result.title + '</div><div class="description qsbranch" style="float:right;">' + branchname + '</div></div></div>';
			                });
			                return html;
			            }
			        }
			    }
			});
    }
});

Views.Layout = CompositeView.extend({
    template: LayoutSignoffTemplate,
    // className: 'ui attached segment',
    className: 'ui grid',
    childView: Views.signoffChildView,
    childViewContainer: "tbody",
    templateHelpers: function () {
        return {
            isControlSheet: _.isUndefined(this.options.controlsheet) ? false : true
        }
    },
    initialize: function () {
        this.listenTo(this.collection, 'reset', function () {
            this.render();
        });
        this.overrideCompleted = _.where(userContext.Result.Rights, {
            module_id: 31
        })[0];
        this.statusId; this.isTaskLocked = false;
        if (_.pluck(this.options.tasks, 'id').length === 1 || this.options.controlsheet === true) {
            if (this.options.controlsheet === true) {
                this.statusId = this.options.tasks.get('statusId');
            } else {
                this.statusId = _.pluck(this.options.tasks, 'model')[0].get('statusId');
            }

            if (this.statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !this.overrideCompleted.access) {
                $('button#buttonSignoffSave').addClass('disableoption');
                this.isTaskLocked = true;
            }
        }
        this.listenTo(this.collection, 'change', function () {
            if (!this.isTaskLocked)
                $('#buttonSignoffSave').css('display', 'inline-block');
        });
    },
    regions: {
    },
    triggers: {
        'click #buttonSignoffSave': 'Signoff:saveSignoffModels'
    },
    events: {

    },
    onDomRefresh: function () {
        var self = this;
        if (_.pluck(this.options.tasks, 'id').length === 1 || this.options.controlsheet === true) {
            if (this.options.controlsheet === true) {
                this.statusId = this.options.tasks.get('statusId');
            } else {
                this.statusId = _.pluck(this.options.tasks, 'model')[0].get('statusId');
            }

            if (this.statusId === 23 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !this.overrideCompleted.access) {
                $('button#buttonSignoffSave').addClass('disableoption');
                this.isTaskLocked = true;
            } else {
                this.isTaskLocked = false;
                $('button#buttonSignoffSave').removeClass('disableoption');
            }
        } else {
            this.isTaskLocked = false;
            $('button#buttonSignoffSave').removeClass('disableoption');
        }
    }
});

module.exports = Views;
},{"../../../jst/workspace/signofflayout-template.html":61,"../../../jst/workspace/signoffpartial-template.html":62,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/composite":82,"../../../lib/views/item":83,"../../../lib/views/layout":84}],156:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var ids = _.pluck(options.collection, 'id');
        this.layout = this.GetLayout();

        this.listenTo(this.layout, 'save:bulk:points', function (obj) {
            if (!_.isEmpty(obj.view.editor.value())) {
                var arr = _.pluck(this.layout.$('form').serializeArray(), 'value');
                this.saveData(this, obj.view, {}, arr, ids.join(',').toString());
            }
        }, this);

        return this.show(this.layout);
    },

    saveData: function (context, view, obj, array, taskIds) {
        $('#addbulkpointsloading').show();
        obj.points = view.editor.value();
        obj.typeId = array[0];
        obj.carryOver = array[1];
        obj.priorYearAmount = array[2];
        obj.reference = array[3];
        obj.extensionType = this.layout.$('form input[type="checkbox"]').is(':checked');
        obj.type = taskIds;
        $.post(window.routemap + 'api/points/addbulk', obj).done(function (response) {
            if (response === 'success') {
                $('#addbulkpointsloading').hide();
                $('.ui.modal').modal('hide');
                context.updateModels();
                // Events.trigger('stop:info');
            }
        }).fail(function (response) { $('#addbulkpointsloading').hide(); });
    },

    updateModels: function () {
        _.each(this.options.collection, function (model) {
            model.set('points', parseInt(model.get('points')) + 1);
        }, this);
    },

    GetLayout: function () {
        return new Views.Layout;
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":157}],157:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutTemplate = require('../../../jst/workspace/addpointsbulk-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutTemplate,
    className: 'ui large modal',
    events: {
        'focusout .wk-wysiwyg': 'checkEmpty',
        'keydown input[name="amount"]': 'checkforNumbersOnly'
    },
    checkforNumbersOnly: function (e) {
        // Allow: backspace, delete, tab, escape, enter ., and $
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190, 52, 188]) !== -1 ||
            // Allow: Ctrl+A, Ctrl+C, Ctrl+X, Ctrl+V
            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||
            (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||
            (e.keyCode == 86 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    },
    checkEmpty: function(e) {
        var element = this.$(e.currentTarget);
        if (element.is(':empty')) {
            element.css('border-color', '#e0b4b4');
        } else {
            element.css('border-color', 'gray');
        }
    },
    triggers: {
        'click #savebulkpoints': 'save:bulk:points'
    },
    regions: {

    },
    onRender: function() {
        this.$('.ui.radio.checkbox').checkbox();
        this.$('.ui.checkbox').checkbox();
        this.editor = woofmark(this.$('#ipmarkdowneditor')[0], {
            parseHTML: domador,
            parseMarkdown: megamark,
            html: false,
            markdown: false
        });

        this.$el.find('.wk-wysiwyg').on('keydown', function (e) { e.stopPropagation(); });

        this.$('a[data-content]').popup({
            debug: false
        });
    }
});

module.exports = Views;

},{"../../../jst/workspace/addpointsbulk-template.html":28,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],158:[function(require,module,exports){
var application = require('../../../application'),
    BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var _taskModel = Reqres.request('taskmodel:empty:entities');
        var _TaskTypes = Reqres.request('firmsettings:tasktypes:entities', 0);
        this.layout = this.GetLayout(_taskModel, _TaskTypes)
        var self = this;

        this.listenTo(this.layout, 'addtasknext:clicked', function (model) {
            if (_taskModel.get('tasktypeId') !== 0 && $('#periodenddate').val() !== '' && _taskModel.get('clientId') !== 0) {
                var promises = this.addTask(_taskModel),
                    thiz = this;
                $.when.apply($, promises)
                    .done(function (taskmodel) {
                        $('#loading').hide();
                        _taskModel.set('id', taskmodel.get('id'));
                        Events.trigger('addtask:jurisdiction:clicked');
                        $('#addtasknext').css('display', 'none');
                        $('#submitclose').css('display', 'none');
                        $('#submitreview').css('display', 'none');
                        $('#subtaskreview').css('display', 'none');
                        $('#review').css('display', 'inline-block');
                        $('#pageclose').css('display', 'inline-block');
                        thiz.enableTabs(_taskModel);
                    })
                    .fail(function (resp) {
                        $('#addtaskMsg').show();
                        //if (resp.responseText.contains('Task already exists'))
                        $('#addtaskMsglbl').html('Task already exists, if you want to create a duplicate task, you must enter a description for the new task');
                        //else
                        // $('#addtaskMsglbl').html('Internal Server Error Occurred. Please try again');
                        $('#loading').hide();
                    });
            }
            else {
                if (_taskModel.get('clientId') === 0) $('#client_requiredField').show();
                if ($('#periodenddate').val() === '') $('#pe_requiredField').show();
                if (_taskModel.get('tasktypeId') === 0) $('#type_requiredField').show();
                $('#addtaskMsg').show();
                $('#addtaskMsglbl').html('Please fill all required values.');
            }
        }, this);

        _taskModel.on("invalid", function (model, error) {
            alert(error);
        });

        this.listenTo(this.layout, 'submitreview:clicked', function (model) {
            if (_taskModel.get('tasktypeId') !== 0 && $('#periodenddate').val() !== '' && _taskModel.get('clientId') !== 0) {
                var promises = this.addTask(_taskModel);
                var taskId;
                $.when.apply($, promises)
                    .done(function (taskmodel) {
                        $('#loading').hide();
                        taskId = taskmodel.get('id');
                        Events.trigger('stop:addtask');
                        Events.trigger('Task:openControlsheet', taskId);
                    })
                    .fail(function (resp) {
                        $('#addtaskMsg').show();
                        $('#addtaskMsglbl').html('Task already exists, if you want to create a duplicate task, you must enter a description for the new task');
                        $('#loading').hide();
                    });
            }
            else {
                if (_taskModel.get('clientId') === 0) $('#client_requiredField').show();
                if ($('#periodenddate').val() === '') $('#pe_requiredField').show();
                if (_taskModel.get('tasktypeId') === 0) $('#type_requiredField').show();
                $('#addtaskMsg').show();
                $('#addtaskMsglbl').html('Please fill all required values.');
            }
        });
        this.listenTo(this.layout, 'addtask:openControlsheet', function () {
            Events.trigger('Task:openControlsheet', _taskModel.get('id'));
            Events.trigger('stop:addtask');
        });

        Events.on('Task:openControlsheet', function (taskid) {
            var taskId = window.btoa(taskid.toString());
            var querystring = window.open(window.routemap + 'routing/?tid=' + taskId, 'Routing', 'scrollbars=yes,type=fullWindow,fullscreen,resizable=yes,width=' + document.documentElement.clientWidth + ',height=' + document.documentElement.clientWidth);
        });

        this.listenTo(this.layout, 'submitclose:clicked', function (model) {
            if (_taskModel.get('tasktypeId') !== 0 && $('#periodenddate').val() !== '' && _taskModel.get('clientId') !== 0) {
                var promises = this.addTask(_taskModel);
                $.when.apply($, promises)
                    .done(function () {
                        $('#loading').hide();
                        Events.trigger('stop:addtask');
                    })
                     .fail(function (resp) {
                         $('#addtaskMsg').show();
                         $('#addtaskMsglbl').html('Task already exists, if you want to create a duplicate task, you must enter a description for the new task');
                         $('#loading').hide();
                     });
            }
            else {              
                if (_taskModel.get('clientId') === 0) $('#client_requiredField').show();
                if ($('#periodenddate').val() === '') $('#pe_requiredField').show();
                if (_taskModel.get('tasktypeId') === 0) $('#type_requiredField').show();
                $('#addtaskMsg').show();
                $('#addtaskMsglbl').html('Please fill all required values.');
            }
        });

        this.listenTo(this.layout, 'addtask:close:clicked', function () {
            Events.trigger('stop:addtask');
        });

        this.listenTo(this.layout, 'addtask:customfields:clicked', function () {
            application.module('Workflow.CustomField').start({
                region: this.layout.customFieldRegion,
                tasks: _taskModel
            });
        });

        return this.show(this.layout);
    },

    enableTabs: function (model) {
        this.layout.$('.item.disabled').each(function (index, ele) {
            $(this).removeClass('disabled');
        });
        this.layout.$('#tabAddTaskPage .item.active').addClass('disabled');
        this.layout.$('#tabAddTaskPage .item').tab('change tab', 'tabJurisdiction');
        if (model.get('id') !== 0) {
            $('#tabAddTaskPage .item').tab('change tab', 'tabJurisdiction');
            var _subtaskCollection = Reqres.request('Subtask:entities', model.get('id'));
            application.module('Workflow.Jurisdiction').start({
                region: this.layout.addtaskRegion,
                subtasks: _subtaskCollection,
                tasks: model,
                controlsheet: true
            });
        }
    },

    GetLayout: function (_taskModel, _TaskTypes) {
        return new Views.Layout({
            model: _taskModel,
            taskType: _TaskTypes
        });
    },

    addTask: function (_taskModel) {
        var self = this;
        _taskModel.set('periodEndDate', $('#periodenddate').val());
        _taskModel.set('description', $('#description').val());
        var promises;
        if (_taskModel.isValid()) {
            $('#loading').show();
            promises = Reqres.request('task:add:entities', _taskModel);
        }
        return promises;
    },

    openControlsheet: function (taskId) {
        var tId = window.btoa(taskId.toString());
        var querystring = window.open(window.routemap + 'routing/?tid=' + tId, 'Routing', 'scrollbars=yes,type=fullWindow,fullscreen,resizable=yes,width=' + document.documentElement.clientWidth + ',height=' + document.documentElement.clientWidth);
    }

});

},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":159}],159:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CompositeView = require('../../../lib/views/composite'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutTemplate = require('../../../jst/workspace/addtasklayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutTemplate,
    className: 'ui segment',
    regions: {
        addtaskRegion: 'div#tabJurisdiction',
        customFieldRegion: 'div#tabCustomFields',
    },
    triggers: {
        'click #addclose': 'addtask:close:clicked',
        'click #addtasknext': 'addtasknext:clicked',
        'click #submitreview': 'submitreview:clicked',
        'click #submitclose': 'submitclose:clicked',
        'click #tabJurisdictionClick': 'addtask:jurisdiction:clicked',
        'click #tabCustomFieldsClick': 'addtask:customfields:clicked',
        'click #review': 'addtask:openControlsheet',
        'click #pageclose': 'addtask:close:clicked'
    },

    initialize: function (options) {

    },
    onDomRefresh: function () {
        var self = this;
        var TaskTypes = this.options.taskType.map(function (tasktype) {
            tasktype.title = tasktype.Name;
            return tasktype;
        });
        $('#addtaskClose').on('click', function () {
            $(this)
                .closest('.message')
                .hide();
        });
        if (this.model.get('dummyId') !== 'N') {
            $('#tabAddTaskPage .item').tab();
        }
        var pickpedate = new Pikaday({
            field: this.$el.find('input.date')[0],
            format: 'MM/DD/YYYY'
        });
        pickpedate.setDate(firmContext.Result.FirmSettingsContext[0].defaulttaskPEDate != '' ? moment('12/31/' + firmContext.Result.FirmSettingsContext[0].defaulttaskPEDate).format('MM/DD/YYYY') : moment('12/31/' + moment(new Date()).year()).format('MM/DD/YYYY'));
        //$('#periodenddate').val(firmContext.Result.FirmSettingsContext[0].defaulttaskPEDate != '' ? moment('12/31/' + firmContext.Result.FirmSettingsContext[0].defaulttaskPEDate).format('MM/DD/YYYY') : moment(new Date()).format('MM/DD/YYYY'));
        $('.ui.accordion').accordion();
        $('.ui.search.addtaskClient').search({
            maxResults: '',
            minCharacters: 1,
            searchFullText: true,
            cache: false,
            apiSettings: {
                url: window.routemap + 'api/firmsettings/quicksearch?term={query}',
            },
            onSelect: function (result, response, selectedEl) {
                _.delay(function () {
                    var clientid = selectedEl.attr('data-id');
                    if (result.id === Number(clientid)) {
                        self.model.set('clientId', result.id);
                        $('#clientField').val(result.title);
                        self.model.set('originatingLocationId', result.origLocationId);
                        var pedate;
                        firmContext.Result.FirmSettingsContext[0].defaulttaskPEDate != '' ? pedate = firmContext.Result.FirmSettingsContext[0].defaulttaskPEDate : pedate = moment(new Date()).year();
                        moment(result.fiscalYear).year() !== 1900 && moment(result.fiscalYear).year() !== 1 ? pickpedate.setDate(moment(moment(result.fiscalYear).format('MM/DD') + '/' + pedate).format('MM/DD/YYYY')) : '';
                        $('#client_requiredField').hide();
                    } else {
                        var getclient = _.where(response, {
                            'id': Number(clientid)
                        })[0];
                        self.model.set('clientId', getclient.id);
                        $('#clientField').val(getclient.title);
                        self.model.set('originatingLocationId', getclient.origLocationId);
                        var pedate;
                        firmContext.Result.FirmSettingsContext[0].defaulttaskPEDate != '' ? pedate = firmContext.Result.FirmSettingsContext[0].defaulttaskPEDate : pedate = moment(new Date()).year();
                        moment(getclient.fiscalYear).year() !== 1900 && moment(getclient.fiscalYear).year() !== 1 ? pickpedate.setDate(moment(moment(getclient.fiscalYear).format('MM/DD') + '/' + pedate).format('MM/DD/YYYY')) : '';
                        $('#client_requiredField').hide();
                    }
                }, 200);
            },
            onResultsClose: function () {
                if ($('#clientField').val() === '') {
                    self.model.set('clientId', 0);
                    self.model.set('originatingLocationId', 0);
                    pickpedate.setDate(firmContext.Result.FirmSettingsContext[0].defaulttaskPEDate != '' ? moment('12/31/' + firmContext.Result.FirmSettingsContext[0].defaulttaskPEDate).format('MM/DD/YYYY') : moment('12/31/' + moment(new Date()).year()).format('MM/DD/YYYY'));
                    $('#client_requiredField').show();
                }
            },
            searchFields: ['title', 'description'],
            templates: {
                standard: function (response) {
                    var html = '';
                    if (response.results !== 'undefined') {
                        $.each(response.results, function (index, result) {
                            html += '<div class="result" data-id="' + result.id.toString() + '"><div class="content"><div class="title qsclientname">' + result.clientName + '</div><div class="description qsaccno">' + result.accountNo + '</div><div class="description qslocation">' + result.location + '</div></div></div>';
                        });
                        return html;
                    }
                }
            }
        });
        this.$('.ui.search.addtaskTasktype').search({
            source: TaskTypes,
            maxResults: '',
            minCharacters: 0,
            onSelect: function (result) {
                _.delay(function () {
                    if (result.title === $('#tasktypeField').val()) {
                        self.model.set('tasktypeId', result.id);
                        $('#tasktypeField').val(result.title);
                        $('#type_requiredField').hide();
                    } else {
                        var gettasktypes = _.where(TaskTypes, {
                            'title': $('#tasktypeField').val()
                        })[0];
                        self.model.set('tasktypeId', gettasktypes.id);
                        $('#tasktypeField').val(gettasktypes.Name);
                        $('#type_requiredField').hide();
                    }
                }, 200);
                $('#type_requiredField').hide();
            },
            onResultsClose: function () {
                if ($('#tasktypeField').val().trim() === '') {
                    self.model.set('tasktypeId', 0);
                    $('#type_requiredField').show();
                }
                else
                    $('#type_requiredField').hide();
            }
        });

        this.$('a[data-content]').popup({
            debug: false
        });
    }
});

module.exports = Views;

},{"../../../jst/workspace/addtasklayout-template.html":29,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/composite":82,"../../../lib/views/item":83,"../../../lib/views/layout":84}],160:[function(require,module,exports){
var BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var self = this;
        var signOffs, taskIDs, categoryID, taskTypeId;
        taskIDs = _.pluck(options.collection, 'id');
        switch (_.values(options.collection)[0].get('categoryId')) {
            case 'TX': categoryID = 1; break
            case 'FS': categoryID = 2; break
            case 'BK': categoryID = 3; break
            case 'OT': categoryID = 4; break
        }
        taskTypeId = 0;
        var promise = Reqres.request('Signoff:entities:Category', taskIDs, categoryID, taskTypeId);
        return promise.done(function (signoff) {
            self.layout = self.GetLayout(signoff);
            return self.show(self.layout);
        }); 
    },

    GetLayout: function (signoffs) {
        return new Views.Layout({ collection: signoffs });
    }
});

},{"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":161}],161:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    SignOffByCategoryTemplate = require('../../../jst/common/signoffbycategory-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: SignOffByCategoryTemplate,
    className: 'ui small scrolling modal transition',
    initialize: function() {
        this.selectedID;
        this.SignOffList = _.map(this.collection.models, function(signoff) {
            signoff.set('title', signoff.get('name'));
            return signoff.toJSON();
        });
    },
    events: {
        'click #buttonSaveSignoffByCategory': 'SaveSignOffByCategory'
    },
    SaveSignOffByCategory: function() {
        var slectedModel = this.collection.where({
            id: this.selectedID
        })
        _.each(slectedModel, function(signoff) {
            signoff.set('signOffComments', $('#textareaComments').val());
            signoff.set('sectionId', 1000);
            signoff.save();
        });

    },
    onDomRefresh: function() {
        var self = this;
        this.$el.find('.ui.search').search({
            source: self.SignOffList,
            searchFields: ['title'],
            searchFullText: true,
            maxResults: this.SignOffList.length,
            minCharacters: 0,
            onSelect: function(result) {
                self.selectedID = result.id;
            }
        });

        this.$('a[data-content]').popup({
            debug: false
        });
    },
    onRender: function() {},

});

module.exports = Views;

},{"../../../jst/common/signoffbycategory-template.html":24,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],162:[function(require,module,exports){
var Events = require('../../lib/config/events');

module.exports = function (context, application) {
    var API = {};

    context.startWithParent = false;
    context.Show = require('./show/controller');
    context.Add = require('./add/controller');
    context.AddBulkPoints = require('./addBulkPoints/controller');
    context.Info = require('./info/controller');
    context.Move = require('./move/controller');
    context.Points = require('../points/show/controller');
    context.BulkSignOff = require('./bulksignoffs/controller');
    context.MoveExtension = require('../extension/move/controller');
    context.BulkEditMove = require('./move/edit/controller');

    API = {
        show: function (options) {
            if (!_.isUndefined(this.controller)) {
                this.controller.destroy();
            }
            this.controller = new context.Show.Controller({
                region: application.rootView.main,
                bucketName: options.bucketName,
                movefeedback: options.movefeedback,
                resetbucketcount: options.resetbucketcount
            });
        },
        add: function (options) {
            $('#subheader').hide();
            return new context.Add.Controller({
                region: application.rootView.main
            });
        },

        bulkAddPoints: function (options) {
            return new context.AddBulkPoints.Controller({
                region: application.rootView.modalWindow,
                collection: options.collection
            });
        },

        info: function (options) {
            $('#subheader').hide();
            if (!_.isUndefined(this.controller)) {
                this.controller.destroy();
            }
            this.controller = new context.Info.Controller({
                region: application.rootView.main,
                collection: options.collection,
                fromType: options.fromType,
                movefeedback: options.movefeedback,
                _startModuleID: options._startModuleID
            });
        },
        move: function (options) {
            $('#subheader').hide();
            if (!_.isUndefined(this.controller)) {
                this.controller.destroy();
            }
            this.controller = new context.Move.Controller({
                region: application.rootView.main,
                collection: options.collection
            });
        },
        moveExtension: function (ids, users) {
            return new context.MoveExtension.Controller({
                region: application.rootView.modalWindow,
                taskIds: ids,
                userslist: users
            });
        },
        multisort: function (options) {
            return new context.MultiSort.Controller({
                region: application.rootView.popoverDialog
            });
        },
        points: function (options) {
            return new context.Points.Controller({
                region: application.rootView.modalWindow,
                collection: options.collection
            });
        },
        BulkSignOffs: function (collection) {
            return new context.BulkSignOff.Controller({
                region: application.rootView.modalWindow,
                collection: collection
            });
        },
        bulkEditMove: function (users, workflowStates, statusLists) {
            if (!_.isUndefined(this.BulkEditMoveController)) {
                this.BulkEditMoveController.destroy();
            }
            this.BulkEditMoveController = new context.BulkEditMove.Controller({
                region: application.rootView.modalWindow,             
                users: users,
                workflowStates: workflowStates,
                statusLists: statusLists
            })
        },
    };

    Events.on('task:add:clicked', function (model) {
        return API.add({ model: model });
    });

    Events.on('task:bulkaddpoints:clicked', function (collection) {
        return API.bulkAddPoints({ collection: collection });
    });

    Events.on('task:info:clicked', function (collection, _startModuleID, movefeedback) {
        if (_startModuleID !== 'SignOff-Category') {
            return API.info({ collection: collection, _startModuleID: _startModuleID, movefeedback: movefeedback });
        } else {
            return API.BulkSignOffs(collection);
        }

    });

    Events.on('task:info:move', function (options) {
        return API.info({ collection: options.collection, fromType: options.fromType });
    });

    Events.on('task:move:clicked', function (collection) {
        return API.move({ collection: collection });
    });

    Events.on('task:extensionmove:clicked', function (taskids, userlist) {
        return API.moveExtension(taskids, userlist);
    });

    Events.on('task:show:bucket', function (bucketName) {
        return API.show({ bucketName: bucketName, resetbucketcount: true });
    });

    Events.on('points:clicked', function (collection) {
        return API.points({ collection: collection });
    });

    Events.on('bulkedit:move:Click', function (users, workflowStates, statusLists) {
        return API.bulkEditMove(users, workflowStates, statusLists);
    });

    context.on('start', function (options) {
        //return API.show(options);
    });

    context.on('stop', function () {

    });

    Events.on('stop:info', function (movefeedback) {
        $('#subheader').show();
        //bucketName = Backbone.history.fragment || 'TATM';
        bucketName = Backbone.history.fragment || defaultUserBucket;
        return API.show({ bucketName: bucketName, movefeedback: movefeedback, resetbucketcount: true });
    });

    Events.on('stop:move', function (movefeedback) {
        $('#subheader').show();
        //bucketName = Backbone.history.fragment || 'TATM';
        bucketName = Backbone.history.fragment || defaultUserBucket;
        return API.show({ bucketName: bucketName, movefeedback: movefeedback, resetbucketcount: true });
    });

    Events.on('stop:addtask', function () {
        $('#subheader').show();
        //bucketName = Backbone.history.fragment || 'TATM';
        bucketName = Backbone.history.fragment || defaultUserBucket;
        return API.show({ bucketName: bucketName });
    });
};
},{"../../lib/config/events":68,"../extension/move/controller":125,"../points/show/controller":143,"./add/controller":158,"./addBulkPoints/controller":156,"./bulksignoffs/controller":160,"./info/controller":163,"./move/controller":165,"./move/edit/controller":166,"./show/controller":169}],163:[function(require,module,exports){
var application = require('../../../application'),
	BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        var _subtaskCollection = Reqres.request('Subtask:entities', _.pluck(options.collection, 'id'));
        var _priortasks, TaskCurrentStatus;
        _.keys(options.collection).length === 1 ? _priortasks = Reqres.request('task:prioryears', _.pluck(options.collection, 'id')) : '';
        _.keys(options.collection).length === 1 ? TaskCurrentStatus = _.values(options.collection)[0].get('currentStatus') : '';
        var isDiffrentTaskTypeCount = _.uniq(_.pluck(_.toArray(_.map(options.collection, function (model) { return model.toJSON() })), 'tasktypeId')).length;
        this.layout = this.GetLayout(TaskCurrentStatus, isDiffrentTaskTypeCount);
        var userAutoSuggest = Reqres.request('User:entities:AutoSuggest');
        userAutoSuggest.unshift({ Id: 0, fullName: '' });
        this.listenTo(this.layout, 'show', (function (_this) {
            return function () {
                if (options.fromType === 'Shipping') {                   
                    application.module('Workflow.Shipping').start({
                        region: _this.layout.shippingRegion,
                        subtasks: _subtaskCollection,
                        tasks: options.collection,
                        userAutoSuggest: userAutoSuggest,
                        priortasks: _priortasks
                    });
                }
                switch (options._startModuleID) {
                    case 'Jurisdiction':
                        $.tab('change tab', 'tabJurisdiction');
                        $('[data-tab="tabJurisdiction"]').addClass('active');
                        application.module('Workflow.Jurisdiction').start({
                            region: _this.layout.jurisdictionRegion,
                            subtasks: _subtaskCollection,
                            tasks: options.collection
                        });
                        break;
                    case 'Assembly':
                        $.tab('change tab', 'tabAssembly');
                        $('[data-tab="tabAssembly"]').addClass('active');
                        application.module('Workflow.Assembly').start({
                            region: _this.layout.assemblyRegion,
                            subtasks: _subtaskCollection,
                            tasks: options.collection,
                            userAutoSuggest: userAutoSuggest,
                            priortasks: _priortasks
                        });
                        if (_priortasks !== null && !_.isUndefined(_priortasks)) {
                            application.module('Workflow.Shipping').start({
                                region: _this.layout.shippingRegion,
                                subtasks: _subtaskCollection,
                                tasks: options.collection,
                                userAutoSuggest: userAutoSuggest,
                                priortasks: _priortasks
                            });
                        }
                        break;
                    case 'Shipping':
                        $.tab('change tab', 'tabShipping');
                        $('[data-tab="tabShipping"]').addClass('active');
                        application.module('Workflow.Shipping').start({
                            region: _this.layout.shippingRegion,
                            subtasks: _subtaskCollection,
                            tasks: options.collection,
                            userAutoSuggest: userAutoSuggest,
                            priortasks: _priortasks,
                            movefeedback: options.movefeedback
                        });
                        if (_priortasks !== null && !_.isUndefined(_priortasks)) {
                            application.module('Workflow.Assembly').start({
                                region: _this.layout.assemblyRegion,
                                subtasks: _subtaskCollection,
                                tasks: options.collection,
                                userAutoSuggest: userAutoSuggest,
                                priortasks: _priortasks
                            });
                        }
                        break;
                    case 'eFile':
                        $.tab('change tab', 'tabeFile');
                        $('[data-tab="tabeFile"]').addClass('active');
                        application.module('Workflow.eFile').start({
                            region: _this.layout.eFileRegion,
                            subtasks: _subtaskCollection,
                            tasks: options.collection,
                            userAutoSuggest: userAutoSuggest
                        });
                        break;
                    case 'SignOff-Tasktype':
                        $.tab('change tab', 'tabSignOff');
                        $('[data-tab="tabSignOff"]').addClass('active');
                        application.module('Workflow.Signoff').start({
                            region: _this.layout.signoffRegion,
                            tasks: options.collection,
                            userAutoSuggest: userAutoSuggest
                        });
                        break;
                    case 'Engagement':
                        $.tab('change tab', 'tabEngagement');
                        $('[data-tab="tabEngagement"]').addClass('active');
                        application.module('Workflow.Engagement').start({
                            region: _this.layout.engagementRegion,
                            tasks: options.collection,
                            userAutoSuggest: userAutoSuggest
                        });
                        break;
                    case 'Extension':
                        $.tab('change tab', 'tabExtension');
                        $('[data-tab="tabExtension"]').addClass('active');
                        application.module('Workflow.Extension').start({
                            region: _this.layout.extensionRegion,
                            tasks: options.collection,
                            userAutoSuggest: userAutoSuggest
                        });
                        break;
                    default: break;
                }
            }
        }(this)));
        //Need to be moved in start
        this.listenTo(this.layout, 'subtask:jurisdiction:clicked', function () {
            //check if module already started if so jus re-render grid once on tab change
            //to avoid the horizontal scroll bar that appears, doing a render of the grid avoids it.
            if(application.module('Workflow.Jurisdiction')._isInitialized) {
                Events.trigger('jurisdiction:refresh:grid');
            }

            return application.module('Workflow.Jurisdiction').start({
                region: this.layout.jurisdictionRegion,
                subtasks: _subtaskCollection,
                tasks: options.collection
            });
        }, this);

        this.listenTo(this.layout, 'subtask:assembly:clicked', function () {
            //check if module already started if so jus re-render grid once on tab change
            //to avoid the horizontal scroll bar that appears, doing a render of the grid avoids it.
             if(application.module('Workflow.Assembly')._isInitialized) {
                Events.trigger('assembly:refresh:grid');
            }

            return application.module('Workflow.Assembly').start({
                region: this.layout.assemblyRegion,
                subtasks: _subtaskCollection,
                tasks: options.collection,
                userAutoSuggest: userAutoSuggest,
                priortasks: _priortasks
            });
        }, this);

        this.listenTo(this.layout, 'subtask:shipping:clicked', function () {
            //check if module already started if so jus re-render grid once on tab change
            //to avoid the horizontal scroll bar that appears, doing a render of the grid avoids it.
             if(application.module('Workflow.Shipping')._isInitialized) {
                Events.trigger('shipping:refresh:grid');
            }

            return application.module('Workflow.Shipping').start({
                region: this.layout.shippingRegion,
                subtasks: _subtaskCollection,
                tasks: options.collection,
                userAutoSuggest: userAutoSuggest,
                priortasks: _priortasks
            });
        }, this);

        this.listenTo(this.layout, 'subtask:efile:clicked', function () {
            //check if module already started if so jus re-render grid once on tab change
            //to avoid the horizontal scroll bar that appears, doing a render of the grid avoids it.
             if(application.module('Workflow.eFile')._isInitialized) {
                Events.trigger('efile:refresh:grid');
            }

            return application.module('Workflow.eFile').start({
                region: this.layout.eFileRegion,
                subtasks: _subtaskCollection,
                tasks: options.collection,
                userAutoSuggest: userAutoSuggest
            });
        }, this);

        this.listenTo(this.layout, 'subtask:signoff:clicked', function () {
            return application.module('Workflow.Signoff').start({
                region: this.layout.signoffRegion,
                tasks: options.collection,
                userAutoSuggest: userAutoSuggest
            });
        }, this);

        this.listenTo(this.layout, 'subtask:engagement:clicked', function () {
            return application.module('Workflow.Engagement').start({
                region: this.layout.engagementRegion,
                tasks: options.collection,
                userAutoSuggest: userAutoSuggest
            });
        }, this);

        this.listenTo(this.layout, 'subtask:extension:clicked', function () {
            return application.module('Workflow.Extension').start({
                region: this.layout.extensionRegion,
                tasks: options.collection,
                userAutoSuggest: userAutoSuggest
            });
        }, this);

        this.listenTo(this.layout, 'taskinfo:close:clicked', function () {
            Events.trigger('stop:info', options.movefeedback);
        });

        return this.show(this.layout);
    },

    GetLayout: function (TaskCurrentStatus, isDiffrentTaskTypeCount) {
        return new Views.Layout({ _taskStatus: TaskCurrentStatus, isdiffTypes: isDiffrentTaskTypeCount !== 1 ? true : false });
    },
});
},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":164}],164:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutTemplate = require('../../../jst/workspace/taskinfolayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: LayoutTemplate,
    className: 'ui segment',
    regions: {
        jurisdictionRegion: 'div#tabJurisdiction',
        assemblyRegion: 'div#tabAssembly',
        shippingRegion: 'div#tabShipping',
        eFileRegion: 'div#tabeFile',
        signoffRegion: 'div#tabSignOff',
        engagementRegion: 'div#tabEngagement',
        extensionRegion: 'div#tabExtension'
    },
    triggers: {
        'click #taskinfoClose': 'taskinfo:close:clicked',
        'click #tabJurisdictionClick': 'subtask:jurisdiction:clicked',
        'click #tabAssemblyClick': 'subtask:assembly:clicked',
        'click #tabShippingClick': 'subtask:shipping:clicked',
        'click #tabeFileClick': 'subtask:efile:clicked',
        'click #tabSignoffClick': 'subtask:signoff:clicked',
        'click #tabEngagementClick': 'subtask:engagement:clicked',
        'click #tabExtensionClick': 'subtask:extension:clicked'
    },
    initialize: function (options) {

    },
    onDomRefresh: function () {    
      
        $('#tabSignoffClick').prop('disabled', this.options.isdiffTypes);
        if (this.options.isdiffTypes) {
            $("#taskinfowarningMsg").show();          
        }
        if (!_.isEmpty(this.options._taskStatus)) {
            $('#taskstatus').text('Current Status : ' + this.options._taskStatus);
        }
        var self = this;
        $('#tabTaskInfo .item').tab({
            onLoad: function () {
            }
        });
        this.$el.css('box-shadow', 'none');

        this.$('a[data-content]').popup({
            debug: false
        });
    }
});

module.exports = Views;

},{"../../../jst/workspace/taskinfolayout-template.html":63,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],165:[function(require,module,exports){

var application = require('../../../application'),
    BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        options._signoffs = null; var isSignoff = false; options._data = null; options._loader = '';
        var catId = 0, statusLists = null; userAutoSuggest = null; workflowStates = null; taskids = 0;
        options.isControlsheet === true ? taskids = options.collection.get('id') : taskids = _.pluck(options.collection, 'id');
        var workflowStates = Reqres.request('workflowstate:entities', taskids);
        if (!options.isControlsheet) {
            userAutoSuggest = Reqres.request('User:entities:AutoSuggest');
            _.filter(options.collection, function (task) {  //Need to be change this.
                return catId = task.get('categoryId');
            });
            switch (catId) {
                case 'TX':
                    catId = 1;
                    break;
                case 'FS':
                    catId = 2;
                    break;
                case 'BK':
                    catId = 3;
                    break;
                case 'OT':
                    catId = 4;
                    break;
            }
            statusLists = Reqres.request('firmsettings:status:entities', catId);
            userAutoSuggest.unshift({ Id: 0, fullName: '', branchName: '' });
            options._loader = '#loading';
        }
        else {
            catId = options.collection.get('categoryIdField');
            statusLists = Reqres.request('firmsettings:status:entities', catId);
            userAutoSuggest = options.users;
            options._loader = '#moveloading';
        }
        this.checkOutsourceTask(workflowStates);

        this.layout = this.GetLayout(options);
        var userData = [];
        _.each(userAutoSuggest, function (obj) {
            userData.push(
               { Id: obj.Id, fullName: firmContext.Result.Location.length > 1 ? obj.Id !== 0 ? obj.fullName + '  |  ' + obj.branchName : obj.fullName : obj.fullName, userName: obj.fullName }
            );
        });
        this.listenTo(this.layout, 'show', (function (_this) {
            return function () {
                return _this.GetDataGrid(workflowStates, userData, statusLists);
            }
        }(this)));

        this.listenTo(this.layout, 'move:points:clicked', function () {
            var modulename = options.isControlsheet === true ? 'Workflow.openPoints' : 'Workflow.Points';
            return application.module(modulename).start({
                region: this.layout.pointsRegion,
                tasks: workflowStates,
                tasksIds: taskids,
                moveTask: true
            });
        });

        this.listenTo(this.layout, 'move:checklists:clicked', function () {
            var modulename = options.isControlsheet === true ? 'Workflow.openChecklists' : 'Workflow.Checklists';
            return application.module(modulename).start({
                region: this.layout.checklistsRegion,
                tasksIds: taskids,
                tasks: workflowStates,
                userAutoSuggest: userAutoSuggest,
                moveTask: true
            });
        });

        this.listenTo(this.layout, 'move:signoffs:clicked', function () {
            $('.ui.text.loader').html("Loading..");
            $(options._loader).show();

            var self = this;
            var promise = Reqres.request('Signoff:remaining:entities', _.pluck(workflowStates.models, 'id'), catId);;
            promise.done(function (signoffs) {
                if (signoffs.length != 0) {
                    $(options._loader).hide();
                    $('.ui.text.loader').html("Loading..");
                    //$('#main').css('display', 'none');
                    //$('#signoff-grid').css('display', 'inline-block');
                    options._signoffs = signoffs;
                    self.GetOpenSignoffsGrid(workflowStates, signoffs, userData, statusLists);
                }
                else {
                    $('#movesignOffGrid').html("No Records Found");
                    $(options._loader).hide();
                }
            })
              .fail(function () {
                  $(options._loader).hide();
                  $('.ui.text.loader').html("Saving..");
                  console.log(arguments);
              });
        });

        this.listenTo(this.layout, 'moveTask:close:clicked', function () {
            Events.trigger('stop:move');
        });

        this.listenTo(this.layout, 'moveTask:clicked', function () {
            var self = this;
            if (workflowStates.selectedLength === 0) {
                $("#movewarningMsg").html('Please select one or more tasks.').show().delay(5000).fadeOut(function () {
                    $("#movewarningMsg").html('Required Status and To Whom Fields - Complete required fields prior to moving the task.')
                });
            }
            else {
                if (_.isNull(options._signoffs)) {
                    $('.ui.text.loader').html("Moving..");
                    $(options._loader).show();
                    var promise = Reqres.request('Signoff:remaining:entities', _.pluck(workflowStates.selected, 'id'), catId);
                    promise.done(function (signoffs) {
                        //if (signoffs.length != 0) {
                        $(options._loader).hide();
                        options._signoffs = signoffs;
                        self.moveTaskConfirm(workflowStates, options, userAutoSuggest, statusLists);
                        //}
                    });
                }
                else {
                    self.moveTaskConfirm(workflowStates, options, userAutoSuggest, statusLists);
                }
            }
            //Events.trigger('stop:move');
        });

        this.listenTo(this.layout, 'signoffnext:clicked', function () {
            $('#loading').show();
            $('.ui.text.loader').html("Moving..");
            $('#proceedmove').removeClass('deny');
            $('#proceedmove').addClass('approve');
            $('#proceedmove').html('Proceed');
            $('#cancelmove').show();
            var self = this;
            var reqSignoffs = _.filter(options._signoffs.models, function (model) {
                return model.get('prompt') === 'R' && (model.get('signOffById') === 0 || moment(model.get('signOffOn')).year() === 1900)
            });
            var warnSignoffs = _.filter(options._signoffs.models, function (model) {
                return model.get('prompt') === 'W' && (model.get('signOffById') === 0 || moment(model.get('signOffOn')).year() === 1900)
            });
            var confMsg = '';
            if (reqSignoffs.length !== 0 && warnSignoffs.length !== 0)
                confMsg = 'The tasks being moved have both Warning and Required SignOff Prompts associated with them. Click Proceed to skip the Warning SignOffs and proceed with moving those tasks. Click Cancel to complete the Required and Warning SignOffs.';
            else if (reqSignoffs.length !== 0) {
                $('#proceedmove').removeClass('approve');
                $('#proceedmove').addClass('deny');
                $('#proceedmove').html('OK');
                $('#cancelmove').hide();
                confMsg = 'Required SignOffs must be completed prior to moving the task(s). Click OK to complete the SignOffs, and then move the task(s) again.';
            }
            else if (warnSignoffs.length !== 0)
                confMsg = 'Click Cancel to complete the suggested SignOff(s) prior to moving the task(s). Click Proceed to skip the SignOff and proceed with the task move(s).';

            if (confMsg !== '') {
                $('#confMsgMovelbl').html(confMsg);
                $('#confmovetask').modal({
                    closable: false,
                    onDeny: function () {
                        $('#loading').hide();
                    },
                    onApprove: function () {
                        options._signoffs.saveAll({
                            success: function () { },
                            error: function () { }
                        }).done(function (data) {
                            self.moveTasks(workflowStates, options, userAutoSuggest);
                        }).fail(function () { console.log('fail...'); $('#loading').hide(); });
                    }
                }).modal('show');
            }
            else {
                options._signoffs.saveAll({
                    success: function () { },
                    error: function () { }
                }).done(function (data) {
                    self.moveTasks(workflowStates, options, userAutoSuggest);
                }).fail(function () { console.log('fail...'); $('#loading').hide(); });
            }
        });

        this.listenTo(this.layout, 'bulksignoffsave:clicked', function () {
            $('.ui.text.loader').html("Saving..");
            $(options._loader).show();
            var self = this;
            options._signoffs.saveAll({
                success: function () { },
                error: function () { }
            }).done(function (data) {
                var promise = Reqres.request('Signoff:remaining:entities', _.pluck(workflowStates.selected, 'id'), catId);
                promise.done(function (signoff) {
                    options._signoffs = signoff;
                    $('.ui.text.loader').html("Moving..");
                    $(options._loader).hide();
                });
            }).fail(function () { console.log('fail...'); $(options._loader).hide(); });
        });

        this.listenTo(this.layout, 'signoffback:clicked', function () {
            $('#main').css('display', 'inline-block');
            $('#signoff-grid').css('display', 'none');
        });

        this.listenTo(this.layout, 'assemblynext:clicked', function () {
            var self = this;
            $('#main').css('display', 'none');
            $('#signoff-grid').css('display', 'none');
            $('#moveassembly-page').css('display', 'none');
            $('#moveshipping-page').css('display', 'inline-block');
            var shippingpages = _.filter(workflowStates.selected, function (model) {
                if (model.get('tostatusId') === 19 || model.get('tostatusId') === 23)
                    return model;
            });
            var _subtaskCollection = Reqres.request('Subtask:entities', _.pluck(shippingpages, 'id'));
            if (shippingpages.length) {
                return application.module('Workflow.Shipping').start({
                    region: self.layout.shippingRegion,
                    subtasks: _subtaskCollection,
                    tasks: options.collection,
                    userAutoSuggest: userAutoSuggest,
                });
            }
            else
                Events.trigger('stop:move', options._data);
        });

        this.listenTo(this.layout, 'shippingnext:clicked', function () {
            Events.trigger('stop:move', options._data);
        });

        this.listenTo(this.layout, 'bulkEditMove:clicked', function () {
            Events.trigger('bulkedit:move:Click', userAutoSuggest, workflowStates.selected, statusLists);
        });

        this.listenTo(Events, 'BulkEdit:MoveTasks:Apply', function (selectedEditLists) {
            if (_.keys(workflowStates.selected).length !== 0) {
                _.each(workflowStates.selected, function (movetask) {
                    movetask.set({
                        'assignedtoId': Number(selectedEditLists.edittowhom_userId) !== 0 ? Number(selectedEditLists.edittowhom_userId) : Number(movetask.get('assignedtoId')),
                        'tostatus': Number(selectedEditLists.editstatus_Id) !== 0 && !movetask.get('lockstatus') ? selectedEditLists.editstatusname : movetask.get('tostatus'),
                        'tostatusId': Number(selectedEditLists.editstatus_Id) !== 0 && !movetask.get('lockstatus') ? Number(selectedEditLists.editstatus_Id) : Number(movetask.get('tostatusId')),
                        'addorchangeTime': selectedEditLists.editaddtime !== '' ? Number(selectedEditLists.editaddtime) : Number(movetask.get('addorchangeTime')),
                        'saveToWhomRoutingSheetRole': selectedEditLists.iseditRoutingsheet,
                        'isbulkedited': Number(selectedEditLists.editstatus_Id) !== 0 && !movetask.get('lockstatus') ? true : false,
                        'isbulkuser': Number(selectedEditLists.editstatus_Id) !== 0 && !movetask.get('lockstatus') && Number(selectedEditLists.edittowhom_userId) !== 0 ? true : false
                    });
                    movetask.set('assignedtoId', Number(selectedEditLists.edittowhom_userId) !== 0 ? Number(selectedEditLists.edittowhom_userId) : Number(movetask.get('assignedtoId')));                    
                });
                Events.trigger('BulkEdit:MoveTasks:Done');
                Events.trigger('check:outsource:move', workflowStates);              
            }
        });

        this.listenTo(Events, 'check:outsource:move', function (workflowStat) {
            this.checkOutsourceTask(workflowStat);
        });

        return this.show(this.layout);
    },

    GetLayout: function (options) {
        return new Views.Layout({
            isControlsheet: options.isControlsheet
        });
    },

    moveTaskConfirm: function (workflowStates, options, userAutoSuggest, confMsg, statusLists) {
        var filledfields = _.filter(workflowStates.selected, function (model) {
            if (model.get('tostatusId') != 0 && (model.get('assignedtoId') != 0 || model.get('allowMove') === true)) {
                return model;
            }
        });
        var diffStatuses = [];
        var taskinfoFilter = _.filter(workflowStates.selected, function (model) {
            if ((model.get('tostatusId') === 16 || model.get('tostatusId') === 19 || model.get('tostatusId') === 23) && model.get('allowMove') === true) {
                diffStatuses.push(model.get('tostatusId'));
            }
        });
        diffStatuses = _.uniq(diffStatuses);
        var cannotInfo = '';
        if (_.contains(diffStatuses, 16) && (_.contains(diffStatuses, 19) || _.contains(diffStatuses, 23))) {
            cannotInfo = 'Tasks cannot be moved to the statuses "To be Assembled" and "To be Shipped"/"Completed" at the same time.';
        }
        var confMsg = ''; reqSignMsg = ''; counter = 0; var self = this;
        var reqSignoffs = _.filter(options._signoffs.models, function (model) {
            return model.get('prompt') === 'R' && (model.get('signOffById') === 0 || moment(model.get('signOffOn')).year() === 1900)
        });

        //var warnSignoffs = _.filter(options._signoffs.models, function (model) {
        //    return model.get('prompt') === 'W' && (model.get('signOffById') === 0 || moment(model.get('signOffOn')).year() === 1900)
        //});

        //if (reqSignoffs.length !== 0 && warnSignoffs.length !== 0) {
        //    counter = Number(counter + 1);
        //    confMsg = '' + counter + ') The tasks being moved have both Warning and Required SignOff Prompts associated with them. Click Proceed to skip the Warning SignOffs and proceed with moving those tasks. Click Cancel to complete the Required and Warning SignOffs.';
        //}
        //else
        if (reqSignoffs.length !== 0) {
            //$('#proceedmove').removeClass('approve');
            //$('#proceedmove').addClass('deny');
            //$('#proceedmove').html('OK');
            //$('#cancelmove').hide();
            reqSignMsg = 'Required SignOffs – Using the Sign Off tab above complete all Required SignOffs prior to moving the task.';
        }
        //else if (warnSignoffs.length !== 0) {
        //    counter = Number(counter + 1);
        //    confMsg = '' + counter + ') Click Cancel to complete the suggested SignOff(s) prior to moving the task(s). Click Proceed to skip the SignOff and proceed with the task move(s).';
        //}

        if (filledfields.length !== workflowStates.selectedLength) {
            confMsg = 'Required Status and To Whom Fields - Complete required fields prior to moving the task.';
            //$("#movewarningMsg").show().delay(5000).fadeOut();
        }
        if (cannotInfo !== '') {
            if (confMsg !== '')
                confMsg = confMsg + '<br>' + cannotInfo;
            else
                confMsg = cannotInfo;
            //$("#movewarningMsg").html(cannotInfo).show().delay(5000).fadeOut(function () {
            //    $("#movewarningMsg").html('Required Status and To Whom Fields - Complete required fields prior to moving the task.')
            //});
        }
        if (reqSignMsg !== '') {
            if (confMsg !== '')
                confMsg = confMsg + '<br>' + reqSignMsg;
            else
                confMsg = reqSignMsg;
            //$("#movewarningMsg").html(reqSignMsg).show().delay(5000).fadeOut(function () {
            //    $("#movewarningMsg").html('Required Status and To Whom Fields - Complete required fields prior to moving the task.')
            //});
        }
        if (confMsg !== '') {
            $("#movewarningMsg").html(confMsg).show().delay(10000).fadeOut(function () {
                $("#movewarningMsg").html('Required Status and To Whom Fields - Complete required fields prior to moving the task.')
            });
        }
        else {
            $(options._loader).show();
            $('.ui.text.loader').html("Moving..");
            self.moveTasks(workflowStates, options, userAutoSuggest);
            //var pointsstatuses = _.filter(workflowStates.selected, function (model) {
            //    if (model.get('tostatusId') === 16 || model.get('tostatusId') === 18 || model.get('tostatusId') === 19 || model.get('tostatusId') === 23)
            //        return model;
            //});
            //var chkstatuses = _.filter(workflowStates.selected, function (model) {
            //    if (model.get('tostatusId') === 23)
            //        return model;
            //});

            //if (pointsstatuses.length !== 0 || chkstatuses.length !== 0 || confMsg !== '') {
            //    var points = Reqres.request('Points:entities', _.pluck(workflowStates.selected, 'id'));
            //    points._fetch.done(function (data) {
            //        var openpoints = _.filter(data, function (model) {
            //            return model.status === 'Open'
            //        });
            //        if (openpoints.length !== 0) {
            //            counter = Number(counter + 1);
            //            if (confMsg !== '')
            //                confMsg = confMsg + '<br>' + counter + ') There are open Issue/Points that you may want to address prior to moving the task(s). ';
            //            else
            //                confMsg = '' + counter + ') There are open Issue/Points that you may want to address prior to moving the task(s). ';
            //        }
            //        if (chkstatuses.length !== 0) {
            //            var checklists = Reqres.request('Checklists:entities', _.pluck(workflowStates.selected, 'id'));
            //            checklists._fetch.done(function (data) {
            //                var openchecklists = _.filter(data, function (model) {
            //                    return moment(model.completedOn).year() === 1900 && model.checklistStatus !== 'D'
            //                });
            //                if (openchecklists.length !== 0) {
            //                    counter = Number(counter + 1);
            //                    if (confMsg !== '')
            //                        confMsg = confMsg + '<br>' + counter + ') There are one or more incomplete checklists that you may want to address prior to moving the task(s) to Completed. ';
            //                    else
            //                        confMsg = '' + counter + ') There are one or more incomplete checklists that you may want to address prior to moving the task(s) to Completed. ';
            //                }
            //                if (confMsg !== '')
            //                    confMsg = confMsg + "<br><br> Do you still want to proceed with moving the task(s)?";
            //                self.moveTaskMsg(workflowStates, options, userAutoSuggest, confMsg, statusLists);
            //            });
            //        }
            //        else {
            //            if (confMsg !== '')
            //                confMsg = confMsg + "<br><br> Do you still want to proceed with moving the task(s)?";
            //            self.moveTaskMsg(workflowStates, options, userAutoSuggest, confMsg, statusLists);
            //        }
            //    });
            //}
            //else
            //self.moveTaskMsg(workflowStates, options, userAutoSuggest, confMsg, statusLists);
        }
    },

    moveTaskMsg: function (workflowStates, options, userAutoSuggest, confMsg, statusLists) {
        var self = this;
        if (confMsg !== '') {
            $('#confMsgMovelbl').html(confMsg);
            $('#confmovetask').modal({
                closable: false,
                onDeny: function () {
                    $('#loading').hide();
                    //return false;
                },
                onApprove: function () {
                    self.moveTaskclicked(workflowStates, options, userAutoSuggest, statusLists);
                }
            }).modal('show');
        }
        else {
            self.moveTaskclicked(workflowStates, options, userAutoSuggest, statusLists);
        }
    },

    moveTaskclicked: function (workflowStates, options, userAutoSuggest, statusLists) {
        var self = this;

        //var promise = Reqres.request('Signoff:remaining:entities', _.pluck(workflowStates.selected, 'id'));;
        //promise.done(function (signoffs) {
        //    if (signoffs.length != 0) {
        //        $('#loading').hide();
        //        $('.ui.text.loader').html("Loading..");
        //        $('#main').css('display', 'none');
        //        $('#signoff-grid').css('display', 'inline-block');
        //        options._signoffs = signoffs;
        //        self.GetOpenSignoffsGrid(workflowStates, signoffs, userAutoSuggest, statusLists);
        //    }
        //    else {

        $('#loading').show();
        $('.ui.text.loader').html("Moving..");
        self.moveTasks(workflowStates, options, userAutoSuggest);

        //    }

        //});
    },

    moveTasks: function (workflowStates, options, userAutoSuggest) {
        var self = this;
        $('.ui.text.loader').html("Moving..");
        $(options._loader).show();

        var promises = Reqres.request('workflowstate:moveTask:entities', workflowStates);

        $.when.apply($, promises)
            .done(function (data) {
                if (promises.length !== 0) {
                    options._data = data;
                    $(options._loader).hide();
                    $('.ui.text.loader').html("Loading..");
                    if (data.exception === 'OK' && data.expDetails !== '') {
                        reqSignMsg = 'Required SignOffs – Using the Sign Off tab above complete all Required SignOffs prior to moving the task.';
                        $("#movewarningMsg").html(reqSignMsg).show().delay(10000).fadeOut(function () {
                            $("#movewarningMsg").html('Required Status and To Whom Fields - Complete required fields prior to moving the task.')
                        });
                    }
                    else {
                        if (!options.isControlsheet) {
                            var shippingpages = _.filter(workflowStates.selected, function (model) {
                                if (model.get('tostatusId') === 19 || model.get('tostatusId') === 23)
                                    return model;
                            });
                            var assemblypages = _.filter(workflowStates.selected, function (model) {
                                if (model.get('tostatusId') === 16)
                                    return model;
                            });
                            if (assemblypages.length) {
                                //$('#main').css('display', 'none');
                                //$('#signoff-grid').css('display', 'none');
                                //$('#moveassembly-page').css('display', 'inline-block');
                                //var _subtaskCollection = Reqres.request('Subtask:entities', _.pluck(assemblypages, 'id'));
                                //return application.module('Workflow.Assembly').start({
                                //    region: self.layout.assemblyRegion,
                                //    subtasks: _subtaskCollection,
                                //    tasks: options.collection,
                                //    userAutoSuggest: userAutoSuggest,
                                //});
                                var _filteredTasks = _.filter(options.collection, function (collection) {
                                    if (_.contains(_.pluck(assemblypages, 'id'), collection.get('id')))
                                        return collection;
                                });

                                Events.trigger('task:info:clicked', _filteredTasks, 'Assembly', data);
                            }
                            else if (shippingpages.length) {
                                //$('#main').css('display', 'none');
                                //$('#signoff-grid').css('display', 'none');
                                //$('#moveshipping-page').css('display', 'inline-block');
                                //var _subtaskCollection = Reqres.request('Subtask:entities', _.pluck(shippingpages, 'id'));
                                //return application.module('Workflow.Shipping').start({
                                //    region: self.layout.shippingRegion,
                                //    subtasks: _subtaskCollection,
                                //    tasks: options.collection,
                                //    userAutoSuggest: userAutoSuggest,
                                //});
                                var _filteredTasks = _.filter(options.collection, function (collection) {
                                    if (_.contains(_.pluck(shippingpages, 'id'), collection.get('id')))
                                        return collection;
                                });
                                Events.trigger('task:info:clicked', _filteredTasks, 'Shipping', data);
                            }
                            else {
                                Events.trigger('stop:move', data);
                            }
                        }
                        else {
                            var statusname = _.filter(workflowStates.selected, function (model) {
                                return model.get('tostatus')
                            });
                            $('.ui.modal').modal('hide');
                            Events.trigger('refresh:routing:move', statusname[0].get('tostatus'), 'Move');
                        }
                    }
                }
                else
                    $(options._loader).hide();
            })
            .fail(function () {
                $(options._loader).hide();
                $('.ui.text.loader').html("Saving..");
                console.log(arguments);
            });
    },

    checkOutsourceTask: function (workflowStates) {
        var isoutsourcetask = _.filter(workflowStates.models, function (model) {
            if (model.get('tostatusId') === 36 || model.get('tostatusId') === 77)
                return true;
        });
        if (isoutsourcetask.length !== 0) {
            $('#osmovetasklabelrow').show();
        }
        else {
            $('#osmovetasklabelrow').hide();
        }
    },

    GetDataGrid: function (workflowStates, users, statusLists) {
        var dataGrid = new Views.DataGrid({
            collection: workflowStates,
            users: users,
            statusLists: statusLists
        });
        return this.show(dataGrid, {
            loading: true,
            region: this.layout.gridData
        });
    },

    GetOpenSignoffsGrid: function (workflowStates, signoffs, users, statusLists) {
        var dataGrid = new Views.OpenSignoffsGrid({
            collection: signoffs,
            statusLists: statusLists,
            users: users,
            workflowStates: workflowStates,
        });
        return this.show(dataGrid, {
            loading: true,
            region: this.layout.signoffgridData
        });
    }
});
},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":168}],166:[function(require,module,exports){
var BaseController = require('../../../../lib/controllers/application'),
    Reqres = require('../../../../lib/config/reqres'),
    Commands = require('../../../../lib/config/commands'),
    Events = require('../../../../lib/config/events'),
    Views = require('./view');
module.exports.Controller = BaseController.extend({
    initialize: function (options) {
        $('#editusersname').val('');
        $('#editstatusname').val('');
        $('#edittowhom_userId').val(0);
        $('#editstatus_Id').val(0);
        $('#editaddtime').val('');
        $('#iseditRoutingsheet').prop('checked', false);

        var self = this; this.layout;
      
        this.layout = this.GetLayout(options.users, options.workflowStates, options.statusLists);

        this.listenTo(Events, 'Edit:MoveTask:Apply', function () {         
            var selectedEditLists = {
                editusersname: $('#editusersname').val() !== '' ? $('#editusersname').val() : '',
                edittowhom_userId: $('#editusersname').val() !== '' ? $('#edittowhom_userId').val() : 0,
                editstatusname: $('#editstatusname').val() !== '' ? $('#editstatusname').val() : '',
                editstatus_Id: $('#editstatusname').val() !== '' ? $('#editstatus_Id').val() : 0,
                editaddtime: $('#editaddtime').val(),
                iseditRoutingsheet: $('#iseditRoutingsheet').prop('checked'),
            };
            Events.trigger('BulkEdit:MoveTasks:Apply', selectedEditLists);
            $('.ui.modal').modal('hide');
        });

        return this.show(this.layout);       
    },

    GetLayout: function (users, workflowStates, statusLists) {
        return new Views.Layout({
            userslist: users,
            statuslist: statusLists,
            workflowStates: workflowStates
        });
    },
});
},{"../../../../lib/config/commands":67,"../../../../lib/config/events":68,"../../../../lib/config/reqres":69,"../../../../lib/controllers/application":71,"./view":167}],167:[function(require,module,exports){
var LayoutView = require('../../../../lib/views/layout'),
    ItemView = require('../../../../lib/views/item'),
    CollectionView = require('../../../../lib/views/collection'),
    BulkEditMoveTemplate = require('../../../../jst/workspace/editmovetask-template.html'),
    Reqres = require('../../../../lib/config/reqres'),
    Events = require('../../../../lib/config/events'),
    Views = {};

Views.Layout = LayoutView.extend({
    template: BulkEditMoveTemplate,
    //className: 'ui small scrolling modal transition',
    className: 'ui medium modal',
    initialize: function (options) {
    },   
    events: {
        'click #canceleditmove': 'canceleditmove',
        'click #editapplyMove': 'movetaskapply',
        'keydown #editaddtime': 'validateFloatInput'
    },
    templateHelpers: {

    },
    triggers: {
       
    },
    onDomRefresh: function () {
        $('.ui.form')
        .form({
            fields: {
                name: {
                    identifier: 'editmoveusers',
                    rules: [
                      {
                          type: 'empty'
                      }
                    ]
                }
            }
        });

        $('.ui.checkbox').checkbox();      
        var users = this.options.userslist.map(function (user) { user.title = user.fullName; return user; });
        var self = this;
        this.$('#editmoveusers').search({
            source: users,
            maxResults: '',
            minCharacters: 0,
            searchFullText: true,           
            onSelect: function (result) {
                _.delay(function () {
                    if (result.title === $('#editusersname').val()) {
                        $('#edittowhom_userId').val(result.Id);
                        $('#editusersname').val(result.title);                       
                    } else {
                        var getuser = _.where(users, {
                            'fullName': $('#editusersname').val()
                        })[0];
                        $('#edittowhom_userId').val(getuser.Id);
                        $('#editusersname').val(getuser.fullName);                       
                    }
                }, 200);
            },
            onResultsClose: function () {
               
            },
            searchFields: ['title'],
            templates: {
                standard: function (response) {
                    var html = '';
                    var users = response.results;
                    if (users !== 'undefined') {
                        $.each(users, function (index, result) {
                            var branchname = result.Id === 0 ? '' : result.branchName;
                            html += '<div class="result"><div class="content"><div class="title qsusername" style="float:left;">' + result.fullName + '</div><div class="description qsbranch" style="float:right;">' + branchname + '</div></div></div>';
                        });
                        return html;
                    }
                }
            }
        });
        var status = this.options.statuslist.map(function (status) { status.title = status.Name; return status; });
        var statuss = _.filter(this.options.statuslist, function (sttus) {
            if (!_.contains([1, 14, 58, 20, 21, 22, 57, 49, 69], sttus.id))
                return sttus;
        });

        this.$('#editstatus').search({
            source: statuss,
            maxResults: status.length,
            minCharacters: 0,
            searchFullText: true,
            onSelect: function (result) {
                _.delay(function () {
                    if (result.title === $('#editstatusname').val()) {
                        $('#editstatus_Id').val(result.id);
                        $('#editstatusname').val(result.title);
                       // self.statusSelected(result.id, 'status');                     
                    } else {
                        var getstatus = _.where(statuss, {
                            'Name': $('#editstatusname').val()
                        })[0];
                        $('#editstatus_Id').val(getstatus.id);
                        $('#editstatusname').val(getstatus.title);
                        //self.statusSelected(getstatus.id, 'status');                    
                    }
                }, 200);
            },
            onResultsClose: function () {
               
            },
        });

        if(firmContext.Result.FirmSettingsContext[0].movetaskcheckbox === 1) {
            $('#iseditRoutingsheet').prop('checked', true);
        }
    },
    onRender: function () {
        this.$el.css('width', '500');
        this.selected = {};
        var self = this;
        this.$el.find('.ui.checkbox').checkbox();
    },
  
    canceleditmove: function () {
         $('.ui.modal').modal('hide');
        $('#editusersname').val('');
        $('#editstatusname').val('');
        $('#edittowhom_userId').val(0);
        $('#editstatus_Id').val(0);
        $('#editaddtime').val('');
        $('#iseditRoutingsheet').prop('checked', false);
    },

    movetaskapply: function () {
        Events.trigger('Edit:MoveTask:Apply');
    },
    
    validateFloatInput: function (e) {
        e.stopPropagation();
        var val = this.$el.find(e.currentTarget).val(),
            valuesallowed = [46, 8, 9, 27, 13, 110];
        // key === 'adjusttoComplete' ? valuesallowed.push(109,189,190) : '';

        if (_.indexOf(valuesallowed, e.keyCode) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode === 190 && !_.contains(val, ".")) ||
            //if its a negative sign and it sudn't occur any where other than the first i.e to avoid (-22-)
            //repetation of such negations and period symbols.
            ((e.keyCode === 109 || e.keyCode === 189) && !val.length) ||
            //if its a period and it sudn't occur more than once
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            // this.setInputDataToModel(key, val);
            return;
        }

        //to enforce a period symbol after 3digits and to enforce the format 999.99
        //and the format -999.99
        if (((val.length === 3 && !_.contains(val, "-")) && !_.contains(val, ".") && e.keyCode !== 190) ||
            ((_.contains(val, "-") && val.length === 4) && !_.contains(val, ".") && e.keyCode !== 190) ||
            (_.contains(val, ".") && val.split('.')[1].length >= 2)) {
            e.preventDefault();
        }

        //if its alphabets or anything different stop its default behaviour.
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    },
});

module.exports = Views;

},{"../../../../jst/workspace/editmovetask-template.html":42,"../../../../lib/config/events":68,"../../../../lib/config/reqres":69,"../../../../lib/views/collection":81,"../../../../lib/views/item":83,"../../../../lib/views/layout":84}],168:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    LayoutTemplate = require('../../../jst/workspace/movetasklayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

function ColumnAttributes(attr, celltype, readonly, align, renderer, source, strict, firmUsers) {
    var columnSettings;

    function colString(item, value) {
        if (_.isUndefined(value)) return item.get(attr);
        item.set(attr, value);
    };

    function colDate(item, value) {
        if (_.isUndefined(value)) {
            var year = moment(item.get(attr)).year();
            return (year != 1900 ? moment(item.get(attr)).format('l') : '');
        }
    };

    function colBool(item, value) {
        if (_.isUndefined(value)) return _.isUndefined(item.selected) ? false : item.selected;
        return value ? item.select() : item.deselect();
    }

    function colAutocompleteStatus(item, value) {
        if (_.isUndefined(value)) {
            if (item.get('tostatusId') !== 0) {
                var result = _.where(item.get('TaskStatus'), {
                    'id': item.get('tostatusId')
                });
                return result[0].Name;
            } else {
                return '';
            }
        } else {
            var result = _.where(item.get('TaskStatus'), {
                'Name': value
            });
            item.set(attr, result[0].id);
            item.set('tostatus', result[0].Name)
        }
    };

    function colAutocompleteSignoff(item, value) {
        if (_.isUndefined(value)) {
            if (item.get('selectedSignOffId') !== 0) {
                //var result = _.where(item.get('signoffs'), { 'id': item.get('selectedSignOffId') });
                return value;
            } else {
                return '';
            }
        } else {
            //var result = _.where(item.get('signoffs'), { 'name': value });
            item.set(attr, 4);
            //item.set('selectedSignOffs', result[0].name);
        }
    };

    function colAutocompleteUsers(item, value) {
        if (_.isUndefined(value)) {
            if (item.get('assignedtoId') !== 0) {
                var result = _.where(firmUsers, {
                    'Id': item.get('assignedtoId')
                });
                return result.length != 0 ? result[0].fullName : '';
            } else {
                return '';
            }
        } else {
            var result = _.where(firmUsers, {
                'fullName': value
            });
            result.length != 0 ? item.set(attr, result[0].Id) : item.set(attr, 0);
            result.length != 0 ? item.set('assignedto', result[0].fullName) : item.set('assignedto', '');
        }
    };
    switch (celltype) {
        case 'checkbox':
            columnSettings = {
                data: colBool,
                type: 'checkbox',
                readonly: readonly,
                className: align,
                //colWidths: 40
            }
            break;
        case 'routingSheetEnabled':
            columnSettings = {
                data: colBool,
                type: 'checkbox',
                readonly: readonly,
                className: align,
                //colWidths: 40
            }
            break;
        case 'numeric':
            columnSettings = {
                data: colString,
                readOnly: readonly,
                className: align
            }
            break;
        case 'date':
            columnSettings = {
                data: colDate,
                type: 'text',
                readOnly: readonly,
                className: align
            }
            break;
        case 'autocompleteStatus':
            columnSettings = {
                data: colAutocompleteStatus,
                type: 'dropdown',
                className: align,
                source: ['Preparation', 'Prepared By Client', 'Questions Answered'],
                //strict: true
            }
            break;
        case 'autocompleteSignoff':
            columnSettings = {
                data: colAutocompleteSignoff,
                type: 'dropdown',
                source: ['Assembly By', 'OutSourced By', 'Partner Review By', 'Prepared By', 'Scanned By', 'Signed By', 'Technical Review By'],
                className: align,
                strict: false
            }
            break;
        case 'autocompleteUsers':
            columnSettings = {
                data: colAutocompleteUsers,
                type: 'dropdown',
                className: align,
                trimDropdown: false,
                source: function (query, process) {
                    return process(_.pluck(firmUsers, 'fullName'));
                },
                strict: false
            }
            break;
        default:
            columnSettings = {
                data: colString,
                type: 'text',
                className: align,
                readOnly: readonly
            };
            break;
    }

    return columnSettings;
}

Views.DataGrid = ItemView.extend({
    template: false,
    initialize: function () {
        var collection = this.collection;
        this.listenTo(this.collection, 'selected', function () {
            $('ui green button').html('Move Selected');
            $('div#bulkEditMove').removeClass('disableoption');
        });

        this.listenTo(this.collection, 'select:none', function () {
            $('ui green button').html('Move All');
            $('div#bulkEditMove').addClass('disableoption');
        });
        this.listenTo(Events, 'BulkEdit:MoveTasks:Done', function () {
            this.refreshGrid();
        });

        this.listenTo(this.collection, 'reset', this.refreshGrid, this);
    },

    events: {
        // 'click th[data-keyname]': 'sortMoveTaskGridData'
    },

    sortMoveTaskGridData: function (e) {
        this.collection.sortData(e.currentTarget.dataset.keyname);
    },

    getHeaderSettings: function () {
        var headers = [{
            displayName: '',
            keyName: '',
            fullName: '',
            colWidth: 2,
        }, {
            displayName: 'Client',
            keyName: 'clientName',
            fullName: 'Client Name',
            colWidth: 8,
        }, {
            displayName: 'Cat.',
            keyName: 'taskCategory',
            fullName: 'Category',
            colWidth: 2,
        }, {
            displayName: 'Type',
            keyName: 'taskType',
            fullName: 'Task Type',
            colWidth: 4,
        }, {
            displayName: 'Period End',
            keyName: 'periodEndDate',
            fullName: 'Period End Date',
            colWidth: 4,
        }, {
            displayName: 'From Status',
            keyName: 'fromstatus',
            fullName: 'From Status',
            colWidth: 7,
        }, {
            displayName: 'To Status',
            keyName: 'tostatus',
            fullName: 'To Status',
            colWidth: 9,
        }, {
            displayName: 'To Whom',
            keyName: 'assignedto',
            fullName: 'To Whom',
            colWidth: 8,
        }, {
            displayName: 'Add Time',
            keyName: 'addorchangeTime',
            fullName: 'Add Time',
            colWidth: 3,
        }, {
            displayName: 'Role',
            keyName: 'previousRole',
            fullName: 'Previous Role',
            colWidth: 5,
        }, {
            displayName: 'RSR',
            keyName: 'saveToWhomRoutingSheetRole',
            fullName: 'Routing Sheet Role',
            colWidth: 2,
        }, {
            displayName: 'Pts',
            keyName: 'pointsCount',
            fullName: 'Points',
            colWidth: 2,
        }, {
            displayName: 'Ckl',
            keyName: 'checklistsCount',
            fullName: 'Checklists',
            colWidth: 2,
        }, {
            displayName: 'SignOffs',
            keyName: 'signoffprompt',
            fullName: 'SignOffs',
            colWidth: 4,
        }, ];
        return headers;
    },

    refreshGrid: function () {
        // var grid = this._MoveTaskGrid.getInstance();
        var grid = this.$el.handsontable('getInstance');

        if (!_.isUndefined(grid)) {
            grid.updateSettings({
                maxRows: this.collection.length,
            });
            grid.render();
        }
    },

    onDomRefresh: function () {
        var headersettings = this.getHeaderSettings(),
           headers = _.pluck(headersettings, 'displayName');

        $('#tabWorkflowState .item').tab();
        // this.$el.css({
        //     'width': '100%',
        //     'overflow': 'hidden'
        // });
        //this.collection.each(function (model) {        
        //    //model.set('saveToWhomRoutingSheetRole', true);
        //});

        //this.$el.handsontable({
        var self = this;

        this._MoveTaskGrid = this.$el.handsontable({
            data: this.collection,
            columns: [
                ColumnAttributes('selected', 'checkbox', false, 'htLeft'),
                //{
                //    data: function (model, value) {
                //        if (_.isUndefined(value)) {
                //            if (model.get('clientName') === 'Albrecht,Anna ')
                //                return 'RW-1';
                //            else if (model.get('clientName') === 'Albert, Francis ')
                //                return '';
                //            else
                //                return 'W-1';
                //        }
                //    },
                //    type: 'text',
                //    readonly: true
                //},               
                ColumnAttributes('clientName', 'text', true, 'htLeft'),
                ColumnAttributes('taskCategory', 'text', true, 'htLeft'),
                ColumnAttributes('taskType', 'text', true, 'htLeft'),
                ColumnAttributes('periodEndDate', 'date', true, 'htLeft'),
                ColumnAttributes('fromstatus', 'text', true, 'htLeft'), {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            if ((!model.hasChanged('tostatus') && model.get('tostatusId') !== 0 && !model.get('isrepeat'))) {
                                var allowMove = self.statusSelected(model.get('tostatusId'), 'mapped', model);
                                model.set('allowMove', allowMove);
                                model.set('isrepeat', true);
                            }
                            else if (model.get('tostatusId') !== 0 && model.get('isbulkedited')) { //check status changed
                                model.set('isrepeat', true);
                                if (model.get('tostatusId') !== 0) {
                                    var allowMove = self.statusSelected(model.get('tostatusId'), 'status', model);
                                    model.set('isbulkedited', false);
                                    model.set('isbulkuser', false);
                                    model.set('allowMove', allowMove);
                                }
                            }
                            return model.get('tostatus');
                        } else {
                            var result = _.where(self.options.statusLists, {
                                'Name': value
                            });
                            if (result.length != 0) {
                                if ((result[0].id === 16 || result[0].id === 19 || result[0].id === 23) && model.selected) {
                                    var diffStatuses = [result[0].id];
                                    _.filter(self.collection.selected, function (models) {
                                        if ((models.get('tostatusId') === 16 || models.get('tostatusId') === 19 || models.get('tostatusId') === 23) && model.get('id') !== models.get('id') && models.get('allowMove') === true) {
                                            diffStatuses.push(models.get('tostatusId'));
                                        }
                                    });
                                    diffStatuses = _.uniq(diffStatuses);
                                    if (_.contains(diffStatuses, 16) && (_.contains(diffStatuses, 19) || _.contains(diffStatuses, 23))) {
                                        $("#movewarningMsg").html('Tasks cannot be moved to the statuses "To be Assembled" and "To be Shipped"/"Completed" at the same time.').show().delay(5000).fadeOut(function () {
                                            $("#movewarningMsg").html('Required Status and To Whom Fields - Complete required fields prior to moving the task.')
                                        });
                                        return;
                                    }
                                }
                            }
                            result.length != 0 ? model.set('tostatusId', result[0].id) : model.set('tostatusId', 0);
                            model.set('isrepeat', true);

                            if (model.get('tostatusId') !== 0) {
                                var allowMove = self.statusSelected(model.get('tostatusId'), 'status', model);
                                model.set('allowMove', allowMove);
                            }
                            Events.trigger('check:outsource:move', self.collection);
                            return result.length != 0 ? model.set('tostatus', value) : model.set('tostatus', '');
                        }
                    },
                    type: 'dropdown',
                    source: function (query, process) {
                        var statuss = _.filter(self.options.statusLists, function (sttus) {
                            if (!_.contains([1, 14, 58, 20, 21, 22, 57, 49, 69], sttus.id))
                                return sttus;
                        });
                        return process(_.pluck(statuss, 'Name'));
                    },
                    strict: false,
                    trimDropdown: false,
                    className: 'htLeft'
                },
                //ColumnAttributes('assignedtoId', 'autocompleteUsers', false, '', '', '', false, this.options.users),
                //{
                //    data: function (item, value) {
                //        if (_.isUndefined(value)) {
                //            if (item.get('assignedtoId') !== 0) {
                //                var result = _.where(self.options.users, {
                //                    'Id': item.get('assignedtoId')
                //                });
                //                return result.length != 0 ? result[0].fullName : '';
                //            } else {
                //                return '';
                //            }
                //        } else {
                //            var result = _.where(self.options.users, {
                //                'fullName': value
                //            });
                //            result.length != 0 ? item.set('assignedtoId', result[0].Id) : item.set('assignedtoId', 0);
                //            result.length != 0 ? item.set('assignedto', result[0].fullName) : item.set('assignedto', '');
                //        }
                //    },
                //    type: 'dropdown',
                //    className: '',
                //    trimDropdown: false,
                //    source: function (query, process) {
                //        return process(_.pluck(self.options.users, 'fullName'));
                //    },
                //    strict: false
                //},
                 {
                     data: function (item, value) {                       
                         if (_.isUndefined(value)) {
                             if (item.get('assignedtoId') !== 0) {
                                 var result = _.where(self.options.users, {
                                     'Id': item.get('assignedtoId')
                                 });                              
                                 return result.length != 0 ? result[0].userName : '';
                             } else {                               
                                 return '';
                             }
                         } else {
                             var result = _.where(self.options.users, {
                                 'fullName': value
                             });                         
                             if (firmContext.Result.Location.length > 1 && result.length === 0) {
                                 result = _.where(self.options.users, {
                                     'userName': value.trim()
                                 });                             
                             }                        
                             result.length != 0 ? item.set('assignedtoId', result[0].Id) : item.set('assignedtoId', 0);
                             result.length != 0 ? item.set('assignedto', result[0].userName) : item.set('assignedto', '');
                         }
                     },
                     type: 'dropdown',                  
                     source: function (query, process) {
                         return process(_.pluck(self.options.users, 'fullName'));
                     },
                     className: 'htLeft',
                     trimDropdown: false,
                     strict: false,
                     validator: function (value, callback) {                    
                         callback(true);
                     }
                 },

                ColumnAttributes('addorchangeTime', 'numeric', false, 'htLeft'),
                {
                    data: function (item, value) {
                        if (_.isUndefined(value)) {
                            item.get('previousRoleId') === 0 ? item.set('previousRoleId', 1001) : '';
                            return item.get('previousRole') !== '' ? item.get('previousRole') : 'Others';
                        }
                    },
                    type: 'text',
                    className: 'htLeft',
                    readOnly: true,
                }, {
                    data: function (item, value) {
                        if (_.isUndefined(value)) {
                            return item.get('saveToWhomRoutingSheetRole');
                        }
                        return item.set('saveToWhomRoutingSheetRole', value);
                    },
                    type: 'checkbox',
                    className: 'htLeft'
                },
                ColumnAttributes('pointsCount', 'numeric', true, 'htLeft'),
                ColumnAttributes('checklistsCount', 'numeric', true, 'htLeft'),
                ColumnAttributes('signoffprompt', 'text', true, 'htLeft'),
                //ColumnAttributes('selectedSignOffId', 'autocompleteSignoff', false, '', '', '', false),
                //{
                //    data: function (model, value) {
                //        if (_.isUndefined(value)) return model.get('selectedSignOffs');
                //        return model.set('selectedSignOffs', value);
                //    },
                //    type: 'dropdown',
                //    source: ['Assembly By', 'OutSourced By', 'Partner Review By', 'Prepared By', 'Scanned By', 'Signed By', 'Technical Review By'],
                //    strict: false
                //},
                //ColumnAttributes('signOffComment', 'text', true)
            ],
            colHeaders: headers,
            colWidths: function (col) {
                var hot = self.$el.handsontable('getInstance'),
                    colname = hot.getColHeader(col),
                    totalwidth = document.documentElement.clientWidth,
                    columnwidth = _.where(headersettings, { displayName: colname })[0].colWidth;

                if (totalwidth < 2000) {
                    return ((totalwidth * columnwidth) / 100);
                }
            },
            currentRowClassName: 'currentRow',
            currentColClassName: 'currentCol',
            manualColumnFreeze: true,
            manualColumnResize: true,
            maxRows: this.collection.length,
            rowHeaders: false,
            stretchH: 'all',
            comments: true,
            //height: 400,
            afterGetColHeader: function (col, th) {
                var header = this.getColHeader(col);

                var headerobj = _.where(headersettings, { displayName: header })[0];

                if (!("content" in th.dataset && col >= 0)) {
                    th.dataset.content = headerobj.fullName;
                    th.dataset.keyname = headerobj.keyName;
                }

                if (col === 10 || col === 8 || col === 6 || col === 7) {
                    th.classList.add('customBorder');
                }
                //var header = this.getColHeader(col);
                //if (!("content" in th.dataset)) {
                //    switch (header) {
                //        case 'Client':
                //            th.dataset.content = 'Client Name'
                //            break;
                //        case 'Cat.':
                //            th.dataset.content = 'Category'
                //            break;
                //        case 'Role':
                //            th.dataset.content = 'Previous Role'
                //            break;
                //        case 'Add Time':
                //            th.dataset.content = 'Add Time'
                //            break;
                //        case 'RSR':
                //            th.dataset.content = 'Routing Sheet Role'
                //            break;
                //        case 'Pts':
                //            th.dataset.content = 'Points'
                //            break;
                //        case 'Ckl':
                //            th.dataset.content = 'Checklists'
                //            break;
                //        default: th.dataset.content = header;
                //            break;
                //    }

                //}
                //if (col === 10 || col === 8 || col === 6 || col === 7) {
                //    th.classList.add('customBorder');
                //}
            },
            afterRender: function () {
                $('th[data-content]').popup({
                    debug: false
                });
            },

            //afterChange: function (changes, source) {
            //    if (changes != null) {
            //        $.each(changes, function (index, change) {
            //            if (self._MoveTaskGrid.getData().at(change[0]).hasChanged('tostatus')) {
            //                if (self._MoveTaskGrid.getData().at(change[0]).get('tostatusId') !== 0) {
            //                    var allowMove = self.statusSelected(self._MoveTaskGrid.getData().at(change[0]).get('tostatusId'), 'status', self._MoveTaskGrid.getData().at(change[0]));
            //                    self._MoveTaskGrid.getData().at(change[0]).set('allowMove', allowMove);
            //                    self._MoveTaskGrid.getData().at(change[0]).set('isrepeat', true);
            //                }
            //            }
            //        });
            //    }
            //},
        });

        this.$el.handsontable('getInstance').updateSettings({
            cells: function (row, col, prop) {
                //if (col === 0) {
                //    var cellProperties = {}; 
                //    if (self._MoveTaskGrid.getData().at(row).get('tostatusId') !== 0 && (self._MoveTaskGrid.getData().at(row).get('assignedtoId') !== 0 || self._MoveTaskGrid.getData().at(row).get('allowMove'))) {
                //        self._MoveTaskGrid.getData().at(row).select();                                          
                //    }
                //    else {
                //        self._MoveTaskGrid.getData().at(row).deselect();
                //    }                
                //    return cellProperties;
                //}

                if (col === 0) {
                    _.isUndefined(self.$el.handsontable('getInstance').getSourceData().at(row).selected) || self.$el.handsontable('getInstance').getSourceData().at(row).selected ? self.$el.handsontable('getInstance').getSourceData().at(row).select() : self.$el.handsontable('getInstance').getSourceData().at(row).deselect();
                }

                var cellProperties = {};
                if (col === 6) {
                    if (self.$el.handsontable('getInstance').getSourceData().at(row).get('lockstatus'))
                        cellProperties.readOnly = true;
                }
                else if (col === 7) {
                    //if (self.$el.handsontable('getInstance').getData().at(row).get('tostatusId') != 0) {        //           
                    //    cellProperties.strict = true;
                    //}    
                    var result = _.where(self.options.users, {
                        'Id': self.$el.handsontable('getInstance').getSourceData().at(row).get('assignedtoId')
                    });
                    if (!result.length && Number(self.$el.handsontable('getInstance').getSourceData().at(row).get('assignedtoId')) !== 0) {
                        cellProperties.comment = 'Default user ' + self.$el.handsontable('getInstance').getSourceData().at(row).get('assignedto') + ' associated in the control sheet is Inactive. Please choose different user to move task.';
                        self.$el.handsontable('getInstance').getSourceData().at(row).set('assignedtoId', 0);
                        self.$el.handsontable('getInstance').getSourceData().at(row).set('assignedto', '');
                    }
                    //else
                    //{
                    //    var commentsPlugin = self._MoveTaskGrid.getPlugin('comments');
                    //    commentsPlugin.removeCommentAtCell(row, col);
                    //}                        
                    if (Number(self.$el.handsontable('getInstance').getSourceData().at(row).get('tostatusId')) === 23 || Number(self.$el.handsontable('getInstance').getSourceData().at(row).get('tostatusId')) === 35 || self.$el.handsontable('getInstance').getSourceData().at(row).get('blankUser') === true) {

                        cellProperties.readOnly = true;
                    }
                    else
                        cellProperties.readOnly = false;

                } else if (col === 10) {
                    if (!self.$el.handsontable('getInstance').getSourceData().at(row).get('ismapped')) {
                        cellProperties.readOnly = true;
                    }
                    else
                        cellProperties.readOnly = false;
                }

                return cellProperties;
            },
        });
    },

    statusSelected: function (statusId, type, model) {
        var allowMove = false;
        var categoryId = model.get('categoryId');
        if (userContext.Result.UserContext[0].roleId !== 7) { //Outsourced
            if (_.contains([7, 8, 13, 37], statusId)) {
                //RequiredFieldValidator2.Enabled = true;
                //$('#towhom_lbl').show();
                //$('#towhom_user').show();
            }

            if (statusId === 37) {
                //$('#towhom_lbl').show();
                //$('#towhom_user').show();
            }

            if (statusId === 36 || statusId === 77) {
                //$('#adminlabelrow').show();
                //$('#outsourceWarning').show();
            } else {
                //$('#adminlabelrow').hide();
                //$('#outsourceWarning').hide();
            }
        } else {

            //if (statusId === 23 && model.get('checklistsCount') !== 0 && type !== 'mapped') {
            //    console.log('There are one or more incomplete checklists that you may want to address prior to moving the task(s) to Completed. Do you still want to proceed with moving the task(s)?');
            //    //return;
            //}

            if ((statusId === 49) && (userContext.Result.UserContext[0].roleId === 7 || userContext.Result.UserContext[0].roleId === 8)) // condition to check the status is os questions posted on cpa side
            {
                //change preparer template with taskid=" + os_taskid + "&OSQn=Yes&mode=One&type=CPA"
            }
            else if ((statusId === 58) && (userContext.Result.UserContext[0].roleId === 7 || userContext.Result.UserContext[0].roleId === 8)) // condition to check the status is os awaiting information on cpa side
            {
                //RequiredFieldValidator2.Enabled = true;                  
                //$('#towhom_lbl').show();
                //$('#towhom_user').show();
            }
            else // ELSE for other statuses on cpa side
            {
                if (_.where(firmContext.Result.Status, {
                        'id': statusId,
                        'categoryId': categoryId
                }).length != 0 || (statusId === 23 || statusId === 35)) {
                    var assignrule = _.where(firmContext.Result.Status, {
                        'id': statusId,
                        'categoryId': categoryId
                    }).length != 0 ? _.where(firmContext.Result.Status, {
                        'id': statusId,
                        'categoryId': categoryId
                    })[0].assignrule : '';
                    if (statusId === 23 || statusId === 35)
                        assignrule = 'A';
                    if (assignrule === 'P' || assignrule == 'AP') {
                        //RequiredFieldValidator2.Enabled = true;
                        //$('#towhom_lbl').show();
                        //$('#towhom_user').show();
                        //$('#adminlabelrow').hide();
                        model.set('blankUser', false);
                    }
                    if (assignrule === 'A' && (statusId === 23 || statusId === 35)) {
                        //$('#towhom_lbl').hide();
                        //$('#towhom_user').hide();
                        //$('#adminlabelrow').hide();
                        model.set('blankUser', true);
                        allowMove = true;
                    } else
                        if (assignrule === 'PA' || assignrule === 'APA') {
                            //$('#towhom_lbl').show();
                            //$('#towhom_user').show();
                            //$('#adminlabelrow').show();
                            //$('#adminlabel').html('Leave Choose field blank to move task to general admin staff');
                            model.set('blankUser', false);
                            allowMove = true;
                        } else
                            if (assignrule === 'A') {
                                //$('#towhom_lbl').hide();
                                //$('#towhom_user').hide();
                                model.set('blankUser', true);
                                allowMove = true;
                            }
                            else
                                if (assignrule === 'U') {
                                    model.set('blankUser', true);
                                    allowMove = true;
                                }

                    if (assignrule === 'O') { // && (statusId === 36 || statusId === 77)) {                                       
                        model.set('blankUser', true);
                        allowMove = true;
                    }
                    //if (assignrule === 'O' && (statusId === 36 || statusId === 77)) {
                    //    $('#osmovetasklabelrow').show();
                    //}
                    //else {
                    //    $('#osmovetasklabelrow').hide();
                    //}
                    //switch (_.where(firmContext.Result.Status, { 'id': statusId, 'categoryId': categoryId })[0].ismoveAssign) {
                    //    case 0:
                    //        $('#towhom_lbl').show();
                    //        $('#towhom_user').show();
                    //        $('#adminlabelrow').show();
                    //        $('#adminlabel').html('Leave Choose field blank to move task to general admin staff');
                    //        allowMove = true;
                    //        break;
                    //    case 1:
                    //        //RequiredFieldValidator2.Enabled = true;
                    //        $('#towhom_lbl').show();
                    //        $('#towhom_user').show();
                    //        $('#adminlabelrow').hide();
                    //        break;
                    //}

                }
            }
        }

        if (statusId !== 0 && statusId != '') {
            var self = this; var promises;
            if (type !== 'mapped')
                promises = Reqres.request('firmsettings:GetManageStatusInfo:entities', model.get('categoryId'), model.get('taskTypeId'), statusId, false);
            else
                promises = Reqres.request('firmsettings:GetManageStatusInfo:entities', model.get('categoryId'), model.get('taskTypeId'), model.get('fromstatusId'), true);

            $.when.apply($, promises)
                 .done(function (statusinfo) {
                     if (statusinfo.lockstatusField !== null && type === 'mapped') {
                         if (statusinfo.lockstatusField.trim() == 'Y' && userContext.Result.UserContext[0].roleId === 7)
                             model.set('lockstatus', true);
                     }
                   
                     if (statusinfo.role_assignedField !== 0 && type !== 'mapped') {
                         if (!model.get('isbulkuser')) {
                             var staffpromises = Reqres.request('StaffBudgets:Staff:entities', model.get('id'), statusinfo.role_assignedField);
                             $.when.apply($, staffpromises)
                                 .done(function (staffinfo) {
                                     if (staffinfo != null && staffinfo.staffNameId != 0) {
                                         model.set('assignedtoId', staffinfo.staffNameId);
                                         model.set('assignedto', staffinfo.staffName.trim());
                                     }
                                     else {
                                         model.set('assignedtoId', 0);
                                         model.set('assignedto', '');
                                     }
                                     if (staffinfo != null && staffinfo.id != 0 && (firmContext.Result.FirmSettingsContext[0].movetaskcheckbox === 1)) {
                                         model.set('saveToWhomRoutingSheetRole', true);
                                     }
                                     else {
                                         model.set('saveToWhomRoutingSheetRole', false);
                                     }
                                     model.set('ismapped', true);
                                 })
                                 .fail(function () {
                                     console.log(arguments);
                                 });
                         }
                         else {
                             if (firmContext.Result.FirmSettingsContext[0].movetaskcheckbox === 1) {
                                 model.set('saveToWhomRoutingSheetRole', true);
                             }
                             else {
                                 model.set('saveToWhomRoutingSheetRole', false);
                             }
                             model.set('ismapped', true);
                         }
                     } else if (type !== 'mapped' && (!model.get('isbulkuser') || model.get('blankUser'))) {
                         model.set('saveToWhomRoutingSheetRole', false);
                         model.set('ismapped', false);
                         model.set('assignedtoId', 0);
                         model.set('assignedto', '');
                     }
                     else if (type === 'mapped' && firmContext.Result.FirmSettingsContext[0].movetaskcheckbox === 1) {
                         if (statusinfo.role_assignedField !== 0) {
                             model.set('saveToWhomRoutingSheetRole', true);
                             model.set('ismapped', true);
                         }
                         else {
                             model.set('saveToWhomRoutingSheetRole', false);
                             model.set('ismapped', false);
                         }
                     }
                 })
                .fail(function () {
                    console.log(arguments);
                });
        }
        model.set('allowMove', allowMove);
        model.set('isrepeat', true);
        return allowMove;
    }

});

Views.Layout = LayoutView.extend({
    template: LayoutTemplate,
    //className: !_.isUndefined(this.options.isControlsheet) ? 'ui fullscreen modal' : '',
    regions: {
        gridData: 'div#moveTaskData',
        signoffgridData: 'div#movesignOffGrid',
        pointsRegion: 'div#tabopenPoints',
        checklistsRegion: 'div#tabopenChecklists',
        assemblyRegion: 'div#moveassemblyGrid',
        shippingRegion: 'div#moveshippingGrid',
    },
    triggers: {
        'click .close': 'moveTask:close:clicked',
        'click #movetask': 'moveTask:clicked',
        'click #tabopenPointsClick': 'move:points:clicked',
        'click #tabopenChecklistsClick': 'move:checklists:clicked',
        'click #tabopenSignoffsClick': 'move:signoffs:clicked',
        'click #assemblynext': 'assemblynext:clicked',
        'click #shippingnext': 'shippingnext:clicked',
        'click #signoffnext': 'signoffnext:clicked',
        'click #signoffback': 'signoffback:clicked',
        'click #checklistsave': 'checklistsave:clicked',
        'click #pointsnext': 'pointsnext:clicked',
        'click #bulksignoffsave': 'bulksignoffsave:clicked',
        'click #bulkEditMove': 'bulkEditMove:clicked',
    },

    initialize: function () {
        if (!_.isUndefined(this.options.isControlsheet)) {
            this.$el.addClass('ui fullscreen modal');
        }
        this.listenTo(this.collection, 'select:some', function () {
            $('ui green button').html('Move Selected');
        });
        this.listenTo(this.collection, 'select:none', function () {
            $('ui green button').html('Move All');
        });
    },

    onDomRefresh: function () {
        if (!_.isUndefined(this.options.isControlsheet)) {
            $('#bulkEditMove').hide();
        }
        this.$('a[data-content]').popup({
            debug: false
        });
    }
});

Views.OpenSignoffsGrid = ItemView.extend({
    template: '#signoff-grid',
    initialize: function () {
        var collection = this.collection;
    },

    onDomRefresh: function () {
        this.$el.css({
            'width': '100%',
            'overflow': 'hidden'
        });

        var self = this;

        this._signOffGrid = Handsontable($('#movesignOffGrid')[0], {
            data: this.collection,
            columns: [{
                data: function (item, value) {
                    if (_.isUndefined(value)) {
                        return item.get('signOffById') !== 0 && moment(item.get('signOffOn')).year !== 1900 ? true : false;
                    } else {
                        if (value) {
                            var CurrentDate = new Date();
                            item.set('signOffBy', loggedinUser);
                            item.set('signOffById', loggedinuserid);
                            item.set('signOffOn', moment(CurrentDate).format('MM/DD/YYYY'));
                        } else {
                            item.set('signOffBy', '');
                            item.set('signOffById', 0);
                            item.set('signOffOn', moment('1/1/1900').format('MM/DD/YYYY'));
                        }
                        return item.get('signOffById') !== 0 && moment(item.get('signOffOn')).year !== 1900 ? true : false;
                    }
                },
                type: 'checkbox',
                readOnly: false,
                className: 'htCenter'
            },
                ColumnAttributes('clientName', 'text', true),
                ColumnAttributes('name', 'text', true),
                ColumnAttributes('signOffBy', 'text', true, 'htLeft'), {
                    data: function (item, value) {
                        if (_.isUndefined(value)) {
                            var year = moment(item.get('signOffOn')).year();
                            return (year != 1900 && year != 1 ? moment(item.get('signOffOn')).format('l') : '');
                        } else {
                            return item.set('signOffOn', value);
                        }
                    },
                    type: 'date',
                    readOnly: false,
                    className: 'htLeft',
                    dateFormat: 'MM/DD/YYYY',
                    correctFormat: true,
                },
                ColumnAttributes('signOffComments', 'text', false, 'htCenter'),
                ColumnAttributes('prompt', 'text', true), {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            return model.get('requiredSignOffBy');
                        } else {
                            var result = _.where(self.options.users, {
                                'fullName': value.trim()
                            });
                            if (firmContext.Result.Location.length > 1 && result.length === 0) {
                                result = _.where(self.options.users, {
                                    'userName': value.trim()
                                });
                            }
                            result.length != 0 ? model.set('requiredSignOffById', result[0].Id) : model.set('requiredSignOffById', 0);
                            return result.length != 0 ? model.set('requiredSignOffBy', result[0].userName) : model.set('requiredSignOffBy', '');
                        }
                    },
                    type: 'dropdown',
                    source: function (query, process) {
                        return process(_.pluck(self.options.users, 'fullName'));
                    },
                    trimDropdown: false,
                    strict: true,
                    validator: function (value, callback) {
                        callback(true);
                    }
                }, {
                    data: function (item, value) {
                        if (_.isUndefined(value)) {
                            var year = moment(item.get('requiredSignOffOn')).year();
                            return (year != 1900 && year != 1 ? moment(item.get('requiredSignOffOn')).format('l') : '');
                        } else {
                            return !_.isNaN(moment(value).year()) ? item.set('requiredSignOffOn', value) : item.set('requiredSignOffOn', '1/1/1900');
                        }
                    },
                    type: 'date',
                    readOnly: false,
                    className: 'htLeft',
                    dateFormat: 'MM/DD/YYYY',
                    correctFormat: true,
                },
                ColumnAttributes('requiredSignOffComments', 'text', false), {
                    data: function (model, value) {
                        if (_.isUndefined(value)) {
                            var statusname = self.options.workflowStates.where({
                                'id': model.get('task_id')
                            });
                            return statusname.length != 0 ? statusname[0].get('fromstatus') : '';
                        }
                    },
                    type: 'text',
                    readOnly: true
                },

            ],
            colHeaders: [
                '',
                'Client',
                'Name',
                'By',
                'Date',
                'Comments',
                'Prompt',
                'Required Name',
                'Required Date',
                'Comments',
                'Status',
            ],
            currentRowClassName: 'currentRow',
            currentColClassName: 'currentCol',
            maxRows: this.collection.length,
            rowHeaders: false,
            stretchH: 'all',
            //height: 400,
            afterChange: function (changes, source) {
                if (changes != null) {
                    $.each(changes, function (index, change) {
                        if (self._signOffGrid.getSourceData().at(change[0]).hasChanged()) {
                            $('#bulksignoffsave').show();
                        }
                    });
                }
            },
        });
    }

});

module.exports = Views;

},{"../../../jst/workspace/movetasklayout-template.html":55,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/item":83,"../../../lib/views/layout":84}],169:[function(require,module,exports){
var application = require('../../../application'),
    BaseController = require('../../../lib/controllers/application'),
    Reqres = require('../../../lib/config/reqres'),
    Commands = require('../../../lib/config/commands'),
    Events = require('../../../lib/config/events'),
    Views = require('./view');

//some events hooking up that is to be relooked and abstracted so that its can be reusable as search 
//replicates the same behaviour.
//single sort has to be relooked, filtering on the collection itself still can be done more wisely
//adapted this methodology for now cause of brevity.

//VVIP(needs to be addressed on higher note) the events are getting registered on the events object
//multiple times once per evry module or rerender of the region. Guess coz every time new instance of collection
//is been sent from the index.js file, needs  to be addressed to send the same instance of collection. or destroy and
//then send new instance. - (cheezzzz...Have resolved, should get it evaluated from evryone.)

//idea of using haschange on window object is not right, ideally it sud be the router make the announcement
//and triggering the page. needs to be addressed.

module.exports.Controller = BaseController.extend({
    pageType: 'myview',
    initialize: function (options) {
        var self = this,
            urlfragments = ["", "TATM", "XATM", "CATM", "ADMN", "TIMD", "EFIL", "XTSK", "OTSD", "UAGD", "TAXC", "FINC", "BKPC", "OTHC"],
            bucketnames = ["Tasks assigned to me", "Tasks assigned to me", "Extensions assigned to me", "Checklists assigned to me", "Admin", "Task I Moved", "eFile", "Extensions Tasks", "Outsourced", "Unassigned", "Tax", "Financial", "Bookkeeping", "Others"],
            bucketlookup = _.object(urlfragments, bucketnames);

        var settingsData = Reqres.request('columnsettings:entities', 'myview');

        this.query = {
            bucketName: options.bucketName
        };

        // console.log(bucketlookup[defaultUserBucket])
        // $('#subheader .dropdown').dropdown('set selected', bucketlookup[defaultUserBucket]);

        var tasks = Reqres.request('task:entities', this.query);

        this.layout = this.GetLayout(options);
        this.$loader = $('#loading');

        this.evnetlisteners(tasks, settingsData);
        this.layoutViewEventListeners(tasks, settingsData);

        this.listenTo(tasks, 'update', function(collection) {
            this.updateText(collection);
        }, this);

        this.listenTo(tasks, 'reset', function(collection) {
            $('#viewingcount').html(collection.length);
        });

        if (!_.isUndefined(options.resetbucketcount)) {
            this.myviewBucketCount();
        }

        this.listenTo(this.layout, 'show', (function(_this) {
            var bucket = Backbone.history.fragment;
            $('#subheader .dropdown').dropdown('set selected', bucketlookup[bucket ? bucket : defaultUserBucket]);
            _this.initiateQuickSearch();
            settingsData.fetch().done(function () {
                var localData = JSON.parse(localStorage.getItem(self.pageType + userContext.Result.UserContext[0].userId));
                
                if (_.isEmpty(localData)) {
                    localStorage.setItem(self.pageType + userContext.Result.UserContext[0].userId, JSON.stringify(settingsData));
                } else {
                    settingsData.each(function (column) {
                        var localmodel = _.where(localData, { 'keyName': column.get('keyName') })[0];
                        if (!_.isUndefined(localmodel)) {
                            column.set({
                                isVisible: localmodel.isVisible,
                                colWidth: localmodel.colWidth,
                                orderid: localmodel.orderid
                            }, { silent: true });
                        }
                    });
                }
                _this.layout.$el.find('#bucketTitle').text(bucket ? bucketlookup[bucket] : bucketlookup[defaultUserBucket]);
                _this.GetGridViewRegion(tasks, settingsData.getColumnHeaders(), settingsData.getColumnList(), settingsData.getColumnHeaders('keyName'), settingsData.toJSON());
            });
        }(this)));

        return this.show(this.layout, {
            loading: true
        });
    },

    checkModel: function (model) {
        console.log('checkModel: ', model);
    },

    layoutViewEventListeners: function(collection, gridsetting) {
        this.listenTo(this.layout, 'show:selected:clicked', function() {
            collection.filterSelected();
        });

        this.listenTo(this.layout, 'task:refresh:clicked', function() {
            this.refreshGrid(collection, gridsetting);
        }, this);

        this.listenTo(gridsetting, 'change:filterCriteria', function(model) {
            if (_.flatten(model.collection.pluck('filterCriteria')).length) {
                $('#filterby').removeClass('filter_off').addClass('filter_on');
            } else {
                $('#filterby').removeClass('filter_on').addClass('filter_off');
            }
        });
        this.listenTo(this.layout, 'Export:Grid:Data', function () {
            Events.trigger('Export:Grid:Data:CSV');
        });

        this.listenTo(gridsetting, 'change:isSorted', function(model) {
            if (_.compact(_.flatten(model.collection.pluck('isSorted'))).length > 1) {
                $('#sortby').removeClass('multisort_off').addClass('multisort_on');
            } else {
                $('#sortby').removeClass('multisort_on').addClass('multisort_off');
            }
        })
        
        this.listenTo(this.layout, 'task:info:clicked', function(_startModuleID) {
            var isDiffrentCategoryCount = _.uniq(_.pluck(_.toArray(_.map(collection.selected, function(model) {
                return model.toJSON()
            })), 'categoryId')).length;
            var _taskCount = collection.selectedLength;
            if (isDiffrentCategoryCount === 1) {
                if (_taskCount <= 50) {
                    if (_startModuleID === 'SignOff-Tasktype') {
                        var isDiffrentTaskTypeCount = _.uniq(_.pluck(_.toArray(_.map(collection.selected, function(model) {
                            return model.toJSON()
                        })), 'tasktypeId')).length;
                        if (isDiffrentTaskTypeCount === 1) {
                            Events.trigger('task:info:clicked', collection.selected, _startModuleID);
                        } else {
                            $('#taskWarningMessage').html('Tasks cannot be open for multiple task types at the same time');
                            $('#divTaskWarningMessage').show();
                        }
                    } else {
                        Events.trigger('task:info:clicked', collection.selected, _startModuleID);
                    }
                } else {
                    $('#taskWarningMessage').html('Bulk operation of Tasks is Restricted to 50 Tasks');
                    $('#divTaskWarningMessage').show();
                }
            } else {
                $('#taskWarningMessage').html('Tasks cannot be open for multiple task categories at the same time');
                $('#divTaskWarningMessage').show();
            }
        });

        //var isCheckedOutsource = false;
        this.listenTo(this.layout, 'task:move:clicked', function() {
            var isDiffrentCategoryCount = _.uniq(_.pluck(_.toArray(_.map(collection.selected, function(model) {
                return model.toJSON()
            })), 'categoryId')).length;
            var _taskCount = collection.selectedLength;
            if (isDiffrentCategoryCount === 1) {
                if (_taskCount <= 50) {
                    var warningMsg = '';
                    var ovwerrideCompleted = _.where(userContext.Result.Rights, {
                        module_id: 31
                    })[0];
                    var istaskscompleted = _.filter(collection.selected, function(model) {
                        if (model.get('statusId') === 23)
                            return true;
                    });
                    //var isoutsourcedtask = _.filter(collection.selected, function (model) {
                    //    if (model.get('statusId') === 37)
                    //        return true;
                    //});
                    var isosawaitinfo = _.filter(collection.selected, function(model) {
                        if (model.get('statusId') === 58 && (userContext.Result.UserContext[0].roleId === 7 || userContext.Result.UserContext[0].roleId === 8))
                            return true;
                    });
                    var isosqueposted = _.filter(collection.selected, function(model) {
                        if (model.get('statusId') === 49 && (userContext.Result.UserContext[0].roleId === 4 || userContext.Result.UserContext[0].roleId === 5 || userContext.Result.UserContext[0].roleId === 6))
                            return true;
                    });
                    if (istaskscompleted.length !== 0 && firmContext.Result.FirmSettingsContext[0].lockcompletedTasks === 1 && !ovwerrideCompleted.access) {
                        warningMsg = 'Permission Denied- Tasks in Completed status cannot be moved. Please uncheck Completed tasks and try again';
                    }
                    if (isosawaitinfo.length !== 0) {
                        if (warningMsg !== '')
                            warningMsg = warningMsg + '<br> OS Awaiting Information status task cannot be moved; Please deselect that task';
                        else
                            warningMsg = 'OS Awaiting Information status task cannot be moved; Please deselect that task';
                    }
                    if (isosqueposted.length !== 0) {
                        if (warningMsg !== '')
                            warningMsg = warningMsg + '<br> OS Question Posted status task cannot be moved; Please deselect that task';
                        else
                            warningMsg = 'OS Question Posted status task cannot be moved; Please deselect that task';
                    }
                   
                    //if (isoutsourcedtask.length !== 0 && !isCheckedOutsource) {
                    //    if (warningMsg !== '')
                    //        warningMsg = warningMsg + '<br> Please make sure Task Tier, Task Tier Units and Actual No of units are updated before moving Task/s out of OS Awaiting Bookmarking status. Click Move Task again to continue.';
                    //    else
                    //        warningMsg = 'Please make sure Task Tier, Task Tier Units and Actual No of units are updated before moving Task/s out of OS Awaiting Bookmarking status. Click Move Task again to continue.';
                    //    isCheckedOutsource = true;
                    //} 
                    if (warningMsg !== '') {
                        $('#taskWarningMessage').html(warningMsg);
                        $('#divTaskWarningMessage').show();
                    } else
                        Events.trigger('task:move:clicked', collection.selected);
                } else {
                    $('#taskWarningMessage').html('Bulk operation of Tasks is Restricted to 50 Tasks');
                    $('#divTaskWarningMessage').show();
                }
            } else {
                $('#taskWarningMessage').html('Tasks cannot be open for multiple task categories at the same time');
                $('#divTaskWarningMessage').show();
            }
        });

        this.listenTo(this.layout, 'task:moveextension:clicked', function() {
            //var isDiffrentCategoryCount = _.uniq(_.pluck(_.toArray(_.map(collection.selected, function (model) { return model.toJSON() })), 'categoryId')).length;
            var assignedPersonList = _.map(Reqres.request('User:entities:AutoSuggest'), function(obj) {
                return _.pick(obj, 'fullName', 'Id');
            });
            var _taskCount = collection.selectedLength;
            var taskids = _.pluck(collection.selected, 'id').toString();
            if (_taskCount <= 50) {
                Events.trigger('task:extensionmove:clicked', taskids, assignedPersonList);
            } else {
                $('#taskWarningMessage').html('Bulk operation of Tasks is Restricted to 50 Tasks');
                $('#divTaskWarningMessage').show();
            }
        });


        this.listenTo(this.layout, 'task:add:clicked', function() {
            Events.trigger('task:add:clicked', {});
        });

        this.listenTo(this.layout, 'task:bulkaddpoints:clicked', function() {
            var _taskCount = collection.selectedLength;
            if (_taskCount <= 50) {
                Events.trigger('task:bulkaddpoints:clicked', collection.selected);
            } else {
                $('#taskWarningMessage').html('Bulk operation of Tasks is Restricted to 50 Tasks');
                $('#divTaskWarningMessage').show();
            }
        });

        this.listenTo(this.layout, 'task:multisort:clicked', function() {
            $.when(gridsetting.getSortableList()).then(this.ShowMultisort(gridsetting));
        }, this);

        this.listenTo(this.layout, 'task:columhideshow:clicked', function() {
            $.when(gridsetting.getColumnDisplayList()).then(this.showColumnShowHide(gridsetting));
        }, this);

        this.listenTo(this.layout, 'task:filters:clicked', function() {
            //this sud be done using popup's isvisible or ishidden but dono y that isn't working
            //always says false doing this coz this event is triggered even when we are closing popup
            //i.e the whole process of creating view is happening when we close the popover also
            //temporary workaround.
            if (this.layout.$('.ui.popup').hasClass('in')) {
                this.showFiltersView(gridsetting, collection);
            }
        }, this);

        this.listenTo(gridsetting, 'change:isVisible', function(col) {
            var grid = $('#dgrid').handsontable('getInstance');
            grid.updateSettings({
                colHeaders: col.collection.getColumnHeaders(),
                columns: col.collection.getColumnList()
            });            
        });

        this.listenTo(this.layout, 'points:clicked', function() {
            return application.module('Workflow.Points').start({
                region: application.rootView.modalWindow,
                tasksCollection: collection
            });
        });

        this.listenTo(this.layout, 'checklists:clicked', function() {
            return application.module('Workflow.Checklists').start({
                region: application.rootView.modalWindow,
                tasksCollection: collection
            });
        });

        this.listenTo(this.layout, 'extension:clicked', function() {
            var self = this;
            var _taskCount = collection.selectedLength;
            if (_taskCount <= 50) {
                $('#loading').find('.ui .loader').text('Creating Extension....');
                $('#loading').show();
                //var taskIds = _.pluck(collection.selected, 'id').toString();
                //console.log(tmp);
                $.post(window.routemap + 'api/extensions/create', { '': _.pluck(collection.selected, 'id').toString() })
                    .done(function(response) {
                        if (response === 'success') {
                            self.showExtensionPage(_.pluck(collection.selected, 'id'), collection);
                            $('#loading').hide();
                            $('#loading').find('.ui .loader').text('Saving...');
                        }
                    }).fail(function(response) {
                        $('#loading').hide();
                        $('#loading').find('.ui .loader').text('Saving...');
                    });
            } else {
                $('#taskWarningMessage').html('Bulk Creation Extension of Tasks is Restricted to 50 Tasks');
                $('#divTaskWarningMessage').show();
            }
        }, this);

        this.listenTo(this.layout, 'updateprojectedstartdate:clicked', function() {
            var self = this;
            if ($('#projectedstartdate').val().trim() !== '') {
                //console.log($('#projectedstartdate').val().split('/').join('-'), _.pluck(collection.selected, 'id').toString());
                $('#loading').find('.ui .loader').text('Updating....');
                $('#loading').show();
                $.post(window.routemap + 'api/task/updateprojectedstartdate/' + $('#projectedstartdate').val().split('/').join('-') + '/' + _.pluck(collection.selected, 'id').toString())
                    .done(function(response) {
                        if (response === 'success') {
                            $('#projectedstartdate').val('');
                            $('#loading').hide();
                            $('#loading').find('.ui .loader').text('Saving...');
                            self.refreshGrid(collection, gridsetting);
                        }
                    }).fail(function(response) {
                        $('#projectedstartdate').val('');
                        $('#loading').hide();
                        $('#loading').find('.ui .loader').text('Saving...');
                    });
            }
        }, this);
    },

    refreshGrid: function(collection, gridsetting) {
        collection.selectNone();
        var isSearchPage = _.indexOf(window.location.pathname.split('/'), 'search') >= 0;
        if (isSearchPage) {
            this.fetchandShowResults(collection, gridsetting).done(function() {
                gridsetting.clearFilters();
                gridsetting.resetSortList();
            });
        } else {
            this.$loader.show().find('.text p').text('Loading...Pls wait');
            var query = {
                    bucketName: _.isEmpty(Backbone.history.fragment) ? defaultUserBucket : Backbone.history.fragment
                },
                self = this;
            collection.fetch({
                data: {
                    query: JSON.stringify(query)
                }
            }).done(function() {
                gridsetting.clearFilters();
                gridsetting.resetSortList();
                self.$loader.hide().find('.text p').text('Saving..');
            }).always(function () {
               collection.selectNone(); 
            });
        }
    },

    showExtensionPage: function(taskIds, collection) {
        var clientinfo;
        var tasklength = _.isArray(taskIds) ? taskIds.length : taskIds.toString().split(',').length;
        window.localStorage.removeItem('extension_clientinfo');
        window.localStorage.removeItem('extensions_TaskIds');

        if (tasklength === 1) {
            var model = _.isArray(taskIds) ? _.where(collection.models, {
                selected: true
            })[0] : _.where(collection.models, {
                id: taskIds
            })[0];
            clientinfo = this.getClientInfo(model);
            window.localStorage.setItem('extension_clientinfo', clientinfo);
        }
        window.localStorage.setItem('extension_clientinfo', clientinfo);
        window.localStorage.setItem('extensions_TaskIds', taskIds);
        var querystring = window.open(window.routemap + 'extensions', 'extensions', 'top=30,left=200,height=600,width=1050,status=yes,scrollbars=yes,resizable=yes');
    },

    getClientInfo: function(model) {
        var clientinfo = model.get('clientName') + '_' + model.get('clientAccountNumber') + '_' + model.get('clientPhoneNumber') + '_' + moment(model.get('periodEndDate')).format('MM/DD/YYYY') + '_' + model.get('clientEmail') + '_' + model.get('description') + '_' + model.get('taskType');
        return clientinfo;
    },

    openExtensionsPage: function(obj) {
        //using postmessage but in IE it does not work.. :(
        var self = this;
        if (_.isUndefined(this.extwindow) || this.extwindow.closed) {
            this.extwindow = window.open(window.routemap + '/extensions', 'ext', 'top=30,left=250,height=600,width=1000,status=yes,scrollbars=yes,resizable=no');
            this.extwindow.onload = function() {
                self.extwindow.postMessage(JSON.stringify(obj), self.extwindow.location.href);
            };
        } else {
            this.extwindow.postMessage(JSON.stringify(obj), this.extwindow.location.href);
        }
    },

    evnetlisteners: function(collection, gridsetting) {
        this.listenTo(Events, 'filter:onstatus', function(statusid, statusname) {
            gridsetting.clearFilters();
            if (statusid !== "0") {
                var model = gridsetting.where({
                    keyName: "currentStatus"
                })[0];
                var temp = [];
                temp.push(statusname);
                // var temp = model.get('filterCriteria');
                // temp.splice(0,1,statusname);
                model.set({
                    'filterCriteria': temp
                });
            } else {
                var model = gridsetting.where({
                    keyName: "currentStatus"
                })[0];
                model.set({
                    'filterCriteria': []
                });
            }
            collection.filteronStatus(statusid);
        });

        this.listenTo(Events, 'task:refresh:grid', function() {
            this.refreshGrid(collection, gridsetting);
        }, this);

        this.listenTo(Events, 'singlesort:grid', function(txt) {
            var sortBy = _.filter(gridsetting.originalModels, function(model) {
                return model.get('displayName') === txt
            })[0];
            sortBy.set('colSort', sortBy.get('colSort') === 'desc' ? 'asc' : 'desc');
            collection.singlesortdata(sortBy.get('keyName'), sortBy.get('colSort'));
            //below is the old method used above call is using the collection-sorted library
            // collection.singlesort(sortBy.get('keyName'), sortBy.get('colSort'));
        });

        this.listenTo(Events, 'apply:sort', function() {
            var sortcriteria = gridsetting.getSortResult();
            collection.multisort(sortcriteria);
        });

        this.listenTo(Events, 'show:extensions:page', function(model) {
            // this.openExtensionsPage(_.indexBy([model], 'cid'));
            this.showExtensionPage(model.get('id'), collection);
        }, this);

        this.listenTo(Events, 'columnsettingcollection: resettoorginal', function() {
            gridsetting.resettoOrginal();
        });

        this.listenTo(Events, 'reset:sortoptions', function() {
            gridsetting.resetSortList();
            collection.resettoOriginal();
        });

        this.listenTo(Events, 'task:myview:columnresize', function (model) {
            //$.post(window.routemap + 'api/task/taskcolumn', model)
            //        .done(function (response) { })
            //        .fail(function (response) {});
            this.updateColumnSetting(model);
        });

        this.listenTo(Events, 'task:myview:columnshowhide', function (model) {
            this.updateColumnSetting(model.toJSON());
        });
    },

    updateColumnSetting: function (newColumn) {        
        var localData = JSON.parse(localStorage.getItem(this.pageType + userContext.Result.UserContext[0].userId));        
        if (!_.isEmpty(localData)) {
            localData.forEach(function (column) {
                if (column.keyName === newColumn.keyName) {
                    column.isVisible = newColumn.isVisible
                    column.colWidth = newColumn.colWidth
                    column.orderid = newColumn.orderid
                }
            });
            localStorage.setItem(this.pageType + userContext.Result.UserContext[0].userId, JSON.stringify(localData));
        }
    },

    myviewBucketCount: function() {
        var subheader = $('#subheader');
        var count = $.get(window.routemap + 'api/task/userbuckets')
            .done(function(data) {
                _.each(data, function(obj) {
                    subheader.find('a[href="#' + obj.code + '"] span').html("(" + obj.taskCount + ")");
                });
            });
    },

    GetLayout: function(options) {
        return new Views.MyViewLayout({
            movefeedback: options.movefeedback
        });
    },

    updateText: function(collection, settingsdata) {
        collection.originalModels = collection.originalModels || collection.models;
        $('span#totalCount').html(collection.originalModels.length);
        $('#viewingcount').html(collection.length);
        var groups = _.groupBy(collection.originalModels, function(model) {
            return model.get('currentStatus')
        });
        new Views.infographicView({
            data: groups,
            el: $('#subbucketview .menu')
        }).render();
    },

    GetBucketRegion: function(buckets) {
        var bucketLinks = new Views.BucketLinks({
            collection: buckets
        });

        return this.show(bucketLinks, {
            loading: true,
            region: this.layout.bucketLinks
        });
    },

    GetGridViewRegion: function(collection, columnNames, columnList, keyName, gridsettings) {
        //console.log('GetGridViewRegion:', keyName);
        var dataGrid = new Views.DataGrid({
            collection: collection,
            columnNames: columnNames,
            columnList: columnList,
            keyNames: keyName,
            gridSettings: gridsettings,
        });

        return this.show(dataGrid, {
            loading: true,
            region: this.layout.gridView
        });
    },

    ShowMoveTask: function(taskIds) {
        var workflowStates = Reqres.request('workflowstate:entities', taskIds);
        Commands.execute('when:fetched', workflowStates, (function(_this) {
            return function() {
                var view = new Views.MoveTask({
                    collection: workflowStates
                });
            }
        }(this)));
    },

    ShowMultisort: function(collection) {
        var multisort = new Views.MultiSort({
            collection: collection
        });

        return this.show(multisort, {
            region: this.layout.popoverView
        });
    },

    showColumnShowHide: function(collection) {
        var columnvisibility = new Views.ColumnShowHide({
            collection: collection
        });

        return this.show(columnvisibility, {
            region: this.layout.popoverView
        });
    },

    showFiltersView: function(collection, taskdata) {
        collection.getFilterableFields();
        var filtersview = new Views.FilterView({
            collection: collection,
            taskcollection: taskdata
        });

        return this.show(filtersview, {
            region: this.layout.popoverView
        });
    },
    // System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(Request.QueryString["qs"]))

    initiateQuickSearch: function() {
        $('.ui.search').search({
            maxResults: '',
            searchFullText: true,
            cache: false,
            apiSettings: {
                url: window.routemap + 'api/firmsettings/quicksearch?term={query}',
            },
            onSelect: function(result, response, selectedEl) {
                var id = selectedEl.attr('data-id');
               
                window.location = window.routemap + "search/?qs=" + id;
            },
            searchFields: ['id', 'title'],
            templates: {
                standard: function(response) {
                    var html = '';
                    if (response.results !== 'undefined') {
                        $.each(response.results, function(index, result) {
                            html += '<div class="result" data-id="'+window.btoa(result.id.toString())+'"><div class="content"><div class="title qsclientname">' + result.clientName + '</div><div class="description qsaccno">' + result.accountNo + '</div><div class="description qslocation">' + result.location + '</div></div></div>';
                        });
                        return html;
                    }
                }
            }
        });

    },
});

},{"../../../application":3,"../../../lib/config/commands":67,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/controllers/application":71,"./view":170}],170:[function(require,module,exports){
var LayoutView = require('../../../lib/views/layout'),
    ItemView = require('../../../lib/views/item'),
    CollectionView = require('../../../lib/views/collection'),
    CompositeView = require('../../../lib/views/composite'),
    MyViewTemplate = require('../../../jst/workspace/defaultlayout-template.html'),
    MoveTaskTemplate = require('../../../jst/workspace/movetasklayout-template.html'),
    MultiSortTemplate = require('../../../jst/workspace/multisortlayout-template.html'),
    ShowHideColumnTemplate = require('../../../jst/workspace/columnshowhide-template.html'),
    FilterTemplate = require('../../../jst/workspace/filterlayout-template.html'),
    Reqres = require('../../../lib/config/reqres'),
    Events = require('../../../lib/config/events'),
    Views = {};

//Work needs to be addressed on filteronstatus both here and controller, for temporary hurry and dirty work.

Views.DataGrid = ItemView.extend({
    template: false,
    id: 'dgrid',
    className: 'sixteen wide column',
    initialize: function () {
        this.visible = 0;
        var self = this;
        this.listenTo(this.collection, 'select:none', function () {
            $('#taskToolBar').css('pointer-events', 'none').animate({
                opacity: 0
            }).siblings('#action').animate({
                top: '22px'
            });
            // $('div#taskToolBar').addClass("disableoption");
            $('span#selectedcount').html(this.collection.selectedLength);
        });
        this.listenTo(Events, 'Export:Grid:Data:CSV', function () {
            var temp = this.exportPlugin.exportAsString('csv', {
                exportHiddenRows: true,
                exportHiddenColumns: true,
                columnHeaders: true,
                rowHeaders: true
            }).replace(/(<([^>]+)>)|(false)/ig, '');

            this.exportToCsv('XCM-myview.csv', temp);
        }, this);
        this.listenTo(this.collection, 'selected', function (model) {
            //$('div#taskToolBar').removeClass("disableoption");
            // $('span#selectedcount').html(this.collection.selectedLength);
            $('#taskToolBar').css('pointer-events', 'all').animate({
                opacity: 1
            }).siblings('#action').animate({
                top: '0px'
            });
        });

        this.listenTo(this.collection, 'select:some', function (collection) {
            $('span#selectedcount').html(this.collection.selectedLength);
        });

        this.listenTo(this.collection, 'select:all', function (collection) {
            $('span#selectedcount').html(this.collection.selectedLength);
        });

        this.listenTo(this.collection, 'select:none', this.refreshGrid);

        this.listenTo(this.collection, 'update reset sort', this.refreshGrid);
        // this.listenTo(this.collection, 'change:points', this.refreshGrid);
        this.listenTo(this.collection, 'change', this.refreshGrid);
    },
    exportToCsv: function (filename, content) {
        var blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
        if (navigator.msSaveBlob) { // IE 10+
            navigator.msSaveBlob(blob, filename);
        } else {
            var link = document.createElement("a");
            if (link.download !== undefined) { // feature detection
                // Browsers that support HTML5 download attribute
                var url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", filename);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    },
    refreshGrid: function () {
        var grid = this.$el.handsontable('getInstance');
        // $('span#totalCount').html(this.collection.length);
        //if (this.collection.length >= 100) {
        //    grid.removeHook('afterScrollVertically', this.fetchRecords);
        //}
        if (!_.isUndefined(grid)) {
            grid.updateSettings({
                maxRows: grid.getSettings().__proto__.data.length,
                data: this.collection
            });
            grid.render();
            // this.$('.wtHolder').animate({scrollTop:0}, '200');
            this.$('.wtHolder').scrollTop(0);
        }
    },
    events: {
        'click th': 'sortAnnouncement',
        'click a.controlsheetlink': 'openControlSheet'
    },

    openControlSheet: function (e) {
        e.preventDefault();
        e.stopPropagation();
        var link = e.target.href;
        window.open(link, 'Routing', 'scrollbars=yes,type=fullWindow,fullscreen,resizable=yes,width=' + document.documentElement.clientWidth + ',height=' + document.documentElement.clientWidth);
    },

    sortAnnouncement: function (e) {
        var txt = this.$el.find(e.currentTarget).find('span').text();
        Events.trigger('singlesort:grid', txt);
    },
    onDomRefresh: function () {
        //console.log(this.options.columnList, this.options.columnNames, this.options.keyNames);
        var self = this,
            height = this.options.height ? this.options.height : ($(window).height() - this.$el.offset().top) - 65,
            headers = this.options.columnNames;

        //console.log(self.getText("name"));
        var isLinkPage = _.indexOf(window.location.pathname.split('/'), 'linkedtasks') >= 0;

        this.$el.css({
            'width': '100%',
            'overflow': 'hidden'
        });
        if (this.collection.length) {
            $('div#action .ui.icon.buttons').removeClass('disabled');
            this.$el.handsontable({
                data: this.collection,
                columns: this.options.columnList,
                colHeaders: headers,
                currentRowClassName: 'currentRow',
                currentColClassName: 'currentCol',
                rowHeaders: true,
                stretchH: 'all',
                height: height,
                fixedColumnsLeft: 5,
                wordWrap: false,
                maxRows: this.collection.length,
                manualColumnFreeze: true,
                manualColumnResize: true,
                afterInit: function () {
                    self.exportPlugin = this.getPlugin('exportFile');
                },
                // observeChanges: false,
                //comments: true,
                //columnSorting: true,
                //sortIndicator: true,
                //columnSorting: {
                //    column: 1,
                //    sortOrder: false // true = ascending, false = descending, undefined = original order
                //},
                // colWidths: this.options.pagetype === 'myview' ? [20,150, 80,40,90,40,80,180,70,70,130,70,40,40,40,40,40,40,30,30,30,30,30] : [300, 100],
                colWidths: function (col) {
                    var hot = self.$el.handsontable('getInstance'),
                        colname = hot.getColHeader(col),
                        totalwidth = document.documentElement.clientWidth,
                        columnwidth = _.where(self.options.gridSettings, {
                            displayName: colname
                        })[0].colWidth;
                    if (totalwidth < 2000) {
                        return ((totalwidth * columnwidth) / 100);
                    }
                },
                afterGetColHeader: function (col, th) {
                    if (col > 0) {
                        var header = this.getColHeader(col),
                            discriptivename = _.where(self.options.gridSettings, {
                                displayName: header
                            })[0].fullName;
                        //th.dataset.content = discriptivename;
                        th.title = discriptivename;
                        //th.classList.add('htLeft');
                        // th.dataset.variation="inverted";
                    }
                },
                beforeRender: function () {

                },
                afterRender: function () {
                    // self.$el.find('th[data-content]').popup('destroy');
                    self.$el.find('th').popup({
                        debug: false,
                    });

                    // self.$el.find('.htAutocompleteArrow').remove();
                },
                cells: function (row, col, prop) { // Enabled cell renderer for the manage linked tasks. Check if possible in tasks.js while doing column settings.
                    if (isLinkPage && this.instance.getSourceData().length) {
                        if ((col === 0) && this.instance.getSourceData().at(row).get('IPC') === 'N') {
                            return {
                                readOnly: true,
                                disableVisualSelection: true,
                                //comment: 'This linked task is disabled because it is in previous year. You cannot do any actions on it. Please update link tasks to bring it back if rolled over.'
                            };
                        }
                    }
                }
                //cells: function (row, col, prop) {
                //    if (col === 0 && self.options.bucketName.trim() === 'CATM') {
                //        return {
                //            readOnly: true
                //        };
                //    }
                //},
                //afterRender: function (td, row, col, prop, value) {
                //    console.log(td, row, col, prop, value);
                //}
            });
            this.$el.handsontable('getInstance').addHook('afterColumnResize', function (currentColumn, newSize, isDoubleClick) {
                var model = _.where(self.options.gridSettings, { displayName: this.getColHeader(currentColumn) })[0];
                model.colWidth = Math.floor((100 * newSize) / (document.documentElement.clientWidth));
                Events.trigger('task:myview:columnresize', model);
            });
            if (!isLinkPage)
                this.$el.handsontable('getInstance').addHook('afterOnCellMouseDown', this.openpopupCallback);
        } else {
            $('div#action .ui.icon.buttons').addClass('disabled');
            this.$el.append('<div class="ui floating message"><div class="header red">No Records Found.</div></div>');
        }

        if (Backbone.history.fragment === 'XATM' || Backbone.history.fragment === 'XTSK') {
            $('div#extensionMove').show();
            $('div#taskMove').hide();
        } else if (!isLinkPage) {
            $('div#extensionMove').hide();
            $('div#taskMove').show();
        }

        this.hotInstance = this.$el.handsontable('getInstance');

        // this.exportPlugin =  this.hotInstance.getPlugin('exportFile');

        //this.$el.handsontable('getInstance').addHook('afterScrollVertically', this.fetchRecords);

        // $('span#totalCount').html(this.collection.length);
        // $('.tasks.count').html(this.collection.length);

    },

    getExportPlugin: function () {

    },

    openpopupCallback: function (event, coords, TD) {
        var colname = _.intersection(TD.classList, ["points", "checklists", "details", "extensionTask", "clientName", "isPortal"]);
        if (coords.row >= 0 && !_.isUndefined(colname)) {
            switch (_.first(colname)) {
                case "extensionTask":
                    if (!_.isEmpty(TD.textContent.trim())) {
                        var clientinfo = this.getSourceData().at(coords.row).get('clientName') + '_' + this.getSourceData().at(coords.row).get('clientAccountNumber') + '_' + this.getSourceData().at(coords.row).get('clientPhoneNumber') + '_' + moment(this.getSourceData().at(coords.row).get('periodEndDate')).format('MM/DD/YYYY') + '_' + this.getSourceData().at(coords.row).get('clientEmail') + '_' + this.getSourceData().at(coords.row).get('description') + '_' + this.getSourceData().at(coords.row).get('taskType');
                        window.localStorage.setItem('extension_clientinfo', clientinfo);
                        if (!_.isEmpty(TD.textContent)) {
                            Events.trigger('show:extensions:page', this.getSourceData().at(coords.row));
                        }
                    }
                    break;
                case "points":
                    var taskId = this.getSourceData().at(coords.row).get('id');
                    var clientinfo = this.getSourceData().at(coords.row).get('clientName') + '_' + this.getSourceData().at(coords.row).get('clientAccountNumber') + '_' + this.getSourceData().at(coords.row).get('clientPhoneNumber') + '_' + moment(this.getSourceData().at(coords.row).get('periodEndDate')).format('MM/DD/YYYY') + '_' + this.getSourceData().at(coords.row).get('clientEmail') + '_' + this.getSourceData().at(coords.row).get('description') + '_' + this.getSourceData().at(coords.row).get('taskType') + '_' + this.getSourceData().at(coords.row).get('isPortal');
                    var querystring = window.open(window.routemap + 'point', 'Points', 'top=30,left=250,height=600,width=1000,status=yes,scrollbars=yes,resizable=yes');
                    window.localStorage.removeItem('points_Taskids');
                    window.localStorage.setItem('points_Taskids', taskId);
                    window.localStorage.removeItem('points_catId');
                    window.localStorage.setItem('points_catId', this.getSourceData().at(coords.row).get('categoryId'));
                    window.localStorage.setItem('points_clientinfo', clientinfo);
                    window.localStorage.removeItem('points_statusId');
                    window.localStorage.setItem('points_statusId', this.getSourceData().at(coords.row).get('statusId'));
                    break;
                case "checklists":
                    var taskId = this.getSourceData().at(coords.row).get('id');
                    var clientinfo = this.getSourceData().at(coords.row).get('clientName') + '_' + this.getSourceData().at(coords.row).get('clientAccountNumber') + '_' + this.getSourceData().at(coords.row).get('clientPhoneNumber') + '_' + moment(this.getSourceData().at(coords.row).get('periodEndDate')).format('MM/DD/YYYY') + '_' + this.getSourceData().at(coords.row).get('clientEmail') + '_' + this.getSourceData().at(coords.row).get('description') + '_' + this.getSourceData().at(coords.row).get('taskType') + '_' + this.getSourceData().at(coords.row).get('isPortal');
                    var querystring = window.open(window.routemap + 'point/#checklist', 'Points', 'top=30,left=250,height=600,width=1000,status=yes,scrollbars=yes,resizable=yes');
                    window.localStorage.removeItem('points_Taskids');
                    window.localStorage.setItem('points_Taskids', taskId);
                    window.localStorage.removeItem('points_catId');
                    window.localStorage.setItem('points_catId', this.getSourceData().at(coords.row).get('categoryId'));
                    window.localStorage.setItem('points_clientinfo', clientinfo);
                    window.localStorage.removeItem('points_statusId');
                    window.localStorage.setItem('points_statusId', this.getSourceData().at(coords.row).get('statusId'));
                    break;
                case "details":
                    var taskId = this.getSourceData().at(coords.row).get('id');
                    var clientinfo = this.getSourceData().at(coords.row).get('clientName') + '_' + this.getSourceData().at(coords.row).get('clientAccountNumber') + '_' + this.getSourceData().at(coords.row).get('clientPhoneNumber') + '_' + moment(this.getSourceData().at(coords.row).get('periodEndDate')).format('MM/DD/YYYY') + '_' + this.getSourceData().at(coords.row).get('clientEmail') + '_' + this.getSourceData().at(coords.row).get('description') + '_' + this.getSourceData().at(coords.row).get('taskType');
                    window.localStorage.removeItem('tasktrack_Taskids');
                    window.localStorage.setItem('tasktrack_Taskids', taskId);
                    window.localStorage.setItem('tasktrack_clientinfo', clientinfo);

                    var route = 'task/details';
                    if (Backbone.history.fragment === 'XATM' || Backbone.history.fragment === 'XTSK') {
                        route = 'extensions/details';
                    }
                    var querystring = window.open(window.routemap + route, 'Details', 'top=30,left=250,height=600,width=1000,status=yes,scrollbars=yes,resizable=yes');
                    break;
                case "clientName":
                    var taskId = window.btoa(this.getSourceData().at(coords.row).get('id').toString());
                    //window.localStorage.removeItem('Portal_Taskid');
                    //window.localStorage.removeItem('Portal_ClientID');
                    //window.localStorage.removeItem('Portal_clientinfo');
                    //var querystring = window.open(window.routemap + 'routing', 'Routing', 'scrollbars=yes,type=fullWindow,fullscreen,resizable=yes,width=' + document.documentElement.clientWidth + ',height=' + document.documentElement.clientWidth);
                    //window.localStorage.removeItem('routing_TaskId');
                    //window.localStorage.setItem('routing_TaskId', taskId);
                    var querystring = window.open(window.routemap + 'routing/?tid=' + taskId, 'Routing', 'scrollbars=yes,type=fullWindow,fullscreen,resizable=yes,width=' + document.documentElement.clientWidth + ',height=' + document.documentElement.clientWidth);

                    break;
                case "isPortal":
                    if (!_.isEmpty(TD.textContent)) {
                        var taskId = this.getSourceData().at(coords.row).get('id');
                        var clientId = this.getSourceData().at(coords.row).get('clientId');
                        var clientinfo = this.getSourceData().at(coords.row).get('clientName') + '=' + this.getSourceData().at(coords.row).get('clientAccountNumber') + '=' + this.getSourceData().at(coords.row).get('clientPhoneNumber') + '=' + moment(this.getSourceData().at(coords.row).get('periodEndDate')).format('MM/DD/YYYY') + '=' + this.getSourceData().at(coords.row).get('clientEmail') + '=' + this.getSourceData().at(coords.row).get('description') + '=' + this.getSourceData().at(coords.row).get('taskType') + '=' + this.getSourceData().at(coords.row).get('isPortal');
                        var querystring = window.open(window.routemap + 'CPAPortal', 'Portal', 'top=30,left=50,height=600,width=1200,status=yes,scrollbars=yes,resizable=yes');
                        window.localStorage.removeItem('Portal_Taskid');
                        window.localStorage.removeItem('Portal_ClientID');
                        window.localStorage.removeItem('Portal_clientinfo');
                        window.localStorage.setItem('Portal_Taskid', taskId);
                        window.localStorage.setItem('Portal_ClientID', clientId);
                        window.localStorage.setItem('Portal_clientinfo', clientinfo);
                    }
                    break;

            }
        } else {
            // Events.trigger('singlesort:grid', TD.innerText);
        }
    },

});

Views.MultiSort = ItemView.extend({
    template: MultiSortTemplate,
    initialize: function () {
        this.subViews = [];
    },
    onDomRefresh: function () {
        this.createList();
        this.applyinitialSorting();
    },

    events: {
        'click #applySort': 'applySort',
        'click #resetSort': 'resetView'
    },

    resetView: function () {
        Events.trigger('reset:sortoptions');
        this.onDomRefresh();
    },

    applySort: function () {
        Events.trigger('apply:sort');
        this.destroySubViews();
        this.remove();
        this.undelegateEvents();
        this.$el.parent().popup('hide');
    },

    destroySubViews: function () {
        if (this.subViews.length) {
            _.each(this.subViews, function (view) {
                view.remove();
                view.undelegateEvents();
            });
            this.subViews = [];
        }
    },

    createList: function () {
        this.destroySubViews();
        this.collection.each(function (mod, index) {
            var element = mod.get('isSorted') ? '.dropzone' : '.dragzone';
            this.subViews.push(new Views.MultiSortList({
                model: mod
            }));
            this.$el.find(element).append(this.subViews[index].render().el);
        }, this);
    },

    applyinitialSorting: function () {
        dragula([document.querySelector('.dragzone'), document.querySelector('.dropzone')], {
            moves: function (el, container, handle) {
                return true; // elements are always draggable by default
            },
            accepts: function (el, target, source, sibling) {
                var isfromdargZone = _.indexOf(source.classList, 'dragzone') != -1,
                    isfromdropZone = _.indexOf(source.classList, 'dropzone') != -1;

                if ((isfromdargZone && target.childElementCount <= 2) || isfromdropZone) {
                    Events.trigger('moved', el);
                    return true; // elements can be dropped in any of the `containers` by default
                } else {
                    Events.trigger('moved', el);
                    return false;
                }
            },
            direction: 'vertical', // Y axis is considered when determining where an element would be dropped
            copy: false, // elements are moved by default, not copied
            revertOnSpill: false, // spilling will put the element back where it was dragged from, if this is true
            removeOnSpill: false // spilling will `.remove` the element, if this is true
        });

    }
});

Views.MultiSortList = ItemView.extend({
    initialize: function () {
        Events.on('moved', this.setData, this);
    },

    setData: function (ele, action) {
        this.model.set('sortOrder', this.$el.index());
        if (this.el === ele) {
            this.model.set('isSorted', this.$el.closest('.dropzone').length ? true : false);
        }
    },
    className: 'ui attached segment',
    template: _.template('<p><%= displayName %></p>')
});

Views.ColumnShowHide = ItemView.extend({
    template: ShowHideColumnTemplate,
    onDomRefresh: function () {
        this.collection.each(function (model) {
            this.$el.find('#columndisplay').append(new Views.ColumnShowHideList({
                model: model
            }).render().el);
        }, this);

        $('.ui.checkbox').checkbox();
    }
});

Views.ColumnShowHideList = ItemView.extend({
    className: 'ui attached segment',
    template: _.template(['<div class="inline field"><div class="ui checkbox">',
        '<input type="checkbox" <% if(isVisible) { %> checked <% } %> ><label><%= displayName %></label>',
        '</div></div>'
    ].join('')),
    events: {
        'click label': 'toggleState'
    },
    toggleState: function () {
        this.model.set('isVisible', !this.model.get('isVisible'));
        //this.model.save();
        Events.trigger('task:myview:columnshowhide', this.model);
    }
});

Views.FilterView = ItemView.extend({
    template: FilterTemplate,
    initialize: function () {
        this.listenTo(this.collection, 'change', this.showSelected);
    },

    events: {
        'click .applyfilters': 'applyFilters',
        'click .resetfilters': 'resetFilters'
    },

    onRender: function () {
        var filteredData = this.collection.filter(function (model) {
            return model.get('filterCriteria').length
        });

        _.each(filteredData, function (mod, index) {
            _.each(mod.get('filterCriteria'), function (name) {
                this.showSelected(mod, null, name);
            }, this);
        }, this);
    },

    resetFilters: function () {
        this.options.taskcollection.resettoOriginal();
        this.collection.clearFilters();
    },

    applyFilters: function () {
        var filters = _.filter(this.collection.toJSON(), function (model) {
            return model.filterCriteria.length;
        }, this);

        this.options.taskcollection.filtergridData(filters);
        this.$el.parent().popup('hide');
    },

    showSelected: function (model, obj, item) {
        if (model.get('filterCriteria').length >= model.previous('filterCriteria').length || _.isNull(obj)) {
            this.$el.find('#selectedfilters').append(new Views.FilterResultView({
                model: model,
                item: item ? item : _.last(model.get('filterCriteria'))
            }).render().el);
        }
    },

    onDomRefresh: function () {
        this.collection.each(function (model) {
            this.$el.find('#filtersview').append(new Views.FilterLabelView({
                model: model
            }).render().el);
            this.$el.find('#filtersview').append(new Views.FilterInputView({
                model: model,
                data: this.options.taskcollection
            }).render().el);
        }, this);

    }
});


Views.FilterLabelView = ItemView.extend({
    className: 'six wide column',
    template: _.template('<label class=""><%= displayName %></label>')
});

Views.FilterInputView = ItemView.extend({
    initialize: function () {
        this.generatedropDownData(this.options.data);
    },
    className: 'nine wide column',
    template: _.template(['<div class="ui fluid search" id="<%= keyName %>">',
        '<div class="ui icon fluid input">',
        '<input class="prompt" type="text" placeholder="Search <%= displayName %>...">',
        '<i class="search icon"></i>',
        '</div><div class="results" style="max-height: 250px; height:auto; overflow-y: auto;"></div></div>'
    ].join('')),

    generatedropDownData: function (collection) {
        // var data = JSON.parse(JSON.stringify(collection.originalModels));
        var data = collection.toJSON.call(collection.originalModels);
        this.dropDownData = _.uniq(_.pluck(data, this.model.get('keyName'))).map(function (name) {
            return {
                title: name
            };
        });
    },

    onRender: function () {
        var that = this;

        this.$el.find('#' + this.model.get('keyName'))
            .search({
                source: that.dropDownData,
                searchFields: [
                    'title'
                ],
                cache: false,
                minCharacters: 0,
                maxResults: that.dropDownData.length,
                searchFullText: true,
                onSelect: function (res) {
                    if (!(_.indexOf(that.model.get('filterCriteria'), res.title) >= 0)) {
                        that.model.set({
                            'filterCriteria': that.model.get('filterCriteria').concat(res.title)
                        });
                    }

                    $(this).find('input').val('');
                    $(this).search('hide results');

                    return false;
                }
            });
    }
});

Views.FilterResultView = ItemView.extend({
    className: 'ui image label',
    template: _.template('<%= name %><i class="delete icon"></i>'),
    events: {
        'click .delete.icon': 'removeandUpdate'
    },
    initialize: function () {
        this.listenTo(this.model, 'change:filterCriteria', this.removeElement);
    },

    removeElement: function (model) {
        if (!model.get('filterCriteria').length) {
            this.remove();
            this.undelegateEvents();
        }
    },

    removeandUpdate: function () {
        this.model.set('filterCriteria', _.without(this.model.get('filterCriteria'), this.options.item), {
            silent: false
        });

        this.$el.remove();

        return false;
    },
    render: function () {
        this.$el.append(this.template({
            name: this.options.item
        }));
        return this;
    }
});

Views.infographicView = ItemView.extend({
    template: _.template('<div class="item" id="<%= id %>"><%= name %><span class="description"><strong><%= length %></strong></span></div>'),
    render: function () {
        this.$el.empty().append('<div class="item" id="0"> All <span class="description"></span></div>')
        _.each(this.options.data, function (val, key) {
            this.$el.append(this.template({
                name: key,
                length: val.length,
                id: val[0].get('currentStatus')
            }));
        }, this);
    }
});

Views.MyViewLayout = LayoutView.extend({
    template: MyViewTemplate,
    className: 'sixteen wide column',
    regions: {
        bucketLinks: 'div#bucketlinks',
        gridView: 'div#taskdata',
        popoverView: 'div#popoverDialog'
        //sidePanel: 'div#sidePanel'
    },
    templateHelpers: function () {
        return {
            name: '',
            // name: 'TASKS ASSIGNED TO ME',
            display: 'block',
            inputboxdisplay: 'none',
            helpbardisplay: 'none'
        }
    },
    events: {
        'click .menu .item': 'getStatusName',
        // 'click #subbucketview': 'toggleStatusView',
        'click div#taskInfoIndivualLink a.item': 'TaskInfoMenuClicked',
    },
    TaskInfoMenuClicked: function (evt) {
        $('#taskInfo').popup('hide');
        var _startModuleID = evt.currentTarget.id;
        this.trigger('task:info:clicked', _startModuleID);
    },
    toggleStatusView: function (e) {
        this.$el.find(e.currentTarget).children('.menu').toggle();
    },
    getStatusName: function (e) {
        var id = e.currentTarget.id;
        Events.trigger('filter:onstatus', id, this.$(e.currentTarget).contents().get(0).nodeValue);
    },
    triggers: {
        //'click div#taskInfo': 'task:info:clicked',
        //'click div#taskInfoIndivualLink a.item ': 'task:info:clicked',
        'click div#taskMove': 'task:move:clicked',
        'click div#extensionMove': 'task:moveextension:clicked',
        'click div#addTask': 'task:add:clicked',
        'click div#refresh': 'task:refresh:clicked',
        'click div#sortby': 'task:multisort:clicked',
        'click div#Columns': 'task:columhideshow:clicked',
        'click div#filterby': 'task:filters:clicked',
        //'click div#points': 'points:clicked',
        'click div#points': 'task:bulkaddpoints:clicked',
        'click div#extensions': 'extension:clicked',
        'click div#selected': 'show:selected:clicked',
        'click button#updateprojectedstartdate': 'updateprojectedstartdate:clicked',
        'click div#export': 'Export:Grid:Data'
    },
    initialize: function () {

    },
    showTaskInfo: function () {
        // Events.trigger
    },
    updateTitle: function (title) {
        this.$('span#bucketTitle').html(title);
    },
    onRender: function () {
        //console.log(this.GridToolBar);
        // this.$('div#taskToolBar').hide();
        return;
    },
    onDomRefresh: function () {
        var self = this;

        this.$('#action div[data-content]').popup();
        /* handling user rights*/

        if ((_.where(userContext.Result.Rights, {
            module_id: 29
        })[0].access === 0)) {
            $('#extensions').addClass('hideItem');
        }
        /* end handling user rights*/

        if (!_.isUndefined(this.options.movefeedback) && this.options.movefeedback !== '') {
            $('#myviewsuccessMsg').show();
            var moveMsg = (this.options.movefeedback.tottasks - this.options.movefeedback.failedtasks) + ' out of ' + '' + this.options.movefeedback.tottasks + '' + ' tasks moved successfully.'
            $('#myviewsuccessMsglbl').html(moveMsg);
        }

        this.$('#FlashCategoryCheck').on('click', function () {
            $(this).closest('.message').hide();
        });
        this.$('#myviewsuccessClose').on('click', function () {
            $(this).closest('.message').hide();
        });

        this.$('div#filterby, div#sortby , div#Columns')
            .popup({
                inline: true,
                on: 'click',
                debug: false,
                popup: $(self.popoverView.el),
                position: 'bottom right',
                delay: {
                    show: 800,
                    hide: 800
                },
                onHidden: function () {
                    // self.popoverView.$el.removeAttr('style');
                    self.popoverView.empty();
                    Events.trigger('columnsettingcollection: resettoorginal');
                }
            });

        this.$('.ui.dropdown').dropdown();

        this.$('#taskInfo').popup({
            inline: true,
            hoverable: true,
            debug: false,
            position: 'bottom left',
            delay: {
                show: 0,
                hide: 50
            },
            distanceAway: -8
        });

        this.$('a[data-content]').popup({
            debug: false
        });

        return;

    }
});

module.exports = Views;

},{"../../../jst/workspace/columnshowhide-template.html":35,"../../../jst/workspace/defaultlayout-template.html":38,"../../../jst/workspace/filterlayout-template.html":51,"../../../jst/workspace/movetasklayout-template.html":55,"../../../jst/workspace/multisortlayout-template.html":56,"../../../lib/config/events":68,"../../../lib/config/reqres":69,"../../../lib/views/collection":81,"../../../lib/views/composite":82,"../../../lib/views/item":83,"../../../lib/views/layout":84}]},{},[1])


//# sourceMappingURL=workspace.debug.js.map